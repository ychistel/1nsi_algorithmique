%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: Ex-dichotomie.dvi
%%CreationDate: Tue Feb 01 17:17:28 2022
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: SFBX2488 SFRM2074 SFBX1440 SFRM1095 CMMI10 CMR10
%%+ SFBX1095
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Pdownload35 -o Ex-dichotomie.ps
%+ Ex-dichotomie.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2022.02.01:1817
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 4 2020-06-09 08:32:19Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-blur.pro 0 0
%%
%% This is file `pst-blur.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% pst-blur.dtx  (with options: `prolog')
%% 
%% IMPORTANT NOTICE:
%% 
%% For the copyright see the source file.
%% 
%% Any modified versions of this file must be renamed
%% with new filenames distinct from pst-blur.pro.
%% 
%% For distribution of the original source see the terms
%% for copying and modification in the file pst-blur.dtx.
%% 
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
%% $Id: pst-blur.dtx,v 2.0 2005/09/08 09:48:33 giese Exp $
%%
%% Copyright 1998-2007 Martin Giese, mgiese@risc.uni-linz.ac.at
%%                     Herbert Voss, voss@pstricks.de
%%
%% This file is under the LaTeX Project Public License
%% See CTAN archives in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-blur' is a PSTricks package for blurred shadows
%%
/tx@PstBlurDict 60 dict def
tx@PstBlurDict begin
/Iterate {
  /SegLines ED
  /ThisB ED /ThisG ED /ThisR ED
  /NextB ED /NextG ED /NextR ED
  /W 2.0 BlurRadius mul def
  /WDec W SegLines div def
  /RInc NextR ThisR sub SegLines div def
  /GInc NextG ThisG sub SegLines div def
  /BInc NextB ThisB sub SegLines div def
  /R ThisR def
  /G ThisG def
  /B ThisB def
  SegLines {
    R G B
    sqrt 3 1 roll sqrt 3 1 roll sqrt 3 1 roll
    setrgbcolor
    gsave W setlinewidth
    stroke grestore
    /W W WDec sub def
    /R R RInc add def
    /G G GInc add def
    /B B BInc add def
  } bind repeat
} def
/BlurShadow {
  Shadow
  /BlurSteps ED
  /BlurRadius ED
  dup mul /BEnd ED dup mul /GEnd ED dup mul /REnd ED
  dup mul /BBeg ED dup mul /GBeg ED dup mul /RBeg ED
  RBeg REnd add 0.5 mul /RMid ED
  GBeg GEnd add 0.5 mul /GMid ED
  BBeg BEnd add 0.5 mul /BMid ED
  /OuterSteps BlurSteps 2 div cvi def
  /InnerSteps BlurSteps OuterSteps sub def
  1 setlinejoin
  RMid GMid BMid REnd GEnd BEnd OuterSteps Iterate
  gsave RBeg sqrt GBeg sqrt BBeg sqrt setrgbcolor fill grestore
  clip
  0 setlinejoin
  RMid GMid BMid RBeg GBeg BBeg InnerSteps Iterate
} def
end

%%EndProcSet
%%BeginProcSet: pst-func.pro 0 0
%% $Id: pst-func.pro 861 2018-12-13 20:40:06Z herbert $
%%
%% This is file `pst-func.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-func'
%%
%% Herbert Voss <hvoss@tug.org>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-func' is a PSTricks package to plot special math functions
%%
%%
%% version 0.17 / 2018-12-13  Herbert Voss
%
/tx@FuncDict 100 dict def
tx@FuncDict begin
%
/eps1 1.0e-05 def
/eps2 1.0e-04 def
/eps5 1.0e-05 def
/eps8 1.0e-08 def
%
/PiHalf 1.57079632679489661925640 def
/CEuler 0.5772156649 def % Euler-Mascheroni constant
%
/factorial { % n on stack, returns n! 
  dup 32 gt { pop 1e32 } {
    dup 0 eq { 1 }{ 
      dup 1 gt { dup 1 sub factorial mul } if }
    ifelse } ifelse 
} def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/Pascal [
  [                   1                   ] % 0
  [                 1   1                 ] % 1
  [               1   2   1               ] % 2
  [             1   3   3   1             ] % 3
  [           1   4   6   4   1           ] % 4
  [         1   5  10  10   5   1         ] % 5
  [       1   6  15  20  15   6   1       ] % 6
  [     1   7  21  35  35  21   7   1     ] % 7
  [   1   8  28  56  70  56  28  8    1   ] % 8
  [ 1   9  36  84 126 126  84  36  9    1 ] % 9
] def
%
/GetBezierCoor { 				% t on stack
  10 dict begin					% hold all local
  /t ED
  /t1 1 t sub def				% t1=1-t
  /Coeff Pascal BezierType get def		% get the coefficients
    0 0						% initial values for x y
    BezierType -1 0 {				% BezierType,...,2,1,0
      /I ED					% I=BezierType,...,2,1,0
      /J BezierType I sub def			% J=0,1,2,...,BezierType
      /T t I exp Coeff J get mul def		% coeff(J)*t^I
      /T1 t1 J exp def				% t1^J  
      Points I dup add 1 add get		% y(2*I+1)
      T mul T1 mul add				% the y coordinate
      exch					% y x	
      Points I dup add get			% x(2*I)
      T mul T1 mul add				% the x coordinate
      exch					% x y	
    } for					% x y on stack
  end
} def

/BezierCurve { % on stack [ coors psk@plotpoints BezierType
%  10 dict begin
  /BezierType ED                        % 2,3,4,5,6,...
  1 exch div /epsilon ED                % step for Bezier =1/plotpoints
  ]                                     % [ yi xi ... y3 x3 y2 x2 y1 x1 y0 x0]
  ps@ReverseOrderOfPoints               % [y0 x0 y1 x1 ... yi xi]
  /Points ED 				% save Points array
  epsilon GetBezierCoor 		% next Bezier point
  Points 0 get Points 1 get 		% starting point
  ArrowA lineto 
  epsilon epsilon 1 epsilon sub { % on stack is the loop variable
    GetBezierCoor lineto 
  } for 
  1 epsilon sub GetBezierCoor  
  1 GetBezierCoor  
  ArrowB lineto moveto
%  end
} def

/Bernstein { % on stack tStart tEnd plotpoints i n
  12 dict begin				% hold all local
  /envelope ED				% plot envelope?
  /n ED 
  /i ED
  /ni n i sub def  
  /epsilon ED				% step=1/plotpoints
  /tEnd ED
  /tStart ED
%
% B_{i,n}(t)=\binom{n}{i}t^i(1-t)^{n-i}      (Bernstein)
% f_n(x)=\frac{1}{\sqrt{\pi n\cdot x(1-x)}}  (envelope)
%
  n i MoverN /noveri ED			% \binom{n}{i}
  [					% for the array of points
  tStart epsilon tEnd {
    dup dup /t ED			% leave one on stack
    neg 1 add /t1 ED			% t1=1-t
    envelope 
      { t t1 mul 4 mul PiHalf mul n mul sqrt 1 exch Div }	% envelope
      { noveri t i exp mul t1 ni exp mul } ifelse 	% t f(t)
    ScreenCoor				% convert to screen coor
  } for
  end
  false /Lineto /lineto load def Line
} def
%%
/Si { % integral sin from 0 to x (arg on stack)
  10 dict begin				% hold all local
  dup 0 eq 
  { pop 0 } 
  { 
    /arg exch def  % x
    /arg2 arg dup mul def
    /Sum arg def   %
    /sign -1 def   
    /I 3 def
    /Frac arg2 arg mul 6 div def
    { %  a sequence of x - x^3/(3*3!) + x^5/(5*5!) -...+...
      Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
      /sign sign neg def
      /I I 2 add def
      Frac arg2 mul I 1 sub I mul div /Frac ED
%    arg I Power dup abs 1e30 gt { pop exit } if
%    I factorial div I div sign mul 
%    dup abs eps8 lt { pop exit } if 
%    Sum add /Sum exch def
%    /sign sign neg def
%    /I I 2 add def
   } loop
   Sum
  } ifelse
  end
} def
%
/si { % integral sin from x to infty -> si(x)=Si(x)-pi/2
  Si PiHalf sub
} def
%
/Ci { % integral cosin from x to infty (arg on stack)
  10 dict begin				% hold all local
  abs /arg exch def
  arg 0 eq { 0 } { 
    /arg2 arg dup mul def 
    /Sum CEuler arg ln add def
    /sign -1 def
    /I 2 def
    /Frac arg2 2 div def % first fraction
    { Frac I div sign mul
      dup abs eps5 lt { pop exit } if
      Sum add /Sum exch def
     /sign sign neg def
     /I I 2 add def
     Frac arg2 mul I 1 sub I mul div /Frac ED
    } loop
    Sum
  } ifelse
  end
} def
%
/ci { % integral cosin from x to infty -> ci(x)=-Ci(x)+ln(x)+CEuler
  dup Ci neg exch abs ln add CEuler add
} def
%
/MaxIter 255 def
/func { coeff Derivation FuncValue } def
/func' { coeff Derivation 1 add FuncValue } def
/func'' { coeff Derivation 2 add FuncValue } def
%
/NewtonMehrfach {% the start value must be on top of the stack
  /Nx exch def 
  /Iter 0 def
  {
    /Iter Iter 1 add def
    Nx func /F exch def % f(Nx)
    F abs eps2 lt { exit } if
    Nx func' /FS exch def % f'(Nx) 
    FS 0 eq { /FS 1.0e-06 def } if
    Nx func'' /F2S exch def % f''(Nx)
    1.0 1.0 F F2S mul FS dup mul div sub div /J exch def
    J F mul FS div /Diff exch def 
    /Nx Nx Diff sub def
    Diff abs eps1 lt Iter MaxIter gt or { exit } if 
  } loop 
  Nx % the returned value ist the zero point
} def

/Steffensen {% the start value must be on top of the stack
  /y0 exch def % the start value
  /Iter 0 def   /MaxIter 200 def
  { pstack
    y0 func /F exch def
    F abs eps2 lt { exit } if
    y0 F sub /Phi exch def
    Phi func /F2 exch def
    F2 abs eps2 le { exit }{
      Phi y0 sub dup mul Phi F2 sub 2 Phi mul sub y0 add Div /Diff exch def
      y0 Diff sub /y0 exch def
      Diff abs eps1 le { exit } if
    } ifelse
    /Iter Iter 1 add def
    Iter MaxIter gt { exit } if
  } loop
  y0 28 mul % the returned value ist the zero point
  0  
  3 0 360 arc gsave 0 0 1 setrgbcolor fill grestore 1 setlinewidth stroke
} def 
%
/Horner {% x [coeff] must be on top of the stack
  aload length
  dup 2 add -1 roll
  exch 1 sub {
    dup 4 1 roll
    mul add exch
  } repeat
  pop % the y value is on top of the stack
} def
%
/FuncValue {% x [coeff] Derivation must be on top of the stack
  {
    aload 			% a0 a1 a2 ... a(n-1) [array]
    length                      % a0 a1 a2 ... a(n-1) n
    1 sub /grad exch def        % a0 a1 a2 ... a(n-1) 
    grad -1 1 {                 % for n=grad step -1 until 1
      /n exch def               % Laufvariable speichern
      n                         % a0 a1 a2 ... a(n-1) n
      mul                       % a0 a1 a2 ... a(n-1)*n 
      grad 1 add                % a0 a1 a2 ... a(n-1)*n grad+1 
      1 roll                    % an*na0 a1 a2 ... a(n-2)
    } for
    pop                         % loesche a0
    grad array astore           % [ a1 a2 ... a(n-2)]
  } repeat
  Horner
} def
%
/FindZeros { % dxN dxZ must be on top of the stack (x0..x1 the intervall) => []
  12 dict begin 
  /dxZ exch def /dxN exch def
  /pstZeros [] def 
  x0 dxZ x1 { % suche Nullstellen
    /xWert exch def
    xWert NewtonMehrfach 
    %xWert Steffensen 
    /xNull exch def 
    pstZeros aload length /Laenge exch def % now test if value is a new one
    Laenge 0 eq 
      { xNull 1 }
      { /newZero true def
        Laenge {
	  xNull sub abs dxN lt { /newZero false def } if
        } repeat
	pstZeros aload pop
        newZero { xNull Laenge 1 add } { Laenge } ifelse } ifelse
    array astore 
    /pstZeros exch def
  } for
  pstZeros  % the end array is now on the stack
  end
} def
%
/Simpson { % on stack must be a b M useXVal   --- simple version ---
% /SFunc must be defined 
  /useX ED  % for algebraic functions which uses f(x)
  /M ED /b ED /a ED
  /h b a sub M 2 mul div def
  /s1 0 def
  /s2 0 def
  1 1 M {
    /k exch def
    /xVal k 2 mul 1 sub h mul a add def
    /s1 s1 xVal useX { /x exch def } if SFunc add def
  } for
  1 1 M 1 sub {
    /k exch def
    /xVal k 2 mul h mul a add def
    /s2 s2 xVal useX { /x exch def } if SFunc add def
  } for
  /I a useX { /x exch def } if SFunc b useX { /x exch def } if SFunc add s1 4 mul add s2 2 mul add 3 div h mul def
} def
%
%
/LogGamma { 5 dict begin	% z on stack
  /z ED
  /sum 0 def
  /k 1 def
  {
    z k div dup 1 add ln sub dup
    abs eps8 lt { pop exit } if
    sum add /sum exch def
    /k k 1 add def
  } loop
  sum z ln sub CEuler z mul sub
  end 
} def
%
/ChebyshevT { 5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
     /k exch def
     xtmp xtmp mul 1 sub k exp
     xtmp n 2 k mul sub exp mul
     n 2 k mul MoverN mul
     add
  } for
  end
} def
%
/ChebyshevU {5 dict begin	% z on stack
  /xtmp exch def
  /n exch def
  0 0 1 n .5 mul floor {
    /k exch def
    xtmp xtmp mul 1 sub k exp
    xtmp n 2 k mul sub exp mul
    n 1 add 2 k mul 1 add MoverN mul
    add
  } for
  end
} def
%
/vasicek{           %density=sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  2 dict begin
  /pd where { pop }{ /pd 0.22 def } ifelse    % element of (0,1) probability of default of portfolio  
  /R2 where { pop }{ /R2 0.11 def } ifelse    % element of (0,1) R_Squared of portfolio
  dup                 % x   x
  norminv             % x   norminv(x)
  dup mul             % x   norminv(x)^2
  exch                % norminv(x)2   x
  norminv             % norminv(x)2   norminv(x)
  1 R2 sub sqrt mul   % norminv(x)2   sqrt(1-R2)*norminv(x)
  pd norminv sub      % norminv(x)2   sqrt(1-R2)*norminv(x)-norminv(pd)
  R2 sqrt div         % norminv(x)2   1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd))
  dup mul             % norminv(x)2  (1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  sub                 % norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2
  2 div               % 1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  ENeperian exch exp  % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)
  1 R2 sub            % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   1-R2
  R2 div              % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   (1-R2)/R2
  sqrt                % exp(1/2*(norminv(x)2 -(1/sqrt(R2)*(sqrt(1-R2)*norminv(x)-norminv(pd)))2)   sqrt((1-R2)/R2)
  mul                 % sqrt((1-R2)/R2)*exp(1/2*(norminv(x)2 - (1/sqrt(R2)*((sqrt(1-R2)*norminv(x)-norminv(pd)))2))
  end
} def
%end{vasicek density}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def
%
end

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def product (Ghostscript)
search {pop pop pop revision 927 gt}{pop false} ifelse{/BorderArrayPatch{}
def}{/BorderArrayPatch{[exch{dup dup type/integertype eq exch type/realtype
eq or{BPToDvips}if}forall]}def} ifelse /HyperBorder {1 PDFToDvips}
def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx pdf@lly pdf@urx
pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly exch def dup
DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx exch
def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: SFBX1095
%!FontType1-1.0: SFBX1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1095, tcbx1095, labx1095, lbbx1095, lcbx1095, rxbx1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-227 -316 1723 930}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76F8A3359BAB9
9CCDA63EAB4501FF88DF4CE0D9DC9F071B528726352196D1D889EC0F0512EAF1
A6ED201F5B8FD2B90DA9585F5B2004EC8159EB426405D76A85AA0ED1D29596CE
FFD55DB52BF5C0325EB43E789D2128DE66E59F9A7C84CFF09969406DA529C87E
3410723FAC317F161388C55FBDC43B850230989AD991ADA95B1CDDC4D978E722
8BEB4E338C3EC48106B4274FD9FFC7CF03EF238D8160A515EA93C009A8F2D3B0
1CB8041F5EB86F1D975BF4EDDED8B7D2C81B665124CB1562B71114FA44449C6C
4DDCBBD36BC95B0E569A5A6EA9219B151426165BFEAA914437CA89EF4B0F5911
AC054509BA0102D462A183A29DFC304DF74A289A052531CF1C505EB94CAF245C
33DEF613E4F1B785DEC94402A2C46B2DD4FAE5DD176985E45A03D85E442D7D77
A7586ECE67CC2360820AC46A8CA0DE0852F2F3F7ABC9D4FDE78321A4B63ED2B0
AE51F2F1CBFAEB6FE8142B4877BBE69FE6D4FEFAB7E5A8A4B22803992910064A
F998A0573C898D6EFC101CAE6E1FBEB97001A62893B76CDA3996BB92B7C2B8D8
F5C16CD2FBB4F8D9DDF27E66377E9BBA95CDFFFE02D05938F97D05AB348A74B9
1D39CA72320F8788593D99FE7CBBC69BE81D60CF58A584C366D2F5874A3CA93E
3D630E60D2D74E3CB14ABB6B38E8B409EF705FFD7B13420650A3E56C4B5AB090
6D15C8CD09CC2F8B32005F24D05B7E5EF52B8BA4F1C73CFB0A908D42CB6BB6E9
507EC5AF073CE78791C3DA714AA60198B87689F05EB1298F554671C81123C070
925E3F07DC46D862F6C874E548187A5EE7C6B713D5BF66A7CB3F258D2B99BC48
41EC9202C3D02C9A2CF71D52FB4D0EA9DF8BA01EB2D2192FBDE6EB1E0A7EC955
13D077AED82C96F3A8D32180720DA7474138F847B46D021414BCAD1629F0954C
CD7808E026A4B5D79809DA84748C1DD5A1EDB6AFA088E9C1122555CF98C46549
F30B5A62907162B395AFF56320A138B76191B06FEC97AE75953891B02DDF53DC
CBB20B24E56DBB752A5C0D7940CF7E3E521FD1777DA4A2638139FF78B960298D
1627E5DD2BE89CA00374E2708CC47EEB701A6D026C56A4B495AC3916730A33E3
F20BE70B1608FFD5E07D666781A583899A9E954CE4EDD9144793A659B499C192
207C1E52F523C2D6CF26F77B1BFB04A74E32536B7C6632BEFE3B123CA985B721
3FB2CDA7BBAD5C07718689DF3C569C8BCFC0F8BC5E075CD64CD6230EFBA46127
656070359652536BC1176EF4EFCCADBDDA29266D238C0E7C800DB0E22BF8000F
D3DAF9A8B70334512ED37A8812D914FEE39E343EB23944236E5288CDD4B8D323
578F80BA1F68DBB0644DB800ECDFEE43E42D956605142993345431B9FF2E3660
D108DA86E2117BCEDEC347C04D58988D00402DF8794B1D73940EF5CDA5F711EA
0BE543BAACDEE7682FAE1239CBB0BCC0D1B9351FC2667B316184CA25DB43961A
A1C22EBBF71D328B75CA05456A731F177F6F99EEB4BAAC06004DF835495ED5A4
9C49FCD5B1F03444A2D651AA5DB383E3747179FD54E0955DF11800F8D76645E6
A7C09AB7C7CD9922E8788E3B508D7F77C8C341A1FB529EE1252A1158C125100A
5B42A2E400A501580CAF3C9BC9C74EE0BC48854DF648EF2A0C6AFBC2499BEBE2
613232E4866B0F82F15A18E9324C7A1B5C7DC8375A1D2E8D121894EDA87B3A96
3922A29E00BE8334ABE712B0C3B23708AFBB897F101BB80A110DDF7E4E761488
03E20DD866B8AE8BF3ABA756B9D8DD0E3B5E495E3070FEDE72BBAFD87A45386F
9DC59839783DB864303DE8C85969BE5AC5245A0270CD53E72377D6B86CBA8331
76323D1EA2402B20E1C4E68C55F1C6CE31AEFE7C8215D7503417B29FD16BBC2E
221724547E764D44F5A021DE5973BDFD4B0EC4B5A6D5DB3CC8716D1EB0AECCFC
E96209BEAA676650FF0DBCD65A89DB5513B266D00F71935DED5AF2E670850928
D9E6A69CDA5E108DFE5DE022D24C8DA18BEC0A790ED8BD50E7E77F002F99E34C
64E6BF6959B6E245417A3CCD30C9B8053D310B4D8FAD6185729F7C3CCEE8A9DE
3EB39D72E9C776AC7EE344A718174809E3C057C10FDA8B73C48A1AE933CD7D3D
2C7AC2D5BDDB2548C637EDDDBB242E8DC921CFE8851CD927C5AB6220E7A9E2E1
F20A66019777719D6D13084BC8BED1ABE47EA36D0F5282F33311497AC69F71C6
3F014D07370671C52CEA8A5E53198522C434869A0C67906B55C46E56F8C53790
FC92D2D39862E3081AFB5C0BDE232A458F3E2A5F38E7A3A97D8A6EEF387C9FD4
AACCC343705FC9CC20609255F68F76666D9D4647002BAE0876BCD353CDA8353F
F24A48188ED97C54815465EB7CF6955084AA74B9E8459ABFA31A96A177DE5AA0
0C9854DB2D25E958FD56FCE76D0DEB67A47A2DFC20F2318C9F6FDDFE21C2CF81
2CED3B67F6B17546BACB6631A51EA218C8811C7A73FE4972A46F1CD9A89D9F64
ABA4B585A674CA2D5F3B0CB9D33D6AD3777D15E08308220151CC188E305B068C
11A8020D1A155FCB44FD22631BF2BB54874F6206780CCDF810419D871BD38ACC
4F2B176F782DABE3FF8C270633416DB2A3FACC4D1D421713135FD84718A13369
0E6269475B5E4B670FABF83F454E745574255A02CD28BA9E87AD4906113E333C
0DA452A3DA5FF5956B7894282521184959AD0C62899B0F39A7FE182D41791D9F
8C15AA8B375B3C445C6EFF1AA44EECFBDB8B9ACF11B6ADE903BDBD785DF0512B
2EF428A2923A91B2F776C70FEC7B1820C42A1078409AD56FE7191150FA4EE319
9E1639DDEDF5009220307515D4202AF42CD3D3F98DE8CE8101FD697B9B981BFA
7BA525060E8E38C85848538CA9076CA03EAF9BFEE22C49F950A31A6912A8E62A
9B0A1D331A6DF16E8549CD1D757DA72837CA8E90CA93CBF9681425ED59AF6F19
CD6A6C9C19310EFC5E3BAE2B3838F886A23C87281744E40FB9C24D5B9612453E
5EF16C7733BF56AE6BA3F4D290FB8867810AAF4715E339375D60A1D1B7AFCB9D
F8A89FEE180D6275CA7F8ADA5E5973BCEB77DD72295C24BCB97A2A8755111464
61500471693B912992BC817E704A0E944FE4BC73F5CB8455B5EAB7423DAA5559
8A17A44F07BAC8A71E8F20774FC77035771407F6C61B9AA815F71BA9CDA2CC27
83ADE9766D90D8106BD2C089C0568476073FA36EF1BF8B03B7DC0DC3D0E9E5FC
8771BCFD404F15D439B59D094DB2E9523460F114D0D9E5BC68069C7DACD273B5
0BC27AF8E3877B5A18FAEC29D3124B969B854899BDB45C50E17B063DED4682B9
7E5C7DA98CCE8D724D14B879155BAE75A53F5B8CAA9F3EF14B096CE3C5EA03DA
61993C0742C0C991B2700E8E8DAACE7BF3E6015D0FF55BC9FDD3B63B0FD6A904
69F981B3728A590966A1F5668CD8CE3441AE0CCC52493F0D102D2B7A8FD57969
D2C61BDBC19750AFCE844147A34C17F8B7C2226896D515C595A962D99275B831
B6B117F602C9A6294A8BD979D0E1891573EED27D45D8FC743A5714FB582DDFDB
54972E891F3C1909ACC3F57E504A97373509044C5410E81DE9D9628412B17244
31EBDF1622CA25C441D2FFD4DAEE43CFD08C950DB75F8E5B5F42C1C211203ED6
EB5A3357154A0894C7C6C045C42EBFBF182F0D752E77B8EF24E11ECBAF10682F
0EE1A0A11302921F69446F53C950E0AF08006A4FCB9FDD4CD675AA474C42A773
3E97EE2065A7C30E8D9622E3ECCD12E57F97CE085C84C5938C3601AA6E55705C
785648C8F77B93A92502BE80997C0EA83D3AD039FE0720013D660B96ED1E6B51
89A938DE6896D72B0CD6A1747611D2BF413CB128327442D69D1B7FB6EDC903C5
AB3DCD4A3D172B4A8AC5DE573D52D00995249943EACE8608267FEFCD4B77DB19
44DFC2FCA9D28A6742AF910205C9B626B44734A2A35C990AB0C485C8FBCC63BC
FDE667BBF8B8DAE62999615F358E7F80EE2D8EBA389C249A86EA1764EAD2D65F
03B4F41A6FA44E9CBDE36F886A6D4CB723B35069C84B8D3F3B087C8454EBDCBE
9D7FE91345F3775F357A5368A23599557D1C23EE03044801F3211770CEAEE917
D81274FB0BFF9DF2D25FA03BD6C6DCA0844F3E2B8530004005E9F6DAEFA530A8
35479D3FC7623589A18544A63F960D6555EF804A6913C95B13962C80893D13DD
009CC4A4D8E80FA3A1C5F9D1F152BD242CC5B03E2614541891B78E0EC88E75BB
E78CB32E0133765517039417CA212D044907A66E3BCFBC6E22A8BAB77662B561
34033D3D98BF16427BF143B17D02D492F4024DC4CABF70786A7C03996D966AE6
5BC10785AB7CE2E6C544050618A4AD496060FB97FFE5F9C9C7E31FB75C3E973F
69E893ABC4AD81F1EE52D7A1D7C6B353DA579D9C83E6D9510BB613232CC88117
AD594831A1CF9E71594CE475C30E761254F64DEDFB54EB910F0F68AE5AAB53E3
9DE6AF787592277924D503B3FC8CBB424529DDEAD48EE971DBEF0AD790D5241C
CE157AA6DBD6AF81A9BC101962355B043F99B66F7E21D717BD703717CEA2FBB3
EE7D8E614A4F65BF1A72907BCEB28F129535655C5E9E97172263A7E42C94772D
55B7356261B866841B773E27B9BA709234D73C597A8FF5B855B941930507393B
148DBBBE4D1D60A3CA285454D782F68BD580AAA99B9A321DD9E9E16AC846CF23
6B292A528DF0167174D65AF973D985C5165342FA3127D068FA5C3EDC07749B45
C040B9D7E59CB5DC60AEE82925CC2158FD5EF5AECA7F096426C90128BC64841B
C9B7B1B4FEBB791C6D143B82A1E7F25B59CB436D394ED59579120E119021D3E4
077CC0C49930DD44E6568EF1704E6CA60D1774E48FA86164A2DB1E2B045F0F50
11D46D01E050A7D133FB47A97302E11835F983079F564F6FC7E37A5DA2894CB4
40A7120878838D312A1772295CA75750165C4DA08A49FB435D439EAB8996645A
84FAABB61775170FB57B1D2BC1A0C4CD88B67AA4F2BA785515A78B79AFA1779E
D52C2002B5064CB0640FE67FE479A28FAAFB8B546F7C26AF23496D88825ADBF8
BA1C6C5ADA9C5AA9E163BF413466BC19C9F5E44E56DFAD604A3722EFD41FF3FF
F4639076AE5CEDA8522B8EF5BCB00635333E3B768D342FB18CAC2863E1EA2AED
942C0A586BF7EDB02C0858751DF4584EE9B2943C5B3D1151199B86640EEA8B49
F80BC01C5F054BC8BED1ABE47EA36D0F5282F33316BDD73B8E7A4C9D19997207
3CD015DED01B35A8E9B032209296003CE197AD689B3DC5744A79EC2A2506959E
98ACB5D041E2A879095B20EEED756798AFBCD54422115A75684D9410B3CAA4AE
C4B05A378904EEEBCC24FE873DD8467139DFFA34C959CBFB2869B759156B9E6B
1E412B8E702C1B405B496D0C6F1EDCB9EDCF8EBBE083F8A9CA4FE72E6AE73893
1306813253D0AE866D12256F20494D6E47759F5FD4F02248D47BF3BDCA06E998
0FEF7F1E0BC67F2016DF29B2F4350B0A05922DDAAF34C1C1A82D3A58ACE98DBD
EC4406B3DE0084A9E8CE74049FB76B20749017E7804EE17DA33BDED9BBF86A45
7CA8463D47449AB7FADAFFDB6F359736A68FB4786A3504F109F09AE6E3A9FFFE
714BC12E515C57EC52EEB4C6FB4641CFAD1888AF2146B5EF9AFC2BE48AFC2E1F
4680494F02A74AF98B8230F1E78D0A4CC4489CFCC81026173EFFA5894A2A2BC1
8F4F56CDE3255CA1292DE225B7D69765823B05EE8604E044677F5A2E70E7BEB8
1CBCF81E2BAA51CE0B606886629B53D5C79BAC678AC5C650C13A327C0F3DDF10
18FE91AFD0B446441E0D4C268C299025428EE579B50FE708C34EBD9DFDC33FB0
9145CF2956D98239588E6778F8D57D90EB766C0FD124FD68CF79F069B7326465
25FD39B232929B577C97D32873563D5F834D21320CB9A2AB6493640E24CC357D
6CF26AFE3B8D773D93A2602C62C70B61444F884813953F351C8451997F0083D2
DE423A5D78C58DB569B44E4D9F3F26C231610AB979401F73E3C0C22A4F74BBAA
8D379093C76A76D75A38C44652325C27444C5C2EE1F17903E9CE89A883887194
534A5A46AD115569D2CC7296EE2FCCC3967CF4DB84FB19A69D0B110FDFA25680
F22D31A6F60DD3CBADB13E7883CDBA13231129E7500A0100F19785C6C43FB7DD
383DBCC4EEBD1AE147CC5A97540293D180F023E15726656717557AD547C61B76
450EC7DA18B2D65DA816B0D510008BBE028CF181A9E599F6BB346B111AAD8EDC
D52088410B5D21C4CECA5D79A249AA3ECD373DCDE4E66EA83949113A359F69CD
6B3D322BB90A149DF5D44B5087CFC3379E3A62E5B7BB128280C049B07B070323
33B21D6747C5669E9DEE7EA799D03E1E056247E9270ADB4956ADE830F9CEC9E4
7617273A10BFE14BE9FC53908F149AA7AB432579CCA7F1B7AF96AAF53CE42E16
DB66BE6275511E0CE1D0A0B8159DF6F060A4DDCB10080AEC722B8F5FEAA5E06F
8E9B023976B95DE6213B7C6077B2CDCD69E17EA619C3281F49B7FDA52B8DDC97
697AC3FEC999B4B8304CF70233F8E5CE260BA610C85984F5C1CB17A5118DA191
01D1876F1DA8B9FA761422D7F58CB8DEEF6F2D2FBD4E421297D36AB8A7DF9D0C
C1EA7A3714968F2D3E002F30135A03DB7E501E4EC2A667C270C67E21DB0F7150
8FFB23C2AD6FCFCFA517EA2438E51FE64D6C217A1985E2D8DA36460501427136
4B94AA8168A3E76200C15CD68396B4581E1C94B86AA2A9E4871BAF58061E02D3
D4F36FE8DA32A468F3EE577A2BFFE83E15A84E7DE98083865C38D840A16D9808
67837CF7FBA915E6AADD5025E5DBF15404468FF6A49FC7F021B183025F00B595
3133A589C0DD6CAF69E83B23F6D1EA517BA31D54AAB23F63ABC10400F15833C9
20B217422F43524E56F03D80BBDEEE31883DBA8B465207ACEA1E0C7EE3A2F3F1
716F05FCA1CD2CE148077DA81D0354D113A2C5E6831D58E04673F0EF8B8CFE7B
EB994EF5BBC6F11E9AC04682962BD6FBF24577849E9CAA7D24F59CCF307F6C40
8F3A7282AED7EB093765C2FF1894F736AB3CA51265918F72E32E01D40022B4AB
9EE6EF0063D45950A8318C563F6F1AEA9D80FDA51AE4AFEF3ED1632ED8BFA0AE
8260E101081FBB9D7A52996D579636A1B9655A286516D5EA45BBD4A48CE64C43
5497EFE30F0C51C5CD25C5C2CBB545FF4A2D6E71457B516CF74DEB2D075025A1
5496E42772AE35DD836A27847793C804BA8F97E9582090794B99F1628A252BB2
937A280CB489A8D4C9ED06EAFDC7624E74F0470AD7B094035B9A8E414370A5CF
F7D9123A70DBDC1A514D455BDD3E216F728D89D06EA5960EEAFFA4BD72325D51
23A91D30C8DE870B14C732C9336099EDDAF556BD6B97DB43DACF1B88468AB534
FA36F070EF946A608766C4424D9603931FD9A7996B6C0DB5F2632126C001C236
702909918C89EE934DCBEDB8BBE36315E4147A1FA2C60ABF2A1AC4C2E4DB6571
9A0363DE59AAED1196A05CA685947A2F28A8B9BFB826B7D5B311D0A49592F9EA
787C014FF71A77BC5B82698E4D1BFDAC343C31DEFA8479890D6AB614FCA9FF17
924B6F0B44397BE13DAD407F880B6B1C2BA857DC545E00F6C3710C7464FCC72C
C846CCA3FD911D0F5E45AD26ADDA935A73E18504C4B300F40439C815FE9A0D6A
B575A0172DB724600C77D423E38B7D280A9CF8D5BFA77AC3B48D4153EDED94E0
B4221B343D6D392053084F17E7726B82A6575172AC6759B875A2AAE5033E8E13
EC78CCC37831BAE3F132F8AE3AC5BA28C726211915F9448C44D89F32A2ECD24E
1C90D40A867AD80C92BF85B3CD763CA07E7DB9DDECCAC684FD09F3579A8C1E5A
BDDF98C6E333DD05B0A2AC1596FB208C3A9D5222003A87B6A6EFFBA4DF336E25
21A0556756E2524F347BC1D76D13A4ECA2771CB4D5A4880D6B9A697C461ABB55
6C0ACD8EA0F86235AD9398D2286A7340AC83605B885E84EBB34D419A10FDD76F
8827FBFCDF4F024522DE573C98B0598354CE9DBFE1AE36DDBFCBAB86410A9250
A182D3C07231A6AAD9ACB4187308CBD2387B2EE0DD970AC391E7164BD8745298
3EB4AF15CE203DC6C75B216C4084F9E66D917CE2CC46CE18C3988C8D427F35C1
C36A8D730D7AA4D59758523EFC22B95132D7D3ACFB7CF88B597F604B5C36465A
A2947CBC87138DA0B300AA3A998A0A9B845B236651AD4B31D4BED58C17846DE0
25C1ECA778EA80C9FEE684E5FC47B8C070763B7C9F061DA8132A66FD0E8177B9
BDFCDC6D7ECF9576B42AABD5CFD3E2FB855CAF102124E2B7171A88318FB6B39B
F2040284C54C48F7F3BDD4A848B99AA372FAD830DE533D42683EF0456C3A0D74
E8EFF35D7DB2D065E1AA14A34516BFD002FE02904D82B436E5BC6F706E0A5786
8F3AEA2DDF4471798CB2BEFEA90D79785E058B61290D596559917FB066DA3B80
DFDC1D4A49FD15D7B59150B130B906E648AE0381C52A1E6D7F3FECD591300CBA
D5A21C3FE284FB598FE53D03025892B6DC81966BEBA206263D11F3C1C69EA9B1
08257AEAC4F506E0274D0AB16E1EE3D6DAD9A06569FD4EEE40C516ACD809E760
867977BA7ABB371B30CC350A005E4C58B5FF90F4C78CF92E1AC245F6E924D719
F0D42D3059DBA18A004CA5905715353EBF1A1A9EC3BF9850B1F5DF3173CE039A
9B9DF41F4F5B3640FEE2BE932510FE68DE87995A618DDEC1FA2F733B3F2CD4F4
C77C6C64C26D4C23BC242D463CBA8C2A0EE0197FC50698DD8477920F91850945
2B0FFB5095F9088A8DC821AFAD335BEFBC695F2746A01CF467643FCDE38253B7
E0D3E8863B2161664E80C133653C769B773E687147530F269AC5F555FC819683
7AD7B53179A5B0BB86729916A8A6F0E9C8F90A93AAA8A2C57AEDCC27A3E5A245
B091707F4B4C12F6FF094944ACD605E6F19709D2A7FD03E02542CD6C109F1F1A
8E9E4B5BA2446229B15084600D195236BC1560661AA96AD20D39E7D640105F38
1AF27A3F8259CF20B1959F884245656DE4B6A54E3E5A33C8C4BD07E26EF964BA
42AF2EA6F256197AD8EE1F44A32C81C2F455F1EC8533D46B6DBF3263E488A233
96BF06D6758BA195FDF57A2CB8BC7C173E04AA86125527688023B4B5B33BE92A
0310DD612A2B3E05D5BB84F8021AD2F25A5876F649E4B48C13A8FAE3B321EF1D
414161D2D3F448400674EAE66705575B5AF01496892EB69F783F43DC60A7EF3B
7636F9DFBB6E09768DA2FE6850B732914D25ECBE37E0E37118C5C4C156A5A8D4
A3B0344600559C88E400E64CBF535F8A9FC196979C946F900ED54B21A9B303CB
BBD7FF7DD92DE311A9C1D285F15893E8346BE0AC571C21236336E3BE132254CD
A089996A44B5A20D4BE80F3E6E2CA99743C530342CDF7EEBCDF11BFE38A7AF80
ED7761878410A0FFD1FF8879D537D25FB79D71BBA3F4F48079FC8AA22BB75B05
774BD821C3C9D905FF68678C2BC016B1C259922E2BB4E4907808C003218EC0FD
5DDBA32693D4ACCD03982615563EDE73605E33B1B0E007AABB078DDDDA14F7D1
C88954279E5FBEFFD8BC8D5DD424FFE364428BDCD23FACA93D04571D38A44E32
E3745195F2CA95993C9FC3C8FE822A6AADEC5297A293C02937B24E90603D3663
6F5B2306CA1DCAC207A71454ED00315A3D2A0549DA1A31FDC7D428F670236F6E
98335E02EB4C8198B4F567B9199B762F31F21E6D1D548CA1024917618240C719
2AE35A9D55EA04C24255E66ECFE43C6434AF12D1ECD718BE4E606081A1065199
112680DFDF30F8EE55412B5FCB35CCF793B53CDCE581B6A2374CAA6DB9B0B901
CC804F0A10874FCD812D449CA5632EEF618E6B6CECE06862048668B0BCD20A59
239032023BFC05FA8308A8F56A6331825F1372C73C303A4AFE5BE076D56E4864
7905DC47D205BECA61AD34663704C33DE7810F15E51C397D3A6220A21D3A2723
D77016F982248B426A9B6058AB15F8F54713C48F34E6654EDB7384A8CEB6AD36
3612001817185E95A7C0FECAC2B864928B6B817E165D37A68E599BEE801DEB21
5AA717555FCC0156DF5A5044A4AA5E80312EE695210E5015DECBBD1CFAFC53CF
9BBD35E7FBBD5A32BA13F01AD5ABE4355D50A2D5AA8B5252CEEF8AE58083EA8E
D9DDD91195DC88F343C0D47AB26795572241CA4A3F4DD9B7332A5DF14A55D1C8
3A3822A21C63CE90EE04B3E46F6E109C819709EE7CAF72194C36192E5779DFEB
A746310936B0BFD28142BFD50CA5E2DB14A9C2E68F598382DBDFDB229F242848
E744755965EC306ABD8035302ACE9F88A1DAFF1C09565BCB853F9AF629DA7E63
8C3346BB7DA150836C74311CF48A174E63E97A47825AA81FF398A34A6EE9E6DA
9BC74BEDA6AF0524CC5CA30DB787E8F12507F7B8971FDC4E6E61DCA0A26438C1
234A5E123A0C427D588B3B4DEC825608601B3D068B1F4CFE595E725CE1343CD2
54E7B0F0F7F02996F048A31C4CABDC34534A6E029A414E2D38F1A3425B08D2EA
D3ED4C895A608E7FAAC01FC9598E9B30D958E5EB58E9ED97F2CB66518F978EC2
CD94A95DB4E7FE64D8CB2208172728FB08345E53B06EED2DD82B9D9F3AAFF216
1809A2D6892FACA4D1ABB9D7F23B4654B265ADBE5929123CB52E90524F6E1F40
59C474F61B9F5CB3943B9D00568942AB2D85E1224DC8CE640D0A429C5A168FB9
5F189F5EC661FF919BEB09C956D40B0F99B5DB8B72E965FC0D43B20B8B8DE404
1464B803E3EB1DE037627307B3C3BC8B251DCC59D705A0D83ED2226C5BCE11DC
A0359AEEB798E2E8BBB30B28683335AB8D2DAF410A24C23DF65B879230A547E5
3FDABD00E67B10180F026122DC3FF4F6F259B8E9F871FEC6431082E697A4B8E7
DF43462AB867281E5AE7AEF68D83CA84FF2A2FB18CDC6708D9817386472C80FB
3F19D51209F745D54EB054F8335F55C9A9E0E4577DA0EAD2428EBC3518950F8F
75976D0C6C3AFCCCF206B2B60A271B585DF3C3331907ACBFB8A1E67B975830B9
E88A453ECEEFD638326DC402C3D7E4016ECACDDC73FFB5680ECEE8115B18AB8B
FDBB49FD88D259C87BABAFAA5E72CFDAEDEA14B7F604A66F820DBC1D7C6F186B
84CF1DFDBBD7C58015B37472ED7E9B572AA9E06839D169AB3F174F9D68CC188F
215FD9442C290FABA45607983B2A476965445B33C16B928D964304E9705A3DE3
2D75A6F8C76929BF56986B596B99B94253BD694EBD2FC3104E28F1B90947B03D
FEE967A567DC7C4A16D1935B12FDCD656ABD621A93EEFA839FCC6406FFC92F53
3C82060040611396581F1A77DBFF89CF934BFB600F58C43EEBF6DE56E8E94673
3F25DFE1B6435230D8FD3DD7A12E6590B9E63BE444E65664EC52070597073759
A489B30F12A85C054544F72290D99B3420287AC145040CD32DA373A72D8F1326
783358C209128DA54A7E6371EADDEB86747C9A89292FE52CA2F60CE7A8EDD72F
37D55A4BA4FE875F31DBE1FC4705838E516B1B40215988F4FB6DF3306F4195D3
5DDF81018CFDE16ACFB9EAA482D1A8510092BD01240F732E1E051A8B3F494F89
8277C0AC298D9DB49E059CBBAC66DCB62E414E8637EFB43381D43711DE009A5A
66150FBC9E046E5C67C0B1A7812DBB3EAD64425E2101A2AAD9B6DCAD1CE78D28
2F9016DCA0602D46705A9C77B527B2D0ADD70E4A83479A1446D42290F62CFE0F
83B4001D7E70AFD470BCC4BBE8F5F6F027AE6EF8A1D771165892598B0748B26C
93814FC409DE36BDFB17727D2AF7CC179189AE483B74064D2F2DCD1DEDCD3C5C
8AA13FE4780EB87DD9A66422C5E472D5998FCA85D169559F0E85CFE236877F16
943C6E16A94A90AB75056859206FB59C264E9CDFB2C964687DD088795C8B791E
032CA6E0258504B3E62F05D21A6CF168633066030F183315AFF37CA5766916BD
B07F514119D363B0AD9E9C714723F6C0292CBDE0538984EDC709FD2051B7318C
9516C713ED106573674F36D31B8AC6F49088DAEED56150911D3475543C5D96A7
6FCB6F8A806E061403C4ACB7DC4A3868647B83EF5B459D8A3B24AA15B2D18D9E
37C681626A87E271F7CFCFB62238DB0926B0A8BF6FBC041D068F2BC46B30A03F
E5500D45EB7EF39F9017FA50A01D433803DEA5D26DB09E4A9D896A2384F822BF
828E24FAEBF7863B4BDA7B29B8F1D86F8EC12B68E62FB314143CC7D029EFE51C
BA201E12252824B0F0AA7B403A1993EC5BA6D5FADD67EB83E207D21C4C602213
9C6C4B24E6F1E4403D490B6A25315A21EA64192E8B8D07EAFF4665B4EC4566FA
5DD7161E1D6B6DB102E174F810CB73421E4309CEE324888E6493D4E81EC398C3
65818F3B43E35DFDF3E61DE6018CF2E5C49524482B0984EA7993E4D2276C5E09
3B735437323525054A3840B985CEF5E75440087569BC8CF6172098AA70261D2A
E3E72572DB7E63DEB85D31FA193F80C9734366C08DFFC212B970A75CB813B276
DBE6CBEA92B161270453190F4088886A9E6A9C1E1850DA989E96374AEFDFEF23
0B30842483BFD0298F37EEA57F01D7B319FEA21038EF29C178C0A82E1EF5332C
61623AA8F10B231144BDD184042CBB203B9400C9EF78400C90DC58F281C57470
4A8EC89294A7C8B556EAF74D9DF9554F288B1C652C79B0DB4EB2F6EBD9495E12
E8F0EBA2C58BA75767D7F6A7C31F441905F12292068127F5CE670FAE50DF5E2E
FA5105634C55827DF0A24A2552AD23625E9F0C7268CEF3416A09D50D43E4D2EB
D7151E2289759D88CA15549136572EDB5EEACBE60AC88518D2E33F83EA9A3136
B0164AB17269EF51EFC43325645EB95F5D15667D04A4E5575314522859280BEF
03C160F9508ABF3FBF5769918BA1888B7D5AEC532DC5B15B89EFC6E5F571A540
E2F2C76315BC3528BBF43BA55B66ADF5E40A6D7DD088795C8B791E032CA6E025
850563DDE979BCF7629C76464EA039A19FE0505EDCB7D2BDFBAAD699C74AC163
05389F160DFB09EA5444059BDD7460BA7D25DD0C4424AD2091698D554F4734A3
54911091A94F86657B9F5424B4D63E053DF21B6DCFE6A1DA5679E3AF3C5046DD
FD43C1D0E4C1A6FC4BD96170F0361D60BBB3C101F4B4644644E5E480B348598A
3744487109A330FC50AD9501BCB2C94093D449C83C1576B49CE7F6C216369632
5F12D8F358FE7477386B661F8C48D1D6ED7EF1A857DBAFC018C7D0DF61B9A880
248F5F7C4DDA71038ADF3C605E1228CA2B1FEFDE6DF012974241B33B67AA63A0
34C45FAC7CE18B2760904A036D73CCD357F43C14DA2B71C1D3B1E0F6C9E10E5C
1766CB931641DE390FE8B21B332AA4BA88CB75E4F3DAF1920796F6674EACEC03
9D378700A48387CB99932F2182AA3F9CBC2CE3E62512683DE40ABDA63FFB517E
6A23F0C58710588382DBDFDB229F242848E7447559630AA0EFF247E85DB14465
0433CDCF088038F9F3A913E41DCE0D27389846DC924912DD4B6D4137F913B06D
74C5D967938D322531C5EFCFE3E081078AA132B0E1ACBF20AE2B784A61F2C42F
C7E7A9A798C19754DFBE059600136729351500CF6B9A99867EB1007CFF6C643E
3745472909A5ACA57765B68623EF8A388D8647881418B2092EAF5F5E73E45157
9B5E88A710E9756248B17D898289FE555908CBCC145975B2DA56F41806B7C3D1
000D15B9AC75D391CC683881910C957101E571F3591E0382602A841CF2E76DCB
7725A711CFDDB01997CD5DF4AF124740AE85360B66C5AC00B8FBBAD88FD7D5BB
82CF7D3495FEA8869044947CE709E5F572701A3C86544E001C01ADB378235140
A1BC75978A0FCB264F6024698D82747D904C44810607B805AC3CF74E32FB4D53
A6D7C3532394EE44904F9F0204E2B7F80CDC9C4101F8F792BB8F1482FF58B020
6A1C4D77D20B453A55F4C243059CF06C57C6C32FD548BB019A3BB6F2B72F0E90
58E02496DA1D10EC8BB118B29C114E084F0C510EA6999CA755B7FCA329C8A9DA
FEA8899B129A3487076453CA35F2A134C052C9EEC7CE19270F71F6DBB1F0EE5B
E6E225C55598BF343A1ADD11CE643F622123907B4E9050E513A9FAFE2DA7A5D0
98C4D9F57045BCEC024AFFEC5047020461DF0CAD71D6DE83DC7BD1F33F122EAE
0D5F49E502F7D48121F5EDA252F0C02D7DC604BB58DE06689CDA39AA6B6DECEF
D6F4FB0D0E1F1738CFAF41795A2D0D7D90DB30F2C1A3A0EB26BEC9C17EABED36
99AC741302F23FF74CB7E3DB82EAE1DCEDD19C2E157AA053A7D3273BDB955444
EE05F56103AEC8A1AD1B88DA50E102654343FBF47F4EE17B5BA627BE7E52292B
FAAA9E1F214C7791541C593E1DD510598B8F6FF1BF957CCA8ABAE24D14A1C9ED
115A53D839E41B1909E392D3C711133394CECF74BD96A2FBFD7BF27D98E894EE
751F84118BCE62A09EE1BA165D3BBB3EB0E2DA8D8271C8F80DEC118DBD15269B
50D3BE2475906FFBBB859F8858BA3B73337E0D1FF6E3B2E5004AA42D29FA085B
1A5CB07C5837560F5A1ADAB1D0DA4F1EB898AD834EC65107E430DE2E62EC0419
7EADEC32844428757A3E5FD42AFA2AD7D878A280397FC9880A99C822950233FB
C993A5835858AC74D2ACB8D81BC7EEB57632FCF6EE49622BDA78F2283BD6D577
5CC0345BF564FFD4BAF62AA7C2C3F420D0FB633BE30B8D92B036EFB742986F45
611BB4FE6C3CA3ABDBB1991E4D9DE9ED5767C311C215D4F85E8CBE85DB16F469
1EDD31135B78B0332448CF2C1C4B7BA761D1C476AEB59A40F93DDC4FB26BAB69
898D7E360511788C27311CB91B69CD4A10C37D5EABF66B268EF9D4B89D7EE989
E31AE92ECB5631ACEA320C6ACD26DD6475231521FB620C2C1C3927298369C8C8
E6BA568DCB81B36BFB0B0C54CC6DAE4AD9830DB4DC4E62E44BE4AB58EDF9E333
C044A87D0F9298FCB9C42470787CB3C594A3B451E6C0F87B4D9CFE3440E62773
FC50649FE00857F72E5C852E8A76A43C45836C7B8BE9702C840BD75C31909190
4B5D49DD2BB541D686147B390A099993B56ADFEB043A853ACA9B28384BF244A8
071987DF9A3DBF578B750833AB6654D76965628ABD5DFF9337B7A6EF3671320A
7F252FCB0B8A7FF326D6C39EF875CBE549DE048D1CEE83715C856FC6A6B60037
6FB1073280AAC7F6E9116A65563C720B8177BA68FB0D443F4658FF6170CB6EAE
79A6CF07310AA50B8CC50468885BE9D168FA0ECBD5EE19CE509DFF504A70139F
39E3D278F5E57DC8F688D5427AF63773430B8771F19B895BC408609CDCD83064
BC15EDEAF4BDFDCD2ECB3FC35EB09DB96E3EA61974B69764821E40D1608B6C71
8D7BED583B1F8FC12C4F3B4CB98AB4D27516339C45BB9F516A847395A3D68625
757959F3050D9A111C6FCD1F657F898F5DC95E0D106BD0A1F0E113EA7408DE17
270A33366C22465F9A65E4C9E9432B3DB333A2E15697317C7F381777E4EBC7FE
7488B910D9D73F4F4A64F68FF73A2FAE97C8A3427F922FE100BE24568875AD11
9C33FCE5BF7223B1EA75B3678FA870C7A34102DC43A42A07EC974CB409866B50
BA287866E237994896AC8F7A6B4DC594CDE8A8696C5AC192C7D77EE627EC67CD
39364B2C1303C0A8AC1677BF07A434B010F66B57928F3AFF39B371FF75E5CE25
B4B457ABE252DF4C9BC1D9580E7099B04AD778AAE62846C0FF19688AAE018887
B439343FF12EB39353D7191ED687D05B746B5AA9F05DFCD6A00C324C6C762EBF
F18F6A4DCAEBA1F1DCB1F6682D0A2491CFB68A59FBBA2855AA62E260D893C887
BE20D3BB3177037AF0B0020ACB81E231E7BEF6319B79D37331AE3BEC8BA231DE
2D065F1AFFFE3919CB75C2FDB7E810D7C7DD6EE2CFA5126DDD4B1396592C1CC3
7BAD138D32336C253B02CA0342CAE6913BF7B3620B1E7C7B30FBEC1FEA5FD19A
0C29A2AA4A730669F0C9E9243497144D31ECF634CABABB7C7022A82E758050D9
82EB7AA4DCCE229793A95630E2D545F970BC5427A3F6A345EEB0A3D0F453DD4F
5BD04D871A7CAEA1CC29DCD041B5A179CBBC900DEB535A10B6E3F942D51DB248
052A9227D80F675F96F94EB6D89D8C29DB3439B125CDAFBDA90E38E15529C7D8
220D9FE89FFD5E8D3031F622A6C376D47491363F1F2013A3C82366A40C5371D9
532E2A47BBFFF2EA25D4679DCFC50A59E427E91524C077D748C31A42DFE02C01
50A4CAAA56D5CE4B680C58252D1FF6D197C9BB1EBD6D32B177EAC39E3881138A
D5B484A51065AFDA475B518230A0CF54F0BA788AC62EB3C28F3DBEB8A0FA1BC4
38D77DDBFB3707DC55D5CE9EDBB49C20EA64AE533D0F97F84C71557DA3E0DD04
D29C5BA37BF4193950DBA792F4D5E0EC04C1A98D30F85D2BDA1FD1211554AEE5
05A65A240FFA7C50C69A3DCEA7CDB31D2FDC86A528623D54F22D03975753E4BA
F41B81D5FE75EDCBB53CD4F3B76140DBF79E2D6EB4269195B89FEE748E9B9A6A
2887D547AA113A772388B120C0FCBD73AA868F2D0A9F9FB9D6B04E19EBFABC5F
DA904CC6334875A3707847B339AF37606AD96F7C7F9187B69F15DDE7B3A9E189
9E3032FCD0A2331D1E9B24DF6AB9ED7C852047F5DBCFB4D104F244DFE7D9533A
766C2480F76F7415CB70E2B9962D46E27E3EB2B879527B3A4585BC630DDFFE0F
64E67056319D9C96317D435F733D362AD9789127D2DAE0BE850CEBBE8163C961
45150065FDEA09984ADD583F7E287815E6206F29BFA9DF24DE4F1F959FCEBBC8
A06C85EA568EC57FBA0A367A1BFC68C27E0637B85DA3C9310C952C6C9D785164
FA4620B7252C749EAF8863CB038E3F3A242FB779C66BF9953B6EC5E897352E18
2C75F5CF47CDB8FEAA8215C8ACAD0E4EAB8338FDD49D84592E679F729DE605D9
F906C7334F8CCD3A80BA07E9AE56A9E64F4DAF402ECCC26A80223DAE6F2B4E66
ED71946A495413E20B4CCF58F0043AD5D74A3A471D9D1EC5806367CBE26E49BE
5FE111880F2F356DCA3E1A1D88D99EA8B47F035C5EAF724AA6019838D990D213
9CB6629F6672946640C4CCFBAA342A28C7CBB47B4CDB4947CB799B8F76AED910
42B5A5528B565C24813632B8560C57F6C524A72A2E58CBDF357E069E8080C292
CE8F1F0982334E7ED3C2CE209C3C3CA3B078ADB2F5168DB2F1686EB12C5D44A4
A87F68BB02B1D90BC4DE06EC0518362AEFD03F8A8A2F687C9C0E2353676AC288
4CD6DBEC1FB7AE7B507C0A263445EEC5A4833F218E84FD7CB5968A384F97736B
2315FA4BAC8A9ACEF50FAE0EB69ECEDA1371D518F5A880B8994BE3BD2F430071
74CC6312DD01F854ACE6313F30CE2B5B522482126B82CB98FB5B5B4F9FB61730
F9C6C28881870532BDBD9FE993C90728B128E6F7385A7E753337CFCBC4164183
2D1FDD33C0CB5E99B814C0C8CCA81CF3203E8B439B3CA15652474F572910CA7C
F66198F1F7EB5B8A21F4EBDAF26A65AE70096248080C83C923537DA267576CAB
9E0E630978C45AA4DFB89E41EAD591C03DE559CDB7A45A98BE1CCF0D46F86DEB
29877C718D28AA6D2F73185BA17191E2B5EE03D751F0A495337FE0B181E745CA
E05263C7F687AA538D0390724A7AC8630C15A07488F62A03176C992ACEF74D35
DF582B40F2E8516290DD4760D96AE10B88E204AFFDF14FDDA193C6E5216DA7EA
51489DD1A72C95AB97BB407E0ACC56EEDD1A78B9176B981848E7A9DC280B3C3B
59CF6A01D38E141CEC8B8262F1E20975179806B202E4A68D9C414D945360D56B
2BD627E1BF9E2FE040F07021D7F914209AE1298E8EBBDDEB53A30D86B623ACF8
15D57DCE28740982F12D56DB0554A9B3CF6D6F61353450D11FE75618FD0550B0
57DE0C572DF5C3DC86485DF69A347FED5345530C20E87B8CAD29B296B7CB8DD3
EFAF62E431D578E2C782D59EF3AA782D160F9BFCE4B2483338002C54E6F14B27
6CCDD7E1E30FA4BFECD67B1EBE6A3276478B73F19426BC53D97B45A01B12EF7E
FEE399E838013770FC075319F9A383244050249506ADDACCF1CEEE6356AAF58B
DF7D3EDD17C69195D52981FA047206597FF34A48F815BB15250EE5F9B0FC42D4
5F1EEC24E5B6E1005AB6F2363367FCDC2A89A3E4D54BBD60D94F41C22B5453AE
8A33A4B2C822BA7A8058A159650D57937509D49B52E3B7A47070664DE16EF92B
0A9205A98675D0DB29A91B4033B85057FADE22483C671A58FC9C6AE89500FB15
491E2407EF784F362C74BEF868651E4459E3A12252571F7E0A2A0818E658775E
3023C23EFAC7D47D771BE9EB5EF8B280D751708592EDA8C34CAC21384C28631A
43B722839B5D76C73AB1D436D8988E841AEFC38BF5E3299C87A0A9378F26AF56
24245BF8EFD409420B4918DB1FC50D99FEB9298CBDC3E5BED447B2B394927A69
D2B31355A3269B98A1373B91800FA7285C1A42479754F7AF1CFC91F03AB2CBF4
47F4EE97C90C05A635A0039DEF9FD15A219A0B00EF0A7082AE4B7898B953E962
A4F8C52F6957C31A2E90EDFFBEE8A6DECE945F4B8A94F8A551D0AF1F4AF71A1E
878A8E7E43EA125B11AC842426054F8A3F6FFC91103337E32221BAB5BE4D0A06
3D6DEE07604C2E62460699E13A88BD545A96B78F6C39C84324D3B14BEF489478
642E3F3B8CE802C6FA3131E113A88E59A4E9F1B5E29E59311D70B0BA38AFF2C9
E3316B521F456E9F9E15E7E076D2BC989667BE5253ADC946CAF3590EA0277CB4
30EAB183C398377A8B3D781B5CCC47AE93DE1AA6ED9979E675BADC844D9456A1
F59CB6D264578A27324A51D9FD56AC92F0A46BA0B3B19AF6A20E796E70A3A40D
07C10128868272F8D6706CCC054630C640F677428F1B7B55205AB0DFC8CAA1B3
BE62081CBAB8102DA38315C299D106B290E7C13ACCCC8D13F113474D367AA58D
B75082FB9F6D9525AF815B7105705F38761BF239B94CAF60F968669F4D0EB43E
EFC0E80B9AC0A0D00897B277A53F94E0EC66A6AC217E029221953D0A0426C535
7F7F712BEFA5CDAE3BD558D7026DB6D1E2CF5F084CE50D1AD394419C1F47688C
D7EC67E5DEF9C22FFABE7E6DE82A88D2615153CF20B4346A3CA6A77D30EF90FC
9E1AF1BD4DE168A4F3766CF34F08863C427A5A6FDBD8A4B929B75DC70012AA55
8846E93E7F308686911F73075F6DDCE6B635E161DE4C42DDC0CE79D267CBB37F
73A68F6299B5F77AA371C41651CCBBC9CC27C650B07C5DA12D3C9B077D5D5683
528264B11D6124A3B4DF023F3FD252BE4033DB3123DA06432159585357F02E4F
9D014C9AC307606D8DEC5A95A03C28075BC1FDB07DD31F6A154B5490DE88B2D0
47B3766F052FFA109BDE4F8524291F3C1FE6E3D1F6B82646A84B1EB8BAD70876
6A81126CE714CE260A5DB870C2E63B9C2CAC0E7C8A77E25389113E7B1D6467EE
B6AEFED305CCDA1C509E6FF0655E808CD603C9FDE12A787D6CF9F19E9FE841F0
256A9434621D897029E64779F5D4FB11CF19C87D1E3258B8559274352EDE610D
488CBF10A390FEEE5BE6E225C55598BF343A1ADD11CC83E13D7D3E1F216F33D0
2958474AA95A69F36A526E4CE41AFD06D1B904F4CA460E199A8E60F5CA6C63D7
ACF3495D20AF3D45246F51BDCE819DF1DA3844E979EDF743F2C1A254C010A15D
145AFA1F08485D0C3F5AEEBA377262F059BA21048397B366C70580385194F31A
E5391D55D19738BA077E17027A37CC928ABE3D1A7B4FFA76A2215FF11D927F7A
D75B49ABCB742600E82B783854934CBAA63548B74D2C0AAF826CCB52D89DAED4
5322D01528B9DA7835A68A86A0767E83B53B66F7AA572043C77A01EA4CE438F8
15F9F4D3B955DD85CA6180A183F64A4F88A6A86BAFFDAA93EB497E14BF28B79C
459D0753FB1FB836DE21042C994387DD9714E1FC6DB32ECDCD555FCFFFBB1D6F
47EF24A664D47AB22D7C2249123F5B2D7147BF392487EFE5DCFC11D53ACA1AFC
A355D2F8640E43053FDB30C8344A29F7A761B0465B815DE3AA116F149A3EB884
1E2D7F7B8F148AA5209654C770366F40AE03C84E6853F563C4DB62F4D8451429
54900AD9429A5AE79DBB715BD1CCF1394C86EF1D4160D4F59A82C37EF1F48B7D
3A7322516ACEE7C858C67FB5ED21D4BD7107CFC3F52FE1AF56768EC0AB4388C9
7DD744CFC84027388C1E3201687827BB6D7FBBAEA493F1322257C1396E7E6ECD
50AAE6C8DF4A4A97490D33AECA546DB2C67A329E3CA9F69D9BA5354CE0BC1ADE
981B5D7719CC2853BAC7D6CFDFA97A1CE2525BFC0A8C3BE16FB7F2C022CBEF79
0396E4314A25E5080B4AAF89E90AD9AFFA2C07A3310A1FB7B7A5A0ED026FDD89
B2A047C1C7DD6B5AD99C4D3CA9F6BF6E832A7FF11373CF5695735D6F7E63ADBB
5EDE06AC4824424C38E62F3E0FC005A5AA81BEA0BFAA02BC3290025D855A84BC
FC3323ABE0BD53BDC1E5BFC3FAB1B619C88A76B0623097A7827428965755CA2A
2248F6FD5453BC7E21B4CDB5DA911D6956260526117025B0061693CB4F292E97
A68E6056022C9F3FB5C5CF02264978B0260FFBC3CD61A4279A19B1D5BC3F9BA8
E58CE587B504AB054F1FD01CE7AF6B87B18C274A3BF9944DB0DF96AB12AD6F18
B718C709BCFC02B32D6A6ADCBED037D484DC194624325C20D8D67CAFDACE61BC
634DBCE529A9C8B6B10426A277F28AE02D53068C208BF9B5F46F2739676841E5
98C85B34B62792D715F97D65EE8802672107F9B4A35F84252ECB32E46B70C93F
F24EDE29225A12DB80697EADAB4CA38F1928B9DB2213E45D4F83A178EF20A2EE
50FD273484A601F0698A92EA5FBE886F56B2B20748B06A06249407A42480206A
5C121377AEB4A3A841D2201AD60128128AF7CB2816945AF16AB09E83C89C0B27
F61596A03DC30F0453B7D1FAF60F7A8EFE4C6BD0B1EF775A4429DF4B5D591C1A
3F4991B11A398AFFADFBEBAB787B82E8FE5D8FC06B2C5C8BD6C62006E09493C9
1C472AE8D3035DC6482BE160A7B4EABB77188D605EC67DC22265503EF8F1DD11
47811CF6A6216AC44910CA0C003F866532AED09A8F8277F1F3D7A3344CAF0ED4
E896204EAC1F2D6BFB70030FD12E70510BE59C975557DEE3657A3EF507F2A60F
F02E27857394BF52B816A6C2F5005A23D9610024EA042E5EB5E000FB30EF1F62
94943C6D8883BE065026597450D76D0E6664CE360D2C646DEA23DB19F1DEC6D0
022BBA91BE01B8B8E7AACE154EB8AA3BEDEC4CB136E4F61B2A3DC24A7CE91272
EB34520690D94A120305561378EE804C57901A51A2CCE4936FCF40C50D1DE3C9
3F37725DEDA3C52173E838B76242B3F19960028A6C1BFD5F28BA75244EF5D606
53807FC4A707DA78BD07DDC50CA3816C625CA4DE70A171C33E722A63167D2456
83D6F038A340909FB2A3860D143CC93CFD5E3AC4255BC9DF9DA84871373A10B0
6827DDB3D0B422210FAE15328E86B34B5C57093AEB75C5BE7926C0612FB60BCB
1F0A9F52BA4274DC5CB4FBC4FD7050BEB83329C16F70009F104048C65DBDD768
4E734F640E9448115A186B0688341587CF7A88B510E6ACB26024D15BBC63058A
B71980D1948258BC63245A21B13BFED2CDB59076D47BCF55FAA5FEFCFF81D87F
347CBB1CA7BEBE95184414E6D5FE5E156099991D5E967A73EFB6B9A22A37AB29
84ACEEADD453ADF80133AC39D9CE36DE8DD51E41BDB950599385F8B554F592BE
8B94AB805D1076B05E44F4090294DA71D3F6346B54390C2DB491010194F43E1B
E51AB8DA0C2E87033C4D84B7BA5F64E06F88CD1B4AD6355D1B728496AC32A68B
3257AA8FE80304FA4955BC0D38110DF587C949E7CF46CC9B69C36DA906CD05C7
64C0BE29DF082C1B512FE2122069AC3FB84CB54A3009631F5202BB30C30ED22A
B0363D8506F40B0FB9CB5B4A4D9CCD6FDBC0AA5FF449FFC1CF0AB32B6E5788D2
B466429C3A57C3212AD12CEB1D6E9CB9E79495C617B5A4A5AE9DEFEA88D52E2C
FA9897090881FE9D27BBF834877FB0BCDED4802617CADD9E1D83922CE800A16B
D1A2B3DE537D5CAF940A54C682CE785FD600A9997F5AE1A2EE209859B1205E83
A67F2AD50919E33E91D2AD151EDA9AE79442ED1F5B76019058E53872DA6995DF
E8144109B975B22FF360A4A6F5B459222B1E15F68C3A2AAAA0E2932F24E081D8
E9EF880889B25B509F2BBB5B11BEB75F4E8427D65F1829E0074BA87984FF42B4
793A7FD129C4D0E1145702D53D8A959B8D1D73C51BFA2B6499BFA6FFCFC809
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 61 /equal put
dup 91 /bracketleft put
dup 93 /bracketright put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E702C6D29A39C16F7C66E0B2E15DCD2FC36A606C0EC22D1790CFDE6DA7CD418D
D85039E733793041E83EF250DD499477E7AB494E1AA44CC705A5FD535F05B261
2654089FB093C25C18720E3E3C72B00FE7E88EB45B3939415E3709B1E7508787
8B5E21214B74B124B5FE36BC5D810EBE149520CC13156B025DF2E518AA39C1C7
EE84AB0158FB4208CCAA455C3CF06981708E619B5116A10310B9B180DC2074E4
4FFAE3CA1C359295C7D2967195AFD2D94BADCE1E930304DAE34AD74C4F6EE4D8
8F814913C32C56CEEA4630B71E25E517C60BC448891030BAE0D3B1DF3067DEA7
F016221CB34AA4EB20552294F3AEAF6C9C22A817DE43146AE4E04FA79AA91C81
4B18ABD2C5597A11EC057BAEA084D203E197CD50146460DE396AC95850D198A6
6AD2991F011A878BC86753A989AA0B5800E4BE6B9E623761D24C0B7CB02DD90D
C8A2CBBEBFA8F587E6BBC957E31B764127ECC5CD4D1718F1294B62960C845C5A
2B81ECB5A523CB2915A925B1655FC301C72BE097018749375D92AA335837AE28
6EC255135C878B06D9774D944B8F077BFD9BDC2EB03C158F0B4D165480511171
EF9A30D87414ABA2676B03B3060A57AFC433A6E5D42CAB2CD2AB08BA4AE24FEF
2B67CD6C3EBB1C0E4AA0EA12349BEC2C0217289E81B36EEC9DE76321F3DF1B8D
279AD66877E0B05E0220FB8FDE96E8F11832AC295BB1D4ECD9FE817B07AA754B
523AB4F643BFDF588DF93B6925100D074E11C6D288042023656B73B1A1EC29E2
AC3B8B7A0430AEF9BF9DFCBAD0ACFF0F2E068EA70ED2D5CCB9AF9913BBC020A4
106A166B1B624A52ADE7D5B869078828BDF7EF38AF941D66D70C0675919F26D6
96F2A5A3DB8176F9C326B13607C4D2AD083467DFCE3EF958899D7EF260262689
66CD70F84D4CBC3149C444D2BFC6FFFC568810EE75CC001A8D44DF11AC914012
F66C731225B9420BF545DCF033EADDB8887D3DB2F8F5FC91792B97B32ADF930A
9FF05FE9FD570C5289218D585E471C9C3EC14CC670EE8D563CC659E4FEEDA0BD
B6997BCC7ADB0EBA902B2DE3CC959848E590C2EF04663CF953FBDFF9AB4F899A
017252FF9FCD56D1D594EB3808A7B14898276C07D73A209D539A899B48A1D1CB
242260694BC641C156B1C24A28E6C7C8AF7CF499E0121C9A7BA34B7277EE5FA0
09A0EE3D603BEA4173B001B905D58856A99BEAE260A8CF01A6F2D73F6A5AF9CC
3738D894770AD27F2BAA1A8AC49D55D311D7B27C85273525BC99D34FCB2E6586
A0CF3BD5238E30F890FCD69D0A9620C2B1520D7CD80D444A93455702169AD410
38DD01C76A507BF7CFE1133B6A72FAF3D19B7B18680FEB898FB2013891882A1A
15D18294CFDFFA3E16C17CD2F83B97107BCD90CF931577FEB6C24BF4BDCDCFA6
04839EDB1FB147C84A11C0CD3321743059919F5287D92E1A8CB5A1EBA67A81F6
FDA458D9A2B334C5A38AF1EF1D0FF443CAF0B353127AB30D4B2C4951E5998E05
01E5E935943A92A58D6F6E849F98E128BC1BB848CD69109A3CBB2C49725AD0A1
067A2D77EDD29E1D7EA6AB06A98D11237948001A1242B92B70BA40771D576ADE
8B89C3BBD7FE5B14FE975D5111C801E3CD3123D690511B40BADD19CDCC3D32EA
75ED317929243605C4DA27F63AA1F7474160250EC4DF8CA1D32B58D24FA24CD1
1A57EDDBBBDB7FF603688ACD9D701A0E108315A914DCCD22CF327A089ACAD445
AACBCEF1FC516A2F1893A535582C4B3FF5FC11C744F5868226963434F9B4FC02
B3F9AB284DEFED42A797547F96F920DF91CCC561AB53B8FE69C1C4D8875C5B6E
3E6D5497BA05CCE6B16500F77B02093B9DC47710FDC9F4F31E93AE2A88063504
1C698E03C72EE596546FB672AFC2C05F43A1B7B304B02DC74F2A7191320F5F9A
AF790CC38B7057BA9B3385E1D40C01AE91B9F529CD8D0ACD97C590A23059001D
40E7928DAD5B1B3CEB8089F11952F34370DB85657F4A3558D4E6DC3C8AD6399E
F9662022804A706C5E19A21DDF96886440910B350C5E1EB0A406845E0C473B84
66FC86404AEC49C811506353B5E71A5B6EEE433788A4881FD66075540D4B799D
19A928E27E6953ECC6A619C5BDFD2B85A9C5F1914D4E4E79C6D6D39CBC4D47D1
658644ED5995E68A9955061FEDD704D061ADE1FE29741F4FE8A8CE50E18C3297
71EA6019BB146C522AD29598A00EE88AB7869D92BAAAEFD2BF662CE3E095BB56
D9BF8C072DBECD5D5BFD0D6B3A67F0E3938FD7A2E3555F427A47BCE60A11A4E7
59C9917D0080C822DDDDFD673EEE69C230A41301F794E8EA837449DF9287EDF5
617E8E8ABD681662CD1A4A2515EDFB4355B122E4952748272E63DB8C7FE6EF01
5BEE55142F46C20DFCFCF849D90E25ADA6A77C35777E67327E7911C686A9E410
569AC5B0B305782B0BBF1B13C8B7552ED767C899BF4FA2CF8B1B03010C44859E
80142A4563CF9EC15B453803F6ADF84706BCD4305B2C4234F5106B5CE51E52F8
B009103D197CE03E03E5D6EAA8F37EDBE5308FDFFE0F7580DDCA61A6C672E3B6
FFC065131A51FCA87D5504FFE9D02440C71CD5A398527D86B9CA8E77D5DA2297
01243042CAACCB2DB3D797705341ADA98A900AD8F7C04F80EA62F96F4E8D0890
2507A445A2B6C9F5B63D4273B346929A3122B10DB97CE501575B96BD68C308A1
67CDE5BA7E598CEED980A0527D033783946BDA6C37BC777565E944E9B7AA5BFE
191FBD38FC43CA4F59B3F3A82C0375501F1476263CD1F97E2C2F38BEEE703CBB
B06ACDEF9104F5E3CCBDCAFDD7EB0F082B610DF95C81ECD76D4F360217929120
7DB36342454B11250B1C28EDFC50D42A5D2462B2A812BB343D8A1850102F5831
DD2F2AC25543460EF9DF8BC55BC5733136BA75945C9A6A5BF7079ADCC2AF314E
B3189D0F1876577A48E19DDB47766A0486634676BCD928FFF5E0F3750FD5713A
C29C3C602E5E5F025045561350E842FB30FC424C00068861A8E316996AAAB3BE
A135BA25BEE16C8D8B333F354F99FC5ACAAF4B178482D734621FB27AD270E2F8
977C74830FF100D2DF4F3E287848FBDEE021DB51746DCB13054D4864109E22E1
9C62C4FC233CF1656FA17C53AF8121ABB496F3922E5C57572B6D6B480478E4FC
4ACB94CCA3A70DA0D0CAF8AFE2FC90079049AF3361F04931A8AC4DF475883926
51A954A4182ADB2CE4C919D808BD16E5FA5D68147E76DC65A55E117E7F62AFEA
4E3BC69D5E142A62F2CE66E52C07E2EC5F7B8EFD37F1AACA5113F537B80B186C
54F4D0834BF7362CF298BC2E498937A7FE2B3CC10DAEC52C65A436379BAE8D69
630AA2A80EE97F4D9C1D2C2DC537C677AC9478E44119FF7891EFDBA2AA4D8DEF
3749D4EE50E7FB2343B3C74D43549245C83ED1E4E39D3EE785E863E59B32B738
4F2BD764D4C47EB7B9851584C8331ADAFEB05ED3D9C44956FF7135EDE36F105C
9FDD270747BB1579412F55847377A2B3378BB36070BC8B2AC20D6A86E83BED6F
41942798A245D4B8DC149AE1FAE1A80314E0FA5F0BE4B99C698EAA4EE9BB2612
B1FD22C1FA0F66C9698DF96C03D7E53497999D926DACF33610288942DDBAB31A
70A127C3A5F520D79494C97A09775A5F236A841ABFBC8A9C749887BC41FB5191
9256A220DB336B7E031802809CB66F5DC19CB97F61B90DC95D115D160F2F6F1B
4BF10861CE17ACC49B052E491172891BE4F130CD3238FB5FE0C733413D88E9E3
6CF40DA6F5B2E1BC41EF5F7CB49825EA5058FF7C49C5FA11F9F9F575AB4D8237
FFC2573F94B695CBE9BC44A1BB26DDC6E55627BA16E5197CADA519CC7302DBE7
7F1FE4CF68C558D8F6E264
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 59 /comma put
dup 84 /T put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D9173633D9B50449E0
F9026E7A4CC1A3694D6C030E5AE53C0DAAF90B0046E22E14FF2787AC8194C42A
4B8846856AF1C272B0FCD4B34D6E90786C303D5907AD7969AF26745C248CABAB
DF185B1698A5E06DA5A41316B82448BAE0781C175AB74E1EAE2799DA042A49E1
65164FF73B05A9357A45ADC0B5CC869E17DB43071FBB0A5A1A2814C0F0FD149D
E5F1D17800061C8B9042C4FA3660A8D87CB293347A956CF9C438485A8B7A996A
66832EE1D181E022B76EBDF1C8F2D481542A57D37A3B8D041DED6863DB1F64EA
9CCA556BFDB8B33C64D57FCB7E5C1F08C945D5540F9DD63421EB5B0051CACA91
72250EBF4A8E7923D67B5CC70504D210E26BBBD9CEA4F2FEA01C41E6C490E307
702C4ABB0384B65EE7C75ED09AC0BF78C06FE6864E10B5D925AA53B62737E10F
8387C1C5E53B86FA18D8328C4BDD717BB7B7FCC49406BC263A0C7E51B567BFFB
D4F033C05B741ADF6804D868817691F4477FDDA143D6AC0585A592EDF2A8A37A
39E5731C8ED01134EABF831D1F6837AE9729C673B0A02F9FE24DC50FE7F65B64
CEB4D0D55A78F3A30FF21CCE4A837D6D38A51EC6C7D73E0770F791B8FC6148E5
85FC07F839C7E46F383ACA812179A622D8CE7A9B7FC1EE8FD809DC7065B162F2
B8BE31390995157F9EE9736EDFA083D81BB3CF75F405BCE2DEB64C66E116DF11
DF2C8A302CB9EBDC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: SFRM1095
%!FontType1-1.0: SFRM1095 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm1095, tcrm1095, larm1095, lbrm1095, lcrm1095, rxrm1095.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM1095 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-188 -320 1445 942}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E48759F33528B839DFD4B92DF0482493852D12053A7904
BF6E144B9488970F220C299E80886366662C1276120E72472BF84082B9EEC729
F7007ECDC5A850C88810EA679DABE81714004E65D938DA9ABDF29C949A52EF02
EDA8451563235D51286E9133FFC7A27067DF0332ED614AC2D4FAB88EC84E6CB9
FAB41C933E84B88097BA8742BC30A81416D1CAA3545F08E2554B28362B99B79E
FC42281922B94604AABAF5F7A9B8E2D9A4358F38F2382EF9544B859D098DF243
034CC475CEDEBF0EDD0A60C907127BB32F7D85A62A44E90B4056D9B4B2FF3A49
786032C6B25794E2C0003C7852C6B0688351FBFC43300FB0B72880BB7B58BB61
3D1064E7D4DDB128A9B38EF7510B7E5F82BDE39489E2D1DF08816781B13836E4
89390F84577F31776FE43A5F94F817A4AA4A698AA4AE84B178FCB65F1B5A5CE1
334417595F6E40849041565BAA497F6E4B8F4305D849128C9A26A98B909EABE9
8F2659189ED27C588ADC7C744712B4D9AD0C5DD25D1233E979DE7F53C5F1C47C
E9DF254086E5EC70EBC6B7E080060BA72F15E6BB75C75011B15B7ABB6BF761DD
428FF1BD688938C75BEABA7DEE2AF49364D2E198FDC7F8FA2313BBE598ED3703
7ECAAA4670BE3A85C693ACA829A5936778BCDCDB38A5981D4CAC8994E2B2F086
26D8793AC1393D49A8F2FE391F0EF8899A7720697B908266F619EAB1AE084905
36AD29AC3992BD3D77682CA8EEC0A297C9D4F167F3D6FE94EE31C80742E74DB2
0331C9E1C649D036DA3B081DEEF6D171EFCA22A3A0D668EE3121032D3A55BDD0
2AEB87D439107FB3778AB0EC59689768D3EC943D49A8EADC779F610C3087689C
19E649571778AF3905B73C16EAED4E185C873186862E2B848A6F7FF06FD50FB9
A3250B8A6B0782FF750829F55C0655D4D6FC707E24F5CE10B99E14ACD4566001
6B380CE26B9807513FDD928653CBC3FF333C089C557483220716BECF3B38AA5D
0433AFF5A5CF19043C6EC4A49FAAAB10ECDA541E143ACCD729EE49779466D11D
A94FAB52C297569731F5BF3AD2E2A68EF8D1C1218D4CAD6021093125A73710FE
E11B6B3B23CD2AD46270F92FB292F30D852DDE60E6818C162254247893637369
C7729F5A4CBAD8D78B07309AEE44069BD87AA928122D1FFF56B8FD5782BA085B
A2213F8816F01183C3CA298E658EE9C13C6350F14A9209DE8A4E08DA6FE245BF
568355677A9DD49EB4DD3686B5BB030C72397BE2798DC546A5040B8F17C5128A
779AABF374DA038B94733191AAF942B6BA35E22B7DEEE932B202E981784A16F8
F33E50BB66F44593DF8DB37452837893CBA42634629F0D64BA7581CF5E966FB5
3D24198F715A9CCAFCF4AD13465DF0D603C48302D7E683BF122B339AEFC509BD
A8400A5A1F19EC6C599E20238CEDDCA78E8314EDC6B44B38419ACFED6D092481
50786DE3383AB03CD116D52E41851B0635A9BE9DFFC634AE239F24D487DF73D7
3878ABF61030B5A9733EBF14D79A07A2BA9D5D44CA6B490E990D75AD6B19805A
CDADD5D39ADFD18C0FEABF1C9D195E2EDD1C60A2AE1CC2C70CE3A293658B0EC2
89A0FF64E651A689822E4D5EC8D77C109EA7FC04160F972CEB790C818F445B4C
A2FCD347D13CF41A65E336A5156B8344F1CCDE84A46AB2CC7F0F052620E5123C
B6F6B133DFBA5A3E65297AC38C36ABDF19DD5DD945D5FC78AE82EBB17473F6F8
429B98AF55D76EA0130064A1B0D86C00A49816C19375BA41440B4CB97DD9B19A
7ADD12100D90F33ADFA4D661A5BDED1BB9E9B6AADDD481DA4789B52AA42E87FD
05AF4A75B3DDBACBD0BCB623D5515BA63C2AD07E13F93391F248FF72A9466572
485DDFEF4894DBCA3F2FB4684FA0EA1C7F0EA5B2946E56800422B5392B6F93AB
77D129E89DB36DF165EACFD249E9E128A3AD06A18B2C6BBB076410C7F4D4C2D2
E506C84E896E1FA498AC0922338CEB3ECFEFEB50F449C01794258F8ED287C7AD
CBA1EBC70CC4106C988676F66DA98957838DDEF0AD7C4F17AA596E81406F17E8
738C920704F7DDD57C53843BF964AE1095100AA96A3931F3CEEC2B8D426E23DC
9F62B2FEC9E24BCC3484413186B331054E404BFEDEC454988CF046E740601399
4978EF49DD1AA7D07B2CB60EAD23B7CC8CE43C92461012AA63FE94C5780669AF
D68B8E32E60C749802BF674E3EE0DB965DD45604DAD7759B5167DFBB7EFE5551
7EB9C4125203C8FF1D881F6C47B1EFCE882798084F6F41750699BC2902CB4423
EE5EE40FF2ABC81973DAB2832332F3FE98A99664195A920FC239F97E12B1F9FE
3897A1F7A36E19CF49A5475C5C9F352D8BE3694B7A96F6593E96A327B6C06EAC
7608BB90246A76F3B72F5895A6BD45AAF99F6432BF32A3DD099DA1BF5D653260
1FB08DEDBA6B9A81A2601C1CE1C1B5B7410BB799ADFDF25709A8696D992C74E1
75C64DE59E00E9253C9B160D22598E71E00A7ECF6A0F8F0EF6FCA9A6998497D0
4EF7C91F971BBF6F85FB8223624D36891695920917664559BD8C8B15B697674C
5F33FDF897730FD46C23FC4AFC9753AD8DF42D54E4C4120892EBC0F85F59AF7B
2B9A146914A24764CB10357090BBB3DCCA756B93B0FE723311D7C48435E4D123
9A550A850DBF632156B715159822D8220A26924054977E715CA1F39BCD7E4321
99E0677AF68600E900A7DEAD9636E7DECA274088C53479B8C9C81882544B89C0
A9C95AAEAA21ECCDFBB1207A9706AA8BBA9C1637E9A26AB810A0895DF7537B6A
C7C500AC1A8B08CC425FD9EB6668FF1E60613F6064EABFCB5706CEFE4F16580D
44B73A263B279ED61585B4ABAAA306C0F2E2A593DB7AA7618487B1D3D92BA51D
429BE452A34ABFA791A352BE0827C1E664A39B29B5C776D7607E7626AD88D31E
9656BFC60CD543C96380CC5FD12685D6FFA0A37F3407A02B06A2A333985C5B0B
AA2487A88B529F132058E88858E7307C3048B1CF36C21F68CD19BA8FC4879F0B
69C05A59E308C8FA4E67D56C072047B66BC6448A4CB761AFEFC0DF2AA7561CC6
9817A611C490CA4A7628C2257AA3102ECA8773758D8D9C2872A401DB454BCF22
7E0875252E8CED1A0852A271019D39DB5FBA39FB59CB0A9717CCEF3CD8AD326F
107E0458A8B7506B037B4D981B6C1C6DA423C383330706294BCD0A2060E1F47F
0B760AFCA2BEEB50839738CBC254B54E6E3A103D8B27BF5F0225FFEE54C0B739
BF010C6144924D03B0A7FEC9C75DF8F39FB84B824231A826CFBC9E14B05F4558
4C818697E4FCF7DA94F4DAC9E22994CB06AF224E9229D3DB800CD441B2C444A0
A2A98F52F5FFBCA2AEDE83AC7E3E8B0C14658CE0ACF7C16E0D8F0B4B8231BA52
756348AF8F2B47777D8F7E89D63CA29E638C11C2A36E2B7D05493DDB9D184247
E6C405F21A456E253C117C8DF93ADA9D54DF5BF992D637E6CCEC6C143A668C93
A4CAEC5CBAAC3620DA9A35EF64C6505AA73F91C02B6F1B005AC9256A1AFA2DFE
5A75CDB6B3F043AF30E52458EE6A9AC264CAA46AFBED21C714DAAF4B2E70FBC3
8D6D3AA58780190F135CAD10EEEA20769DAA8DD669C3630465995F18453F6ED4
FDB05FC3B18B33E6C393F48372AD42B9CDF51D0362BE5F6E17066AB079A34853
EE7092FE1872C7DE02304D13ABA95B7A48BC71992F82BC4DB92DA35722C36EB2
126DF87B093A5C6A7CC313B2B45FE95A799A69B72B50167511AF352F7FA9B2D2
762E16E6E13CB22589AFA7C24F8DE202AC1FB8FAA3841AB05153C2219ED5D06C
044915E13798B6917436852BCB211639B11F8FA2BF9E433529A1EC25D383E1EE
624DDF02A314D3CBEF24388C0706BFFE9D99112D82E5ADD7FDA022DBBB9B75AF
65BF389F38D3DC3DC8797E84A97DDFB8BFC4346DC01A04093C37D119B59073CD
A5558A35C01ED64CD1A218A5761FC80CBC4729DF40E4CFAAF4D2504B044DD0CA
947372ECB27BC27CDC3C7D5365CEF510533343AC62C22A4A54EB0C895EDF6B03
19E985341DDCDB6F5B1DD285E4DDCC87B42A32BA0D81412AB77BC8E1874CF329
240E47F6C1538800689BBE65EFA1FF1DA06BD974CB04F087AFA0AAFD016BBA0E
DF9A18226947C1AACBD7A024D2E5AB0F1CAF2D199AB1411D5EA030D6B0D2689B
F74B98D73883C4DC4B07BCAC04889E2E7ED8891C13C10E3F38336132D0AD64C2
728DF4D9414F1CA2D30E01BF547EB07770F60CD66DB734E98C3BE6910AD2CBDD
F782438832D29630559783CFAF42A11BBAB339E7AD3C1C9F0ED260EFD200310D
7ECDE6F146722A5A006C3338F26E422F045AF353F2016A4DFBE5AA7D8A3E410A
1FA6DCBD58CAF1C41FD41745809369EDCE377C2C5263F85D216DF3697FF03B55
3ADB573D333D6934597B0E0ACDF4549731E9744ACF9F548D5D48797888A81813
55926DE1DCDC504B38FC0416904AC4A1A00EA86BC1A01C741A7FDFC47D591E52
74917FB29375B5F46CB4229D6E13A7C257214DB9AD9E5ACC965ABE961C05F527
AB6AA16C612BA3EAC1EB51261B2AD4C243D76451DCBC3D9F591E3A936A061ACB
B08CBCEF3798248D1378CAE98E790F9D8F936ACC2410A685C95B2EC80C166B4A
30536A5171289E0B452FCB0A84280D51FE61924E7FBE024354EE7DD8575E650A
5BC3AA7383B7F328E93E0DEEF267033CBD6CC5595F618C2BEA93A5C048FEC738
F1FE853B6F191D7A2904A504C931459E81AF15D286C68F21A8B9E74BE43B99C1
A1E9A56C338ED5FBF3100D38ED2440ADB118DA45070F1AB8B6C3FD6AFEE5ABA0
A879AA1317BE776D928EBC561713901596A2D7FCAFCCCC572024A39F579CE74C
D87EE94A287C947E67DBA704AACA3A9C22ADB730BA6E0ADF2779061011FD24AF
4E4785C25F3528E5F1CC96E65C46D20205ACADE1E4039D242E7434E22EC9361A
D5CDA831D7F36A7B3EF6908754242EC0826713580E13EEB467780E339E88CAC8
2038AE97F007897557D46706658418710D342559D9653338302C179052245B9B
CB88933C2D5718FC6877AAE3ED1C511F48686A04D7AFAED945D9F493B24C9E0A
28FB47181B1084D1C213B623834C7CB4B6C439A2E90E33371219618224E66DF5
7CD18C1047F69FA9C119EB71AA518F603FD1B6FDFEF441264E29D1F5F4D62D96
263DC7C72AC06DBB214F9240807A9AC2FA24EE9944678A9B463C7FA814D25D70
674793D88C2BC6D6DF576A996993DBBC44F3375A9093550881FEFF34C3211514
94DFF0DCB32726CAA04C99BF3B3A7D37E7C0B29DD4B37A767048B6086DC92265
915369C8234F0605E8970DF70D98126C2FFFB93523D9F14DD01459FD1BEE59B4
81A68FAB7C1F64920BE37418F9ED222319DACDA5F9E2A8594D3CBC597C3A5B86
E2A6405757A30607D13BAF2BBD8A420AB297126D001A50447DC6E1A483BB714E
C451AB5DAA277C38FF0224CDDCC3983756CE0D57A8AF6E3B0FDE3A04F9A0D0F4
BF68483C3D263673335FBEE89C1E42349C5E7DAB4441611035B6001D2B05BB98
607B4CBE10AB37683FAD1F3808F65E2429460AD4D257DCDEA750BDD1A1EB74E7
67773F2E32BF5153AD657F244C821CECB8B338B3E8634AEA50366B86976D6BEC
4AA1CD878A13D9B3A0E8776D9649359EAAAB63331CB81AC7EE6707DA2BAE55FE
B935764507CA2A21E19882B5A3051904150B6AC722705899FD8BB1A26E4C215F
D07999152AEB185692AD26AA71F35135D55FF8C38C30C2DA2F5703EEA730FED5
CC1C2EC20F60B3FA0BB8724DE3FA77DE5FE1C21C2EBDC30B3A7A2DC59BD6510D
A3D916771557E46AE4CC04B1493D6BBC928047142287F0A6F59B670986C6A810
09D3C81A0BCA42F26EFC7F16D94F29668DD97D27867884472886AA1993169091
5FB719561D54AF3EC6AB3C8DA0D757B08D178224D77F85F5C2BBCF51A0EFE5C0
F8882E01A506926FCC90F0F49BC3F3FE6FC0DB29F4F4168DFFB1E3C2C1F0A9EE
6D9E5C61CFFADC53835440A1C364BE87092F70FEB8CC1EFD748994A21A5AA2C2
94BE88B7EA38B0902B7AA7C4696E5092EADB2562EF83C9B918E4B808DAFEF646
FFCE2CD8EE5A583B4E98B9DC2F8C0A3C00181AD38B4DDCF3080E2DE58623B2B8
26EA48D85FBC1EF60AD643DE7E553889BCED7BE702F2DBF0DA3F76BAF674A027
69B52155636151688C19C690B20B6B8322558080193696325F12D8F358FE7477
386B66182A711B184DFA3F457C7E2689DF33968A094470FEE345C4D18E2315F5
82938A305C862C4D3C8C03C1C2C932BD8E38168FD32798BAE66107196B4B2B82
06A4179260F7A7B320BD8C7CF2D0189561BC97B7DA969E929FAF4AAA449CC920
3C4D2880A9BEA2BD64E99F84D70700E9FBD91045D47986D495940A89E1B62C5A
E53F29A49EFD77E43BD168044E3355A642A169DAB0A5CDDC8600DA605E7B2C7F
CC8E6040D7A7C7880568C75286BB73655C8E5DDAE81D3D2CDB035F4A921FF32A
8C04648799AD0ABBA972DE6D609086E2C3562944C330B781F59B3CB401C9A267
19B361E7D310C3DC498EE2093FB2AE3D37E44644C234D919C7F7BA623F3ECE53
E795B84DA96993C7C1320D071B0AC06FD5BAB6F240C3E14DE17CD79AA14D24A2
1350BF64E96CDAD0A964E3CA746F7B19FFA3EF4A1696A735238FF3CE5C0D1209
38DE737964EB1D21A8E16D5F20C03A590CDF7DC66C4E39CCD41483AA10FE433F
EACCA5707FB215F7EF648CC462230A005D972B219739022860C119672DE5DCEF
738E41313C89D002BECFF739CCF09E0010533BC14E56C291413C501E0DD99D49
289F9FA56B907D4E496BB4EC0467E73A7A47B495F683B89BCF7BAF9833C84201
9ECB3CCAFF38E4A86A6F56A4614ED8FC7A1BB6A3EBA3B57A96E413AADF797F63
554DC896DF2FBD0052CEFB055A6E255B919C805812C803FA8DAC277F3583821D
40C0200CDD814CBDABD69A48BE50E57657B377887D8DCBE1544DBB735659CE15
2AE8FD1E33A32E9C779847006F6CA317C1A7351FD00B35A8F4A3AC0C38BD160D
623BD5FFA3413D908A2CA55685D2612B7F36AA67E42ADD4A65485594726DBE49
04FA0B90AD71DB892C9D170DEECA10CF4C06C6553AAD6E4BC6079710B3CAA4AE
C4B05A378904EEEBCC27076E8FEF19FC1BD465E57001C2E1A15A834ADA28B121
2E435E2282AB5A9A3BB9944C068DDC8B3B724C58868F85BE0A8587039877A338
6A1D4592FC935347BEBD60BFC9B6E28F06BDCC9711D7D6033B728F913695F1A7
EFC79BCF3F74FB6FC2C99AD301B93AADA18858109179B15292027209A25CB68E
BF9C7CBE20D4255E38C68D5277DE5AEB3E7AD413005BAD9127E3CFF86EEE927C
E5E6038F20380042961BBDB56F40FF07C2DC0FF66912B7CF53983E67EC77FC4E
639C8A348FA512D397FFEDAF9FEEA5B582009507CA19395CC952F4A630A6B22C
4DC4CE2159B13ECE32EBE42F1F7D4AC852441FED2AD0A7BBBD17C440E18B5DFA
7B72BA41CFED8CA46EE828E0F768C4DB824DB15C6DB8ABB55A607DC3D88D8283
87199244C847A68F1A9E8E3705E71C8C0A7926AA5643A7F091A006D72751CD13
C45EF003C1492E94840A2977DDA28FBC68FC7BCFDBBF13AE645E83C542A3B6E4
8D4A90815C4D6C0C1F15A38887ED5335838405F69C6631C8DDA35E0304486FF0
9CDEC1F55915A1AE4FA8F26F39CD59913042595D05527622EE8786CF1ABFB5DD
D867C6F46B0DF9D3648326E444D1CC587A732C65F8E5E4403D32C12F4F7BAF93
C2AE5D9C49C261DD762BFC5D27C0C353C533AF3B2052DA16BAAF84DD48629A21
DC798B57B6D7B643CB7924C889595242BFCDD1896E3E2D8F155358BA218A67C4
2AC653C1373763D9B931CDCFCA9F576DFB8C6C467E3E766EA42BF962CBD3B859
E8F144AACDA57D2501D6CE35F2D27A381B31F0DD9487242739F5DF4BAB80F3A9
5B9FE864C3012431411F730C6B5F9E8A0CE3D18732110DB3EE726C661B0F978F
C5A0DE3557923F75AB5E706E5EB68171BA697F3719A949EC7BC3CE225C0FD94F
6299BD3F97B7A08BB1A14514BD26F041E864D97A44D4E1C7260EA125F7BDCDE7
82435845F8AB84DFCDC53647484955D1156B1089AE71482416C0C900D8C8BEFB
1D63627919B9E616AF236DEBA03FA8BEA26BEBED9279A5BE33A846D2FDD25DAF
9B5A747EB52B58F8C748DD429C3FC85114F9806D2710B008D78F08EEDF876610
B22271386A0A89EF019F28026E18F1F0B049E76D6828EC8581ABFDEA7CB3F017
9D2F168572F20EF1C151FE6C65FA0F2D3A688A700FE2858FBA0FBB3AE33A1504
2C8DE314C8E54A00B1CF28FE2FF5ED47E0CE2CC5EEBE2617123196D109A280F3
A95B9FE864C3012431411F730D114C409199DFF5EF7D8D7D998C3ED886220E2E
CE404D1201CFAA4CEC65535AB32B2F253D238E72C7709FA885DD61EDA0BF5C05
6B4743712643D1A48FDC2A1223CA6D677768293F0FDCBEBD743B2F37BF34D10B
1623C45BDA2EF2C74EA1D14B00EDBAFC19F7E9A3CC1C1B040F16C8520EF47B85
F21F39F15491F28FE190E74866564C88941DE5CAD17960292624ABEB7FCF25F8
CF99D8DB478F3D07EA18814D01774DE60A4453597E2FC26193B96D3BC0A1552C
4C647B72A54E204FFE904B2B35A27DAE13EDC0A43567C8282D21B549BE2DBF96
6363F583ECFE7C1FD1BF48238C130BA90BDECE41578C98ADDF18652E231B29EC
64D72D8385E649DD202041654DEFD3EF8353076A4D3B4330A982C30AA85A785B
C41DBB8BC8D65ACFA569DF07092225A0ED0E9481AC42510588C12A71DAE2B307
6EC29FDC3D07EB1A5628B5E80FBDF2108D02AEF697FFE9D242DC300EB34672AA
7F080C6603D7BF70FE57DAFD4FC5CB06FEF4C8A26FA4A35B05B02EB6E786F8C9
D7659AE5A15FA1B4FDFE7E38F546908213E339C4A01680B26FC52B359A937989
94BFD823F90D933DAEA9AD08013443B73302CE675DC14CA25AA9316AF3DD093D
94D8F9A6F044CCC491B136F6AB848D546F313B660EFB9F77E040327C35854440
DED0333EB31C7A4A924BC923CFEE52B8316EAAFD48E2568377D3C125A417B3B8
A2A4CCCA6C7FA26455FE61FDCF7DED458746BCA75BDCED06B56125EDE0DE92FA
06B9CCA2138AD9C4CC8AAC6E4AEACA82091FA7201555A7E38AEA50796A9EC7F5
547B8670952BEB56128822AC4F22B2B850500C6B36493C692BA5F4EDED8B840C
BF0CC5741E4882C0D6619BB90A22EE900DAF6CFA5D925554667246FB97721C20
95CA9965FA3DC07D3C606516CEB67EC4910B836D56DB77110F6D77AD82DD5E66
61BDF8AB0E552BCBE3E21C4DA1D0CA8CCED4EF40A7381D20692B8DC7FC5636FC
3EF2AFB2EE804147B3CF6EB5A5A019C9C25AF1BAE1AD8D1DF5641D56753944D0
ABCD408D17AFDDDF82B24F174DCF9FA7D4E1BA3C030E18F7DDF4D382EB3F3FCD
499456FBEC3198CA758EC896B8F89D384F524546C7FF6F9AD39C9FCE8E123EE0
3A61F051AFA2C2C79BE670E36CD16E6F19D9C51C35B0AC71633E49E6D10EB5C8
FD7CC27C680163004CB4D8D9034DC376F3C60665EA8C7D096A45C63F0DF55136
2C419BF6EAD0CA93A75E6888534EED218FD8F1A5894A2A2BC18F4F56CDE3255C
A1287B254EA7C7A2DC65FF4DC79F5AD6FFA10F033ADB88904A586C0C0AC02A13
24ED781467BFF284B1BD4042022C8165DC3B10A72E8D39F1F4BDFCA90B774733
794504BF7C7245E4C7CADE72564CA00346DBAE3D9D97B627A2CB7CBD708EA65C
0AACE9876EB04A4F7F5E9A9EB77540A176CCDF679B22033E06B76BD10667B5A4
313F606161CDD3B24E6AE36B491007919E4A201831F71CB16389399A3451FBFE
C4CE9BB69A7BF927645BE2CFB3AF86F29A8106FBAB4F5C4C8A7AF34EACFD2A73
18D380B8F938F2C8E60B6162FDB3B1963B4723BE83A0A5F8BD7E3F2A8AC186C9
4D6BDF4BCF83B41FABF2D49A5CC0F0E81DBEF64017066DBFAB0B90AB1302558B
510C0C2057380A6E72EA317EBBB8E813B504773D9EAAF78C3B8DA29FF0ED7EA0
2E8D9D06EADA0AADC259BA2138EEF9A262F0714F19E227B5B54512AFF4C02B74
0DAE78B9D00EA80D193E768E378D645FEBB04ECA771E3DB9D9CFF8073087C2E4
F721B55FBD8E43A845AAECB7126E201FDA73E668D5837386F411D697215981B6
4619BED151131E1FA003F0180015A15C92AA33097B3C7B9818D3B7D3B6F642CF
347622F3837304EC5FDEBE556F5ABB5B331132C66237D8F81688CAF05981536B
5D9B28527E679B4FBB61ECFB18E5B961BAC397038A8DE42F6D1C2F53B07F96CD
7A54D0A6E60A62E18CBEC95D4F9B797B266C77AC9A6EF392055F085EA4980DA2
20197D49E494EC5EE4BCD8B462DC246C18C21CF12143ACCD63FF658A8C58C74B
40F86B92F2FF319B79D37331AE3BEC8BA231DE2D065A19CCD49EF48ECDAEE896
6483F21D51527D443283D4A0BA520611DA305812330D6A348BF1C150CFD52920
9D70DB7987C808BF0C3D53547140F25509E188206A12D63EE1C2BEE8B6FDF91F
3D745C058A451D7BCB8B72B07709337EA5B398F2AA3F4443FFF918C30CD6A135
2BA4A931725098C8238E7DC2D73240B088C233F8ED2986EB1CB8627476F29BBE
5AA937C3E4F84E3F87BDE2AC70FE55F1A14CB96CC72222A3AA4F2768C2988B96
44472523EC60880FC421088D56F247AA6E9522075D524A15C97D48C084A5888B
A90024A62ADE6D09ED9E75B6314795B74CF297C46793D9372E35F37315E6CF63
B4FD224F4EF551F35799BCCDFFD73A427A9126A9C27A2CC117D503987642EF74
7AFB35100BC5F2F9C77CAE0DC9DF4432243E66A9837BB895E1AC5F365DE615B0
628C3060E9CAE54FF10151DFCDDA6EBCD68F2B177AF767B83A3845491E52865C
4E88203D4EFE0E85508134A8EE68CC87B7529181FEEBB743BEA31AC341BFA0F1
66A34B9CBD184F0E5C23806DD351785B6C1FC1C9313B560BABC81D749CC0A683
54D0E954279AE3FA9B105AF0132B1757B9C55684E5F81CFA25492A45091719F1
E3C2154F81C84772C66E84E04B0D6FEB1B84F309D1E1C446E5F32CE33089DFCC
15D61A58DCB5267EF356FF37A9946820758AA0B09D6933E8D59133310184304E
D2773C2D41261C3AED3F2EFF8D5513665633A3683B7BAE109B2EAB534A64CFAB
A7AF04C8C1ADD523999E5A133067A19F7ECC29D2E0AF0FE5632ECCC001FAC81C
B9D384491B65E2D9874B14E2DA8136E92B007C46FFFCF9F11EC913A45250198B
658C936B7565B7E2B186FFB23545D7299178994B8DA7A60C446C8ED4738BFF34
F91A31C37991122AE51D117615D784D82EEE04E9483CF38C1F6ECCD997DB1B34
4EA08D9C163A76CACB7A8A5A2044E5F079DD769ED39718DDE1024D89E14E9BB8
1A19CFC180BCD840CADEF7D4BF4E4B74D0BF3E1DB3F4CF471A6812EBFA51F691
86FC892735BF37ACF18799E003D704FC6A87073BB871ED2CAF215B96E79527F0
C703EB8CBB0C4C393E987D77319964639CAB69E19606B4D41B3FA987AA509885
4899BDB13283F58A154C524663AA057BE2C823A414C817B3A6395EE76EDC73CF
F744AF97D7CCF208E4EBF50D619D919ACB6EC19851686954564F49D28F95A3FC
D25C8320E8D6C7DEFD59FF63A7ECF2508C4EBC8F2FC9BABDFA374059143FC781
9A28392FAF6BF7798E9F31FC512E6C377709EE7536BF35B55863009FE88F8531
2C1F9DE8E8A6E81C073AD4F235B85E3303786A7607BECDD416F7AD733E9735AB
5904BD1339D92B61B807EF6AD453E416425170F812E5288E839143BDF36D6183
624EA13D004950AEBFEC89F2D087E6F862B92651BBF4A6AC1274B370D7DC5DDA
EB501DBE93740311451815138DC7AE755857D51960F5B40895345FAEA6B669AC
E727C3BED4357EEAE66705575B5AF01496892EB69F7F9A213E441B151376C5C6
F1B016BBA5D31BEC14AE8DF3C8981C3B26C42E52DB5332A898934D61F41F38A1
3F0BFE6D9949014AABF723E66A56562DAF22DC9F9756AB4CF8D724AC451EBE24
2D463C3A1F40394928CC313663FC5B1FFEAC1418C9972082DCB61AF018B6309F
F7216B63C6FDC480D22DE388B2872138F3C3C0288A953EBF6005E5071A5FE5C7
8788B0F560170598124FDB06542CEB1A0DCDEA799243AAA18A9FA6DACB5F5CCF
E760A7DD420EB3886766327E4D75515B4F362DF5A1EC53F38273FD2989718F2D
FA42779466D11DA94FAB52C297569731F0B6EDBC6EEF9A904D72B54996BA56AC
348C6F0A10521D38D3676C5A412C337E4C19C151D431F5F9A981C77B90DA7143
9E450631CE3A2E16A77282703B7F2794E95873D7CAB8290D3CAA87D634BC255F
89CAF1DABBA75656CD42851808B6E7C6398E624C2437B027A7614F00F3428FCE
6C7D2E3451EF0E7815C4B3B2A925DDAC7BAA0CCFC12980C2EA776433F8E5FAC4
31AA012B9194054F8C00FF273CAB0ABE5EBD5FE2D26F7730D33F25E3934F0535
BA6E591A90FE37A7CF0FDCCB6EE4D836B199B084AC3F752863E866B0687B232A
70DA6482ED42EE6EF9377B65375086C761305E92A749986BFE0D510981FFC799
7DBD2EEF69D9D980FDEA57658D4FDD59809C26DC5757476FFCD97DECA99B8D52
1CC8A0156D87ED472286FC177241A67115D799234EC8913B312E0315E7E13F08
796C4A61586CAC37479E5B1C87ABBB91CF850B861E691DD13424F3FD42DE8E35
BD6A95AF31D8447E651DFCED5CFF852770A13B0641CD0FA17906BDB310233895
B9C8592F8ACAABEC0C93FDB81C1AADD7402F1106B6BD2AC5D42F6AB08C51234A
87D8D42B5249ED67E909CB1D5F114EF54C9BCB476ADF6BC1A6053E07838BB78E
FA8C0B8C9CF3C25B40A38A4FA209054D956203D11C268D92834A62BE88A0800B
05A6EA496DE182F8FE1250ABB970889798B92A370CB1DBC3E3A29B89F9E70470
253B261DCCAACDAD46C962D053D02353236A1BDCDA9D6D0AAC8815FB7720B6B8
5ABBCF489ECF22F5C2431DEECC66B89786E207A5C80E2C83F952E9BAC6016C46
C5659B3F3B3D7C63DD439F069E1461AE2E9164587DBA6DDA6D6D4EEC20824BD4
C826E63A13DC87839FFF242E77F9848F88B8EF1FF44A49C4B603BC00F258F8A6
D0BA63F0CAC51DBB388102E674C972E3A3DDEB5AAEDD119B2960BB4553A5088E
3B0088E31E0DF8D276745C88DA2EC25B75C01085EF9CA7F86B718348A9E8270E
78DEF6B3A2533FC37EBD8B02EBBCB8F040C43259B5641ABC58CFC99AC1859436
2B103920B03A984E6F02DD5B1E4DD24A7CC429BB6690C8359885F99CA13DE83F
308886FD31409AD3AAFF201FAFEFE8CD95737A05DEAADC6FC529AD6F4C749DFA
36E515567AC1B7B06404E61479138E8CFD9E16EA105708BC4BCB87A27F703D23
77C6BC3A7DFBC3B937AB9ABA695C17BCA32CD5ACE0E428F10D6361548940602A
E0AA7A2F7263FEEF6BBF242DC8DF186C4ED33D753883AE0AD0B9319AA1A94C3E
24F32B0E4E3074BABA251497A902C2BE3A8C677EB452E93C4DF62CC73A5E549E
6C45C1DCB4086F1A4FF5D3B7C947D04B6C0EE7EC1E2F0E9E201C47707DC03741
23068474042DCB2011E39F622E70E0544E97B92B1BB819027F6319E1CBAE6A97
2896E0AE36F6E7A958CDB980A866F7E091A1A172F404193C392C7D7402E9FB62
66C419CCD3675B29DDBC14E325FEE8FDD6E45137C2DC704204F89D0C92DE6271
6CABED6E1E460CBC2ECA045018B639B06C7938A5CC4A9C3997CB2D07E5999E8D
BD0E73FBEE39A006AADEE4776E0E95558760A035DF459777340D76C4F7F2F325
F764F52A40A38BF8915A69C867100921F07E662AF8FEF3D8C629A8524EB3267F
1C2891FAC7A9C53797D010E0FCA4EBAFEEE3C9B4639126B3468CE4AB11C078B4
B3572BCBC66B0C88921005F70710DF9C94D7D98A06A8FB02CC451ABA497FCF85
FDAA5D1660D7440B63D0B37CF366B627B992CF99CEC15E7A6185B329C8F686D7
5A9D8F3BD2DBD94E1620DE8430115FEE34C3A4EF04B00906398170FD7B15E375
2792059D48A54CFA5CB6CE6C61524A65B275F0F1D250DA012B7704AB5A1CB717
15548F786ED03DBBB9DAA3D926D5D0CEBC729DD7C64DC5ED7621AEF1980DA276
1A550FDC28D80A83C90D07C6AAC17E03C86003F853F1EFFBD474521657DFA84C
1430E0CCD1D519F15501915C7228E96950FA889488494462375B3B86AA83D32E
43FD578C67F85A763A54F98A822913379F54896A4F2FBF1E967456AF84581B26
F6B01F85E6274CD7F2581134B101D1BE6B398C45D28987ADEB1A3A6C4129BA5A
376BB25AD6818A966E8BA1923BF6DF3D26FE12A7A0FEF2F92341A948A8F8DD35
1882DC42EE40414C09344DC0202727D9E1AA2D9E6F43E3E83DB7F57ABA396399
C4EE2418D70191F92D3803E4B2E89304B35D869CF7874CFE4EE156252A4466C8
AF8262B057FBEE3BCD7521F36F44C17B94785F492D2DA8B02CEBF00F0B50B7C8
56F14CF9522BA7D284748C1DD5A1EDB6AFA088E9C112211E15AE5B79AC712B2D
F0C17071143F5170853D0FD6A90469F981B3728A590966A1F12862E23B971364
31CE4E07E5D9AD311387DE64166C5934CFACA17ACE851965E554349F4D724F0D
03DFE321AA77AD96270F0C2487028F193C6589BBB77385841880181CC2F8B89C
DDA14C39DC5B57A0261EB63108D294CF23823E7CACCE40DC37561DCC11519535
BA490DB13413BFFB0559F7F94A744C63B8A87062E8BB682ECB7B602BB1818CB7
2DDA5D167D77EDF6BF2557760DEDE41EBC7BEFC7DDAA77924CB9AEB0C52B368F
36731BABD58ACA7E1C03868068C65B11F5666EE9AE02A391E7C96413E7AEF389
619AEC6AC60E602CEB6CCF2D72FA9ED9B79C21B1667E274C11A9187B8081B984
89629B45ABA11C62B698000D2413B3A7C9F9A905B447B5B836D1721B813E1C18
D9154D3008E8C339F17486299ADD1A16D73FEC45A40348FC8DA1BA1FB48A2A62
4953C12169F7F4A7CAEC0973DF50296BCEFA868C78F575E03571D1011B0EC94F
DD5D7C0DD9FEBED96C69A06007D98442BA66CB83A812711C25E8ED8341D28937
4660960FFFDDCB04429FB7772F7BD8C915AB44362F7AA829A4CA5C9B07077BC1
8F64C0BACC8D65B0013337D07A1F1DEB1CA29194450DB147850DC5BE7A268C6B
0B4A5E09982C931A3C680419A924C8D725F63A6FFA0D20765B6D63AF63741979
196DF6FB2F2C145720D29BB99B3564DABBFB489A5D5A1617739AAAA7A0856CAF
3BCC9461ADD964405187EDDEFE9325ABC656E39F53E122259846B2F9F7704DCA
A78FDB914A7DF0884F7E20D6C5E3342655ABD7A95E34E6136DF332A39D7CBDD9
2563CBCA6C2C6B50905C922E0E1E5C6D363B7FBA2107AC86AA520C0AE9CB2E1C
EE1C0E8E28C7F3E77B5F7ABCBA182AE19FC5FB3670F042669970A3042A36518B
E598D9344F025143778C98161F82569E134B62A1B34F2B744B2E3DAA4FF54DEF
7ABB5674CC234EDE48631B956FB5FCCFB1DAD0AA68EB99FD1581F01611F5650E
65F18E74B8173415C7C32130E00F6F43492F4C93AFFD24902F5F88944D0869AE
43B848723CEBE8E1D866D89289FA3ED8DEA0BE1D48F6E7910FD8EC3628A20606
1047D538961B3DE8B610A4C6F8A1757CCE0CDBE800B60F67191E6BEAF8EDE7CF
3B8DA490BF8F0D1678B01DB11E3005F3FF7094A4D4E85054BF6C1C2E379B2BEC
B9CA8E642B905472D9B85FE5339CFBD0B23C1D1AA17E8A29152315F5CE6E364D
5D18B9C44AFFFAAC5482663311CE656EA31276759037700AFCF7D7AD660B6357
8B3BDD77FCA5C3AE30D0B1DFAB45FD4EA900194FF7CDED02099ECE77037AF0B0
020ACB81E231E7BEF7E66951D4FDB05FC3B18B33E6C393F4843E78A5BE33A846
D2FDD25DAF9B5A747EB023C33CB6EB81A52EDCB91E890D0E956FCA59DD828F43
77FFC20B03CEDA4C842ACF7C3729AD97E061B6C502C2F34B7484217C2F964361
F7014C5F88DB62865A0148B1C3DE0129AA3525BB44E8581105F623CC2170D02B
BB84E5FF0DB548C76367A784AF0AFBC77976071834E20C0EF6540A82FB89B797
E4FF5F5C576490BCBAD48E91235137B9775BB090737EB43FE9404D5357992F6D
8C8B9B84EF152542989BEBD49F84FEF4C2CF83F137C558EF5A20705436FE0658
EE9CA27A8D4662BC0B495B5175112CDD809A78FBB5DFB58C0469C562FD91DF8A
AFBF407D06A0FDB349EDB45E7977B964F18D2F398B914A5C45B1193C14269C79
E70A7EDD762D0667301DAC81BE39E82B54888FE6A8F9B9C27FEAB3EF4FA40EB2
841D5C3C82398F0ECD902E333D847C04A4A1815367DAA1C3F8D5518A82FEB65E
613A9F848C5C0B5BCD65869D1388501D55725B5F206DB3276A13CBC0EB39A46A
5DE916ACDA4833D8B1F5414824E7D72ED178A0491432D70D1417541EA6139092
E36E2E91864909E4EC12014E33B72BD8EA82B12E337865CD47A38A540A0C4E8B
D6024C3C3C72821B00063BDCA7068E8F6CBB689E5855892F577C4887F51967EF
7E3BD113FBB1C56E1624269F66191D4FDD21F482977BEC8B78362720A2522FD2
7613B1A5B4D16027CB1244B88C6D380A1B63AA077E58DE5009068730BA1EF24E
036058014E8D0E4657CCD85BFBBBA94E6093310CB0E76F4BC2984F2777F39A94
5259D0730493F2B71BC868D1DAA84FF7C2AFA2ADF9BF6A01FCEF21C34ABD871C
ED84D38D33FC2CA559E3D620B5374FC9EFC84868AD49E3E103D4CBFDD7156F9A
96BFB38A5A0D2C82D2E717A506A374D3883121F0FE70EC9798200D72175BCBD5
659E514F31F8EF7115E67207A8E469C2777579FF81C19973ACB3BABDA1DDA80E
3C602873F6D9E8DD01B554751254A5E3A2637EF6385A7E753337CFCBC4164183
2D1FDD3F9230BDC290E2B4C1B912572DA1E7CF8EBB83D31B2A0DA2CEAC53E639
AE1F17BCA46E669795CB77765A74D97FE8B87D7FE41278F2FD708FFE1AA94A6E
1E6616CD44DBFCBB27D07D9CE00A8F8EFE3682EE830C395BF243E61B8A881C8A
A86EFF3D193BD3ECFBA2697D07D21ABE6A6BD288B0F56017059AF14E08677E2D
D20026CC8EF06577BFFDDAFEE1F545755FF75BAB52FFE105A19D1B52DDBB8C7C
F2D0189561BC97B7DA969E929B566263A671470123910272BC1213B00A70A37E
108E45F3267CDD117FA8090EE563373042110A392CB82049664B01DFBB9E8887
2C8458F352F083B4E715B0AA0650077431C6401AFFCB91036ED9EB1502D64929
BFBF4A474799FF92AB76B515CA784780833670BF9C5CE55BE7066680C09F9D89
2AB294B59CDA01F98274442DD458068A685ADFDBC21AE7CB5B5EB60B278CBEA6
C7619F725025B2CFEC7081457123A5B05E94ABE9DB2D7D1E62A668A5C6E75AEB
C1BE8F2E260434DE741B821A55634B99CD57715540308E63E713F3C24D0AF11A
161E21A6AB4CAA2CEDB47F933B655BDC693980EC5C299A4EAE7413DCDF8EC46D
FFBA04194A5C08618C6D25A8DC2BA5FEA1848B62A16237CF967FEE2B81492912
B4BEE355EFED7F84DB3BCB2AC04198E6D4CCC029B3C232811CF0E4B1F2BB0642
C8DD7401A4A3F997100B33CEA34DB3AA155F8D8184AA8E08CA293E07BC5711AF
71E667DF0C1F18DF045687C516B39A19897288D3727F3697AC9EC0E7C98310BB
A39C633FBC11A562B579A3F59615BB28B04F50B7746B752AAA791454BA018054
CAA7D5FA01A6BD00B820B92DB77892A7FEBC6C8FDD773D435E99C82900E8B591
ABF37C75D26D3B46C27EBD8B02EBBCB8F040C43259B56418D12C86BCB101F09B
CA1BD769969D54CCAADCC6B1CAA7D0302362C7F57B854F2A2920AB453F810175
EF25D0E24A1304B93408AE610AC27CFBCF33BC61AAEFC1D5F14BCEBA46268801
A7242F096223E1B942220680B972687519251FCE84E854B65861CA34826D5CBF
1E7E17E8BB6313D405946C16F7857C0A6824B3857B7DBDD4AE0D5F8DFCCDC6BC
6DB913A5EA62A0B19CE4467F53419F03BD0CE1BCD1E4DCBEECFE4CED72D3864A
224200B7DE4F47BD97BCDCA95A10842D940ED6BAF6F8DC627B76F2F0D5973779
73E9F3C74E1469C6BCBA90B74ABACC0FA34CE87A44586CD20C554B95622CF982
6F67032D121CCCD51B7AB164EE9A217E6777C29D47A4AA4094E08CB602B03655
E8DC4CAB4E5C79529C029F278F612B880E6C0852652F6DA0C886317995253EA0
254BF2477586B3F442B19379844CF37C6CF789461C66007164FE3EA9644A377A
CC90F8622365F79266EF99FB98B7C1E839F91D3970F526AA6E7B1225D802A22D
EE89D152130E616C135350399346C89EB0EAC3F7154057F8D9DB630B480305CA
88904A586C8C4BEB044872D98FFAAFEAB29EAE39AA80BBEA2DB3C4BC8F7F03EF
0C62BC4AEB182012E111A3D281BAA8674B6674A90A98FD299CC8FD4E65BB8B85
5448F5015C6587E4F6390692297D3B6A18AC08318A8F33AA3F24C8902D64DE3F
EFD4B81B661060371887CBFDE0AB7019321C75FE27F5EC786795BC2E0BE1A503
9306E7ACB892CD02DE10A53B5B0C3C1BDFDDF869F8EBA68BB9D373909C620987
4DD9353ED059532BDB779A84CAA737DBFF89F8E370FDCC96E84F5D777BB1FE92
474909CAB0432B7BBADCBC2E7EA2F0BB220AAB28BD84B2413102E78C6B281EF1
795D4B1CCDB99EE4F2E165648D3CB1045C2A4393D52FB74AED59392E6ECD2C62
877F4364E110C5FE569CF805FE5E69B7B8605ABC94A5D7AA2B9BFB59B85F7B9E
B0CB4157FCA81F64C11C3CBB7FEB76AEE2328BD0FEAFA35C6012E82802D0B885
66EE10621BFFD1041D1316A9FDD6D016FE16A35DCE85C51500ADF8BBDE3644D5
127BE302C060A5DF7A90E5E2C273A59AD9D1732467C81E6EBEBC429E582C5A91
A7C7A2980A9D21E9BCDA511DE19B6F68E308D8A48AF4ECFF6457B2206AE134AB
60E75530D0FC2AE89007E58627F4BC917796A1F00BF6C13A376466AE94325309
CD474BD3BF7764BD153594226054EB2F66F73D11731707AE1707DB802D55D466
007DD853BCDF031A796310D9F7D3ECD0081C645CEFB78D930BB7EF57D1CF21AB
31C6D501FDB60DA8D56BD13FAB7F65FF1938C1399D95131744ECFC95108FC474
EEE9CF9EA822931C483308F232F148AB54644961FFC503706D66C18C31BAF3BD
6866ADD6EC3DA50C909B29FD7F877115DFE5C957237C379C99D226F696437F8F
16933EB1880DDBB36C9E00F797834E7921889BE18B51BB6BFFC096BCDC2091B5
9AEB4C1B55CD71A3C6D12C84B1C8CEBA644D823574304D6655BA0AF4EEDAA30C
880802B74B9262EB59FA250EB5F5E780DDC2A6D3C7434DDD308753CC71827375
5C0E702FA755A3899D900B5F8F6349773EA838E4A3C945B9CCAE013036CB7E71
14DBDB3DDDBE18B2DF8FE4A6994E8BEFB0611BEA7A44241B3B4F82F3CD7226A4
A5FF1DB952D3C3AA2D696AC73DDB4CE52639F1C0CCE14C2C34903FB174FF91F5
E0D1FC2CA5B0FDE4B21FFB5F4204BF6DE7543825ACA0ABF6A2CA757D21621948
8DFC71B1CE4C7A24429277E8A4D15505D217E2F2AF421C46D72740812C359444
EE6725EC482EFBF19A93A9A9AD3788456A2FD31A1F3B837C6BABA847223FD21A
F99C51C7FCCA6A1B70D2FC66D3BFC5BBE0CFE6B34EC67DBDDADED72FA48C1F84
86E571B91AACF2D2591AE562040F3DF2FF44007A78B8170ABE2FE515B9BF6ABA
8FE5B74B8F08B73581E5D62B0C9DDD4E11D1C6F456EAD5FBE91363DCD0C42E0F
E10A4EADB7F9A2A0AA0C4DDA6130BFD5F72A01845F5C89C27F17EECF6FEE9D19
63F680B0EADEDA106A0B6415FA0704ECEFA8A34D6FFF77170497B4E8B1D4A9EE
6BAA89C26C733B7ADA7072B6927801B2BC0310A6BA2D3220F2563DA8C68FD826
DA4EC7FDEFDFB22DDFF51B73ABEF5D3080D06CAA2DE24CFCEC8FA073E8C2C1EE
EDC6CB193335A114AD95A3F1EF106A07A7860F3147100C6800B4DFE093B2BB88
F5F0BE988C30E045D2E6A047AC9ED6BB32C1266F69EFEF4FF1939E2F3FCC5EB4
2F7ED47E4EB477A7DFB00C7C193E0874110418835BE1D53EDF474280D4575446
F6B2DA481360F624AF49B0C1ECCBD25C888189A77FC8B3609DD8A8C84F0B40B9
A6AA601DDB9DF88FD1AF593CB95B302AB87A3ECD3942FE9903B712CF2234388E
5984EEBAA90F8B0240BD33D64D97F0B6DD03BAF39CB505CBC863D259A928EE32
A2F36FAE0F7C8DE6338F6D2F4883F994864C0B2F4B8A4B8F6268D0C6A90F711C
0F19C20D449DAEE2FD59E57E38DE9DAC523EA308C7F31755655883F196F291AE
84CC140517EC20296CBEFB2370E1EAAAE55E30A29A355CFF21F1CD045D0D9F59
FCAA642DAA9F03EAC77B7BCEE92BE37BC716B1909DDA5E8C936277C2B3A367D9
E2273A1F83FCE2CE20C744D4042C4EA3DD0AC1E3057226508626403116784B43
B5733EEF47DD1E49C985794043BC91C28DDD9C7C988F4C98A6F9495BD56E29D3
703B1E0B3CA8FE5D2EB96F94849DD07DE91C3615231527BBC3ED387994C3B1A1
59BCCEFB793CF762763E88BD114CCF1C22D6E28A72D6DD87C707DF1C8736F392
B34C33AE8A52D0D54726F56E0FB913AA0086DB44FEF56BAF394A07E40F4BBB1D
58DCDB2969F2FCE1266F79B83CE19CB5D2E3F0B253B2CFDA8E848C5D84CFF6EC
298C6183803B62EDFCD8012190685BA928F28D33E1D901C688540FCDF088954B
FE4817FBF4AF3599FC064E1509182A995AB299783F11BAD8E1B875A6DC059A4B
BB284F1421A3133B34D48D58211BE30C636031AC8EA24F97B0095CB4E98A45E5
3C5F0BAF69BB3DABFB4FCEBBE02A74B1BD60B97079468D8F12D3C080C2C6D3C8
013C02A3B364A4DEC9C9DB75E4AB275B3E692E087EE7870E695B6A5B0449D80C
6D9F058CD22EECBF2C8A29A9D060563FCF2BF6165F11E731D0F6F8EDCD6660AD
BCF43D874410BF7DFB61605B7A671F398FF090F79B87D15959E3B423FDBF2301
872D8E32917377456B125899537789F2D2137356FFD4362EE132B08322FCBE77
EF4AACE08F9DD5B220CE9EFD6DABE6A4A5AEC21FEB7C1546F2D0108AFDBB34AA
6648F09BD67D596D24462DA4DAEB82C223990B8A509CACB2650C540253D091BB
F5BDE30F0B36E2B6E21B83BA6A50222044B196DEE14C363C53FE9202152D2001
D108EF716AA10A66E909293EFCFAF639BC6F6955AED05D0424CFFB33406FD4A9
743C0CA7989B0459DAF5D9C18291AEF2BDB41F4EB1DE791F45D6AE982AFE6273
EE7E21C1DCDF53F3477DAFB4EE585353511E3054C3A3D69F5502BC545362A30E
0E22E618D3CF1FE0A71D1B5A3F191DEF8D43DF7088BE7BB9330A5D7821FF487C
0A8733A74EE1C1432D064C52E3B5420114162F422B267B3B477232A1579405D8
450D615173B0D53C6C4E49CDFB8AF995D0B353CA800AC9E5859B2BA4D1B4461A
75FFB21EEEE6DEF5A2A12B4491FC64841745D787031DA7DF370B85D42BC6FFD2
338D6D16A33EB26C3553F2E7EAB32D0A3CA3B5B66C455E9092425C695E490643
C67CD7589BB7492220DE5A6A7C27D6835E23E019548345F58B39CA9EA5610B96
C712E58F0726675EBD1E5377C7BE5F443E029F5D249B8A8DE3BC983DCE05E658
8F1A917FA5BB92FCFB0F9C6D44EE6F13075A033AAE912D3E27591F5D30A5F59F
B3CED5567135CA0DA78F2EF469EFB928F78586E90EFB0DF84A9E631A5740CF88
EB7CDFE9F89AD65FA33889F3B5253B8CBB48CE8D11F2231CD18764103627BEEB
78277962AE92CC57A9AD1646DB7FCF0B806282454DCE8703145C77C65C736704
F57E1F7C3FF204D8E0754916488E93297853E76918A21411623B935AF7421083
ED73D25207BE5CFCA01801E187F0B0D72E4878469E57FC4BD60638D3AC5BDB13
8AE7A886F8FB9974E5CEFDC2DDCD4FFDAA46128BD136F0B96777C41EAD96D867
5EBB61883C2B975BC7BC348EBA132AB62145D5C4C3CFE867EF78E17F567EEB5B
D87F58B7564BABFA4A01336176D314C887953284301DD5CFA29B41F621D84543
60A963874A0481DD7F0AF8044BD2EE38225A2A2B4A0FEED2543B4A554DF09719
E268E85ADA7FF56EB663D432E40D7011A14C78F854E2FC1EA116815C6763046A
66E1454AF37E76B56F581305457C130652F988B64853811F75B79D5E1830DF80
775CC33F19F7956FE8A34FA397E33422BED3270E5F070DFB01D41DE6EED80C40
85A1B7923D5983DDA4C11F4EFF758E80B679B559EA67C3F7EE0CEB97F4BF6A8F
41BA4FAEF019C67BC987C767DCBE369353FA75755216E8EB2BFCFF8ADA079C4C
A050CC89E59C87CEF5599CE8DA762B094BE2693D9A9D344D8AED656F7A4B5855
D0D7B0E975C336EC6E4CBB3E2A1944612029C18AB6B37A4802CF244F50D2DBEA
A0F58E70FFA85D998EA35D28DD9C1F1D469C06CB50C7CF6F8ADF99AE37C11C32
E0B613C60F9178C97C963077C55C7AD6C42C051AA20AA4FBBC29E49ADDDB304C
9A8C24A59108831371619BE97E1F3F6DF0064A797468D5817A8A4516F6D997AA
37479F3B5C882B0E51866A314C769E06E08F70EEB4D463FEDB2713494F5D92D7
8B3A767EF25185E7CD8D70E86495D83DB583CD66D567402D0FA1A4E657D1100A
EFBD479F2F22AFCD72B736C8556B06B8CCD62EA56EEAC0DCCC794BA5C1FD61BE
E87B60F581E1F320632C010480147013CB147A76ECE2F276A98FD801F06B0EA7
BCE093BA9C5628B3B3BFC8A17CB65A3002CE86AD14605CC76EDBDCD8279EF3D9
E5EF61FD9F3BF3BB8B00A377FA30C80655564E9ABA54D036268106B9D5F2F8BD
3B8BE8889E96DF210DAF0377DB328208693D23D8D24A84B492385E214AF6454F
39979BFCFB9E545E5869DF8E21B568380C8A453AA8F73031A1A672CC7239003B
417449A8B5432F27EDF64E69248AB57180F5EFE9B408D3228A76F045637B55C8
EDC4ADB96B5C39B44968B8014FFE338C34D8D38D75108C5D6551F17BD93CB981
D2869200FFE0467BAC9CEBBFD136D9E4E211762DCC294D26601BD4090CC6A56B
544BEB5037707C2ECBF9B993CDC99E349E4E27E2F98A3CF726A52513556AAC8E
5C90F1AF990EF3332E5F845405AF568D8D1AF58E95825A9713B3F1AF1BA610EB
0E7685ADF399CBCF3AFA8C352F167B23C642160BFEB3FE75383552EA8E582175
8135C97677F67FDA59920EC355E635F92E675778FB4E30BF9E92A4BDDF587422
7D3CCA3A0245FFE9665623730E775CB6692A0006608E960EA3AD387E830CFF76
6B3D38ECE65422717C259CE9C193BE4892C394733443DC63EEC5272472151088
74F4484C2F3B47F71C9C20AE72DD04C2721420C6C29CC7DC688B6EDE0D597818
0C02749A2F0C9C2928F5DAAD0C516677FE89729FE4F4834447A1DCABD32BC01B
B92394814CC74A446E6E79A537E8F49FB548523609C91012CBB0D1912E887C82
D01FD6A07B196FC62CB0B62FD6A1CF2A51F6B4FB0252933CC4A6059A5125DA4C
154AB91D3B684E21E8CC10F9AC5C65BBB9534D567A6EC429C41868D66AA03CEE
14147A446FBD920617E9B5A7728C2F05838A0E4FB12F5FB77ACE99957A2BE5C3
FE49B8A02EBA58DFAC97654AD26A7AE849E58087882F651E498474881AFECFE5
5D413726491E3B146F9F6BF7E98F6DFAF89C30AAD8CB1CBBD35C3B0CFB7A4CB1
6B65C3EB7157759344E29FAF1D85BFD0BBCA44FA901DC11959004F0F767E9F65
4698D23DE09189C00EFF5218CD9BDDADDBC7DF5F07F159CDD57E05FD43A9A472
5229E3FDE0485B953FC6D99BB46FE47BF91C92F0C04A9F252C7FF79A0EEA16EF
5A8A1051988BBA3658D26E6583CFE4DC8D57EFF0E3864EDE275A3FCDEEE485B2
83AF27A16A05D7D1E5456D781997D333A1BEDD9FB9B4242D9BC2138368085C9F
035E3AAB9748805933D65D411E7ED01F4985C96ECDEB865D15DEACA8078402F7
8F1ED452B74F4BB7E9110D616BF253D07594702E2A6C5C1E7E85F22E7E9624B0
285C4AB1545213FBD8E2E50761DCEF5E03BD6AE4CF67600D27E97D48E6BF67F7
9821A8876CC77052237B761B988714E94422C82349E306763B900502857B584F
96B5890EB5A6770DFE38875FC03D135B60DCF5A01DADE6BDD1E223D271923FB9
D7F7642CC13D265F87E6F25FA00ED1BA172FCD593D4BE7C86ED99D9767E53487
10EFA108D24F4AF548FCC292E6C17495B5571292858A62C94AFEB5F549B1F984
E8440AFB8247BBE84456245D33BF93FE04FBB33BDC332EFD56DA1B2C3D52FE92
9F2AC23E251080B9A6402D0A39F95F81F83B4DC668DB10C9B3AC506D48B82641
1CC70B85FA7726C11D5E950B18E0E0FF7EBC66567574894FCF10F87E2D6EAF5B
9302606276505C1D7A2E98FF9822EF65DEA47DF431E1A1DBE4FDA88ACF908C44
F35B9A51836B42AD8FF41A2E317DE7370EE2EF5FEF8950E62EA29B6B7D765D30
B1403011C2ED010ECD0AB64E56F75CFFDF3C60C5262AADFC3E4C64C699B9F79B
D26D15DD52C830430DE2EDD1AA4CBD066A880F0B543F6DD53FB7AD343AA6DB6E
9F935F56C8DD69E8196C318E15DE5EF9DB214DAAB3E16DF89350D4D042A78193
66053F1C0D50D50251BD82D6DAE2CFEBB473D69D6CDA133AAAD3F5D9980053E8
062ED075BE57FA71A2B2DDC8AB4228D10F1B1C197BAE26ED0403098DDC2D5D9A
C30081FA1AAEE6A4B8F09FB36B41AFB84FB0365556548FB0FD0806C1D3FCF590
3E055F04A3AF7095962685172A22DC3F9784CD03D0B7D8D6377A4BF705C2B6AA
C3C982E32F0316A142F711BD287AD00BAFB05F763081135D43FE60A6271B6B12
FFA2C1A51420D6EBF50123FEEB2A29ED76EAB42E2CE75D819F40F78871DAAD20
E44CD3856762A20489D2238C59F10C9F0B870902397BD43ECE039BFBF24FCF25
93E33B84F754992A2A02206AEB77782E498F57B56870DF14DEF5D478CC6EAE67
18BFD911FBDC7D102F6553665BBA591699B9ABEB98CB47DB793928EBA00D43B0
88108AAABE8877ED78E40CE9F42511643521DA8CD28798B93C0B2CFAEF4B42A5
DCDB4CE26ACACA99755F2DE7A10A74655525E1F7625BB2473D5E1EB07788CADE
8D0516CD942A5C5D81E5EDDD2403C27CC508E21AD1465765F62D6EFCCD45ADA6
6E6EC178A95534D52E8123E87E45DA3777007326DEEB0CB19097608E8022A672
D7F110B6D56C198D5FF263DD227CF4BAE3054113B6057E5519803D8FF9E3438F
1F5E2F2E0974992641F655D17F930DC4D7C79488ADD71C8781CA24F214E01D5B
59479F077D3807C1D83AAB22592449D6DE2A9309F4D8DFFE9168EBFA6889B2C8
F542B3614A82FC09FFB62F1C2094973FC1C4EB34E6631D54103F07218F77D528
1A751628A6EB88BA268F7A4E76BE8827C021D350F5EC28C23B0309F71F86B5CA
8DD0FCD2C3EB554EF245572CED74B86B6D17FABA2A4E6968DAAFEEAA92C7E281
02114E944565FC52F3D2278B1CDCE5F3BF90543D83A1DEFB2B812966DC2B6D98
92318F750A4082DF2D69263473ACA3E3D08246CC3F24141FEC96DEB1FE2E270D
7D6A200D067CE1F1B9111B320AE817C6BAA1443D510BBC8780CF0B8483A63865
DAA17A6F862BB9EB02E7F92D97A046605DE6EE1EDBA2F964463728C869853D79
529AB86DA67B74308449EBF497991721E59E3EE5C0941F548A767F7BDDA03E05
0BB59DD06E50DF4C8CD443B9462FC667C7EB64270CED130F1DB0554CF012E879
01BED585889B7A74D266226D9C8EA49AD57132A46A62468CD42AAE33B628CC2D
DD4D1F1D667891C2FF9B245710D6A33E36D99A25FEA19B20C2EA4F52F2D5A6FC
15BFD96677CC80AEB94135702B1270F4CAC4836C9CE98958FDC91FB4430460EE
352757EB98219AFDE394B87C50EF4BCD39768043CA9E5979F98FC02C6F79C8D9
12701B212D5706B8A3A4BDA0E40B720973B793C022E57A8F5618AF3A15C63BD9
778E4674CB71A098BB9C0CCB9F5D5E8248AFE9DD8CCE07F8693A64C0306EE954
590EA06CD532DAF418DD364A0FD5389205CDC90317158A6A3870F4E295919B6C
21813899DABFDA67BB57098C0E7B261F47F3CB9CF038DFE60D21D2BC238D7FF9
E589AD765AA003951254E4B3532C1035F0A0DF84A99F06049F8980D7B2E198B7
CAB131F9326EB620F01007E6BE5084D3F5951AE95D6E720D6D64B00BC7EC1E4B
C791D8C442ADE6693BA43C6CEB096E1EB65719992440A4AA54CA679774F7275F
979CAA21F8ED66F8C45E8E241E82025EDED25FD444AB0D36BAD6F716B76C1630
D3ECFA6CAE4B07A513652D6F390F9CA3DDA453F27830B0824D8C3E309E749842
66B4FF788DD3CA46A320059F6BD41F441E3D95FF59DC845228E41A1C9297B058
F766AAC3908C31F70FE3D7C30F894BAC7C7EEC82C1F48D77291F134E589FB91D
0D096AF2CA015E70C41DCF541559963D41CF17426D43FD2384FBDCEB6B8C3559
4D1B4495A4070694B5F3ADC79AD9B728E490CD3552A536DF5589B55760DCBA86
6A4D4AC466FD6406841BCF6B5C0BEDBE17E05EE57BE0A095AAE4EB6C71BFA528
BC37EC11CAAD4E77A257159672DA4FD087C0A84AE5231D2AD88630F2988A2A3F
277D7A2DB17DF0E6E716007D4736E565B33D11D7250C3979789D54945B83732B
39687800B0993F8A45EBB6F03F3951A21D33EFBCAB4D60DB6D63255662920124
00CB543CA969D4BCBA79C06724FC5BD0563B000FCF38AD890B3F1C41998B9A4E
331F07A571FF32273455660B473EE23E8DF36673B64D232334A05E4739598F8B
F9A04D3706D4ED2FAA87E2DE16CC9A3A3506D6B9023779E0D279627CBC42AE31
9B2986BFA6395A8577AB1CF59BEF5AB6834427AC5A4BD298639FC0B63C0BF9F0
B3729CC1FE31D1A991B4DDD03196B4DF893ABE5E1F3B2D9B41A0C49A2B67B3D6
69222EB897C52C9AEB30C16D059B32CA4FA5A9B04DFAD2BBC961C5C4FB8BFC12
A8F8D0915414ABB6AE1F73FCC07DB8A428C95B3D4290B22419E1E11B32AD73B1
19983375E7A12D769AF81C70FDB574B6C573BB76612EFAA008710608889E6FE3
B9C0ACBE60EEC5049CC54ABED4D04617C97598BFAF63AE143B33CD0D6E04C2D1
4A98DF8C7FE0E3BB3D8CFAF370C649B515D9FFA8591142873E641FAF337994AA
6020CC77A2BBA39D6C1DBCC5DBFD3691310653F4AE7E2DF57C4A86D0A7526B13
68AE5FB05D97D59FC108B60B2A90D4B5B31F95955AB9E777386EE01648F059C5
5B970F8FB2D3E887F5A574337FC21319E837B6DA24F6ACE8A84440DA399C2D41
52E3DEFEDBB93C93D1138316E98CC30F7B3B6EDA5652BC3E1D9A5F490AA5DBEA
10036EDAECBD7DCDA0122BCE0BE88EE1A145FF2487EE9FBD3E2EB787DB9845B9
9B2223F8B50E55E0721C7695A68C9FF21D929362F71C0052564A56C3BE7019BD
52BB9AB1D5CA59728AE2474C67344940A3754B758679BF2F7D98D2CD39C2DDC0
AF7B89B157DFA822CC2B9D1EDD99D17429E3CA728DF0CBA221C1CA701A4A7657
E2D7E79503F870E2B10C0929D490B3B05DDBF930A95A2793E75F276A7E9D58DC
65BBC383D0428D44DC13F9B43324AAF578D809F44022A8DE50DA6C02FD759A57
609D3A40DD02BC5DFEFF8C14B3520E806C672B009419B4365D47383011B7102A
5B3BA511C2A45CA0E41863AC772C46462F984E4C2F79AFB73089BB7C9B9F43AF
AE4DCC2B14C0215CB225405980F49E10B834434C5DB962EACB6BE9E0F3C7FCAB
C8842C30E065A03E0EBC1595DF953D672E73B8C195DA95AC03E0E1D5D8FBF81B
B9CCF55C132A6598AAEEA6F1665160605B5F08177B1EC56C158D34CE8DA86C33
66DEB2C49685407A33C2FBD0911F32719AC2E37F14DD345D9F20889FAB553691
D728FCAD91DD47A808E2D36D6C563E73FC86E32B4ABA6FCD8AD9855958BBEF45
B0E1EC58F81F8657BD2793E49A64082B7395F29532E8CD28DFA5E4F71E3A4B91
3253F182E84F89FCF2568DB4E903CAE5B5EB7C6C6DF366763A9E92FF85EF5FD1
851C3A52C2C613F681F870A2FCDCF29B52ACC0901EEAA4F499C8D20F208E6DB8
4A29E5AF8DAD556F0AB3CD479B78FF6E7FA7A22816F60CEF24AA81CFC8EB1BA2
4F675837EA7C015C9B1604C2DDE9D5925CE1C8BC366547D150654C571946AE85
8F2ABB3D82D6101109771A9526934938ECE6772478482FBF0C12684B8AF9F943
F9EBEB5B32934FEB1EA21E111317AFBF167308228149E38D476DD17E5DFE061E
A75882C014B23BB2CD1A9938DC35EA2EDDFDC1464E19DC16B3DAD51D46CE25AD
B2E83EE82F23DB38521ACF12AF58BDB970579A884F74D2DDE66AB398E85E9E9E
3A22F01620554B908D47093E85F4838118F5D38125CEE0573AA5BE378F6C7571
B56BD9E364E4643CAE0A3BE7D7CF7914B45467D01ACFEAA413F75A62ED44E3B3
F5257553867D84D8F724AADD6E10E73016086D2AA09D453160F1032C2E9C7E65
8ED5B7C0D1369DF63B7F69206CED0EA3E6043D19172AE7EE957AA4216342E9D7
131B88A3D50082A9CB14582C29C2A38EBC3B5FCD3421AC6BCA641A5020158028
AC1FC23E2C73209C7817D9D2AFA2CFB207578995
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX1440
%!FontType1-1.0: SFBX1440 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx1440, tcbx1440, labx1440, lbbx1440, lcbx1440, rxbx1440.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX1440 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-218 -316 1652 915}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA0E2F461BA16EADB32842B6D00C76EFC613FE56C
378A7118B0589B3EE5425457AE310AFB3829876138A59F58D965843B709A0F4F
D1AD54875BBADFC803A755669491D9E98262991B9634084E8E2BE46EF805B219
D18DE35ADE9A8DBAB7AB761864BFB6A27E5B421C32CEE4569624D9308A32B426
FCFA5CEB883444393CD7A58F9CD522BA73E17492DDABB7E00B2F6BE47F585EB7
FDDBFF33F1B5E5465287717D1580105BF3929C09EC621CEE9606EC49D7051A00
11935EE728A2FD47BFCCF00C93EE54910F77C1CB8622B9CA129D466746BFE1B0
594A9F0C785F6CA67161EA1480AD4EC6781B9CAE9536F5D3AC6D447F16821F77
AE2705279CF3DF4E1E9AED81A0CBEFBD61808E2D59AD970264A5B66D1F399DA2
55BA0AAC8EF1A1E16FD8240D577F5E00E0040EEBCC193F074FEC48DF30882551
E23D64EF84283F9640AC5F60EB1F26CDB79078AB0C0D97D1D6297D092380D4B6
6A2099F06A513A78A3C3B82A6DBD985A0DCED7150B19FA42991A3D408FF95978
15D309AACEA8C5C0AE812F50330CCBF47B4759C550D49173127DECF05D783DB0
978A366ABD3CA7D9BBB6652459A5E19F9630CE75C2BC7BDFBFE0EA3D8098CBB1
98CBE02F196C0A0C5E976DECE72778358CF8D0A79A8B5629A6322716CBFBDEE4
934E8782E716185235712845BBD03896BAAC6A8D34B401B6640437CFC4AA0549
F63554ADEA6722C5BA6E735EEA99141D41B111BE76EC06E71C4352EBF9531132
BA9B1691B43518BC2CD729782B8F3C96ABD1F238BD9CD383A2088633BF2258C8
0CA614D989E393DA2ACD160FBC1E78683911C2F6784E57D47A89929306EA03A5
B5B8A32559077220E39BEDB251F465A8A7F6EFAE206818C7BCC1532ED7CB27A0
85BA2FCD1B26C54D2E45D20FC44F8D27F0257163E38FF1E99D5CD7F8FD64F111
8B62049798A7440207EC9D35F32422B52E7741204FD93AAC08F961676204A8E9
FBECA814889852ACE42427B6BA92129B71295D0F02753A2401D49B76AD3F388B
2FFC563024205C9F1796FCC3A742F71DF496203987018C30EDF91C09CBCB3004
F5E43D8344D989BCAEC8647D059B71760B60699103C02B591D94085953AA427F
2F88AFD887B22532E893365A5DA56EF8A06F9C98D380F11A63AEF0F5F7739EBB
F62B2836E1944222C1D6BA5AA4FAA3B9BF4DC0053FB78EE1409470CF73E1B9EA
80DF701E6064C6850F19456E253C117C8DF93ADA9D54DF5BF9912A9833C02C79
7491CA4AC0FA3EAC58EA3CD547B097347022B082A46E0B4ECD8D4C9FB046132D
F4297497A9A961D5669DFBB1A8BFD8B8824011FE1CE0B3C7A89D0F341A1FF657
90FFA9579729FC99474A2B299F4157B453EE4D694987D9A8FFE3F3CB3D71CBB8
66A80D47938837DF75D2A83943A8BF68ADE3EB55DB14D5999DFB2F63B9C93187
261F5151AFCED1D207DDD88194409C9107A29D15A7CE24DD0C1715E3234052F3
014F9B6E2732EBC81F6CF471FC1B80589515CA27290AC88D73F310DF1AC75EF7
0DCC9FD9B1F3E105BBE0EA6A46F3E5C4489992EE1A42C19DA52F0907FFB1B5B1
FCC94F9921E06B4A2EDACDDE814B5859328180086F32282A9E52E19C63F338A3
7DA3DE886C3AA6D9B5953180A228469E6EF98913D940B5B7DAD5BEA5C9F9B9E3
6C5B1F99101E1C975A8ECE514E9070A1618C7C49D42EBDD432F590D40A7C22F7
7A499B68FB92C6E63D1B0838A6D0F96BB81512FB73170B7EF67F30AF109ACA1C
43F367FE67279A477BC201B7984F18C81BBE3FBF1A53CB338FE6461EEA5F19ED
EC6FA671B0FDF9B94F0C041EFCC25AAAF3F7A11D5553F3C5C3BE5144CEC2AA1C
D2823D9C0B0D233256F519E4EE30D7ECD2B178AED921A46D8180CB4F788724AB
4F8E511D0E4B9C2EDEB5BC591BB36E9DA1187B9B5D4A33135AD1575AD2C50C8B
4D0F436249F4B8A39D447D8E546E97A0B7F329370C4679B0963CB8591A3267B1
335BA15AD2502BDB72A4C27DF34CB09E310FD1644CE582EB7FB04F000164D053
409ED44A232B3192CFE4CCFACE7C7F381777E4EBC7FE7488B9136DBB2C0A46E4
211725382A28319378A6C2E3329DFDC3DEF48C103BDF468C457AFC1E7C7240C3
FEB61D52F5F0DF3BEEA62D1457FC2C28B175A3C2C68747915A3A5A392283A083
ECE851AED6B9B7931376C9ACE23E946F6907604A4AE4955F7612B5614014F2B5
8F413058DD1E8BE9F6E60D417AA2C31AB16048BAA97EB497CFB636D219A66E4A
1F2215F531651A4B1EFB2CC9909EE450DEA6347D6FBE690A67801933373072F9
75D7E809E9A6A9F68CABC841D1FA8AD4FFA47B01ADD904DE6BB773622E19104B
8C9C295586F4932783C07D725DF415E182EC5DCA8670240CACCC14FEFA1ABE01
4695DF86EE890025CF7AAB2A7C63CA9BAE1A9B31BE82236C7C3DB751394C2BA4
39C4D7364996474D99E57993DA3B42F8B404028E03377F7D1E8D4615793E1891
DE1925EB8D81AC0169766CF325D2AC4098AC454C2DACFDE349DD187344DC7F5D
3526AEB9951C726032A8167F66C926BB6CBFDA512188B6CEC6B288C6EBAACA33
6C378E1C5DC3B29A1E3EF8957D20F4464AC49E4B8E3821635D84B7620CD8FAB4
C5018F5D8DDD07C6D4AB3A78C3F38938DDB124C54B17CA4177064CC7B861325A
9758F70935D55B1F77C28A164DCFD2DDFF0A83F38D5CB26E31BBC3A16D3277C0
11BFD362CEA734E43C2D227D19765BAFD457E9174BCEA5CD545DEB8EDA3E3D9F
D637C98BA46A6161F9A5B39787639A1BCD39A8B77A80127C683CBD165BB74619
7024694C64C8DDA0974697361EDA9FFAA4F94A60B091FF098A829E5B54AC89A0
6067B37516886C28EF30DC67B3D3312638879F4A10EBF89944EEDCA432703037
321B332CA9C483A41C4EDDEA523D0D446EBC550B5FD71A55FCAC59CDE1AA1646
FA00A2A1ACA0475A6553477D763626A7494944DBC6BD6B8F8DDA5106F6C77FB5
58D0AAF789A8805F8D7366A67DAF2476A28AC1D042030FFD1FEAB98D407DDA77
0F069CFA8AF730878A978AB67E67E2395FB8D69CE96AFE1471D485F5162561D8
1ED49253D2935C676165F558F66269A550A40DA90AB5C4007CFEEEB699048721
F9E9A0C65B29FB256F0D7AD9C42307E9F0745EDBAED37CD11608A5E06E4F7ADD
AE50DED5403C4C5AF522389ADB619D0DF87E5AE87806E2296B8A82233F708F96
7186E21558A0F03ADC8F33BD1A9CB33254A1DECD3C482243128A17FA37115F9D
3DF5ED49D572D379CBDC056EDAE16884CD13FA687EA3E12509900B86C49073A1
F6B1B9CA71D375C705A42ABC57F8601D0C9AD652E67D314778622B61453FFF5A
FC65829CEE27DEB404CB7C464E2489291A7D5C1A1EE4B989D3A78C7B7DB5A1BD
9DB81BC806F4206253C2DF5B4B41866B0093A78475FA18A11C8FE5D405B78715
20582B40F2E8516290DD4760DE6AE0AD0AAC6F1B527131E7274EEEAA28E27544
7187048ABD8C42B329EAC163090F32BE371B5DEB8869224B6813BB2C0883CB5E
34F8957D20F4464AC49E4B8E3821635D8DF4EC52A40D1B334269669101C639A2
5CD6923BF142CC9C0DB259868EEA52E4F9C7D559B57C1A79399593D71AEEEEAB
C20A070CC349A0F7AE66099CFFC7248F4AD38D6923DA6FDEE0439EA954766C4C
14F8F9B826732A711FA2B81AE01A9AF35BB0C43821F047EF17DB2DEE1D224BB5
AC76835D94E3FE7A98C25D37FF1C96F47B840E5B9E736C67753A428C7203ECC0
22C0120A16DD84FD33E2C16DE4DD0E382FD468D8E48FFE92F26FEAEAF056A939
5F60479CCDA45423AEBB503706555006EBBA3AF7681F89E41AE813CFC6DC9150
90B391755F8F6DCCF1D50321133C0B7A4C41EA1754A222802E54162EED9741D1
2AD5B006309540076A997218EB1A6ACA2C0CD206CFB809F4FDCD35C29E479B09
0E1470EC6B850198848DDD0D5648CBE820C1ED09CD211E940090B78B9ABC7684
724C6672A2B41F7608C1AC7D63DE6FD2822C03F85953B2D68A170EA2494C6306
635F9B5BE548F6E393318AC9F32D30C245DEBA1EEAB8080ADA3F12AA5547FF50
71BBBD6D42C75FBD2BBC1AE64F1B085677383ECD7E725382A8BFEECC5A3C5EE5
5797D55FA6D2DE2B234FBCB5D8FF066C543000657FB68AAA09D5E3DBB92B55DE
E274A3BEEC8A716507690C6D4D803EAA84D8B5EA4675B669723240EF44CF2E48
BCB385791FC9EF32222FCCFECD3CC759CA120094BF10839C82DF83FDE3D2CAB0
4DA8CBD6D483A53F645372B2196514250BDD3158A163E2E0753A66DCE85044D5
A69FDEA6C8711685934690F9B8DA5DE01179A06050335EE3B76239128E786995
0B2580F28D17C685E49DA887A4FF26D3263B0E4818D48ED571BB338AAFD9A3CE
D45628AFB89219F39812EAFC0951F619BBCCF098E24AAEA1DB1F0F58116E052A
766636F5424E6201809440D2631E0F71EF0386A643B9018D53D5DB273F229478
4A3E76CE357DDFE4E797FC5FFECB34911D895F050F420D81E9DCE30909488440
4A8BA75212F29EC4BB71F3AFCD0020FFD3FBE4EC8FA718D977F90CECFA2CD239
10B38098CFD1568C4B2107EBC1EBECBA9FA07AD35BEA54BC1AE4D4254298EF3D
AA7BE47741F7240D52145DF4603715EE10735BBA4D7398F96553720C98D0D9E5
C25FDBADCECBE719D8674DFFE102DB08E344A747E3F7FF9B3FC935C17762B43E
6F1E9B8953C99A8F75821E43E481DF6360B8816810568B505F8FD5A8C4F6D0D7
FA8A243950BDCC492A24A9BC12C952BDD61FF283B92A5D2ACE5902EBE49E918E
2730C558421C353204010339CD7657417FE127C21585D0BEEB6F42369D3D5350
009CD7AEE826D25D5A2CF377922CFD095012F32CE21205CCC608F630B2E9785C
E304B9DAE508C15C00B48E5487F904A1126D83D2A49064FDE9129772A729C4EA
FC2F760DAF84AEA8C227375D62FC992C52B688E51E221F5830772933904F836D
E7A317F1FD1CADB828028E263211888C6CD39B5C3A0E3D76B433987B22953C50
AC9428E88173DBEA327228CF763A6A03E37A5B6AD6B0C147B1B36F7335FDFC54
96A7F256197AD8EE1F44A32C81C2F455F34CD9E7F0A245759BE1FB6B4CE66638
DFA395B1FF3918E6F23C7D57F379E9BE619F524AC0F9A2E61F9BD44C03668456
F7004A912149E9FA0FE557779402C184A4941811EEE7E680014A1E8807AEC73A
95FA437CA48639E245DA25A3A605322D08EF50C9B12A339E49B81EF1079B667C
86D9B96239829EA1304FFEA19FA70956992E2DC8702A0376BFBBB4C4A6C01F93
17BC4C9F63938E88CA3256ADF95E7E78AFD1B7373AF534CB8E4EEFF47CCC7FD6
D67BFC8B239F46DD76961F400C3E3D9F996263736D79A3C2B91C78AB276476ED
15459D627A9E65A1323BA915C10CE56B803632CEF2F8B2F2138E7F06D46E1543
03AE2831F9B1B8EEF3DF08B8792776E730744DEC36C39A00E79A4F868BF0E582
CE59DD828F4377FFC20B03CEDA4C842ACF78FD68F4EC148184BA941F87B05B04
A4463610AEB3F1D52392951B81CC79F4ABDD8F935B366D4EDCD2820D4F3891F2
62C0C5D6FEFAA4277EEAA9284966E210822420A9A4C7655BC4EEE667C9416EA4
FB87B4A4D21B797F8CC137929BC8332375C90737CE43B159398C5DC88B9D4627
C0C1C47ABC36A6AB34E1A3BA5ED1F4A1494AB80390E2A67D5E1BC4456098D9EC
779487CC6917023CE9CEA9482C7C38FF0224CDDCC3983756CE0D57AB326F1A24
B0B5B2D81046B82A418690D008F38214769310D38B8C0B82852C0E40A45E82D8
93F90256A590CAB05272F27B03AF9384B6B0576FF87B56195E0156ED0C13A960
973A0CD9B17F2F4397976A72E90E3B9DD8A124787F32D062500248D94FB243BC
6C66691B099DC010BED9D23814BD30EB76410ECCA51171D67C102BBC2A346F26
50B1FAC2C63A314B253D543F81DD5D5A7340F0C1768AFE895500FA51579F5F0D
88CD5439E4D026283CAD4140145C03B42EB816557B3145753770E18BB42FEB86
54D3607348DAA1C40BA6CEDE663827A5F25BA96256A53561874ED25EF4F760E3
12A1C78972B31491F9B800144EC0051F70FA13C410FAFAC56DCBE065AEF0EE4D
26E27D57B9970705FF8A83B7B4CE6AEEC6128A29EEBE373DDA7B54BE6CD705B0
7E70CAED2262C8D914AD834729538CEBAC2E727754189AF4EC871967BD941D8F
7EEAB4EE2D502C4E0E4FB09B4CD634C5E6F4EB5BE82B36CC5546526918E11E7A
A81F5F04BED16FFBF4243F8DE58E8097DE610F15B761168009FD6214A6BA9FE7
F42F59D159967370A7D562EB02A302BA4A00DF71292C202B676BEF8AD91EDEBC
CCB2990203492727E45FA87477C089BD5495A5A98EAB24D42039CE379BBDCF53
2F13010889FE59E50851DFCDDA6EBCD68F2B177AF767B83C90948BDB82ECEA94
395D64C166797ABD092C0B8A7E776E58C6B20E84CA30ECC8B014414AF95B04A2
21533C6BD0BE33353764348231C0824A275DDB6A89D89F5081F1FE0C10EDC3DE
C832CD24AF945BBCA871A2411CEF1BBCE4900C957D7FC66A801D6CFEB3517691
260FD436684182C9B8FD83A99CED31AF908C354D5FE8946BE2BEC59D67858007
3AB238315FC594A3F3DD4BFBCFA2CC9AF57F3F67D96AF82BEF4DD1F86726A6D4
518F3068D9C8F38D87FC29214611C32D2AE1AFE2C9A7CFEBF5854429F683EFDC
BD00F3FF4B5E3C82060040611396581F1A77DBFF8FE4041366A8A106ABFAB960
C63167197E6BECBE01971F293CF8FB11761D1070FEA8792D56A6858E19DE76F6
F7CD966237C791B7D6F365C8CC17A2884DAD18E0EB09FFF0035003C809DBE560
FE041B084FA23261C8E621DD610E0F68F85FA61A4A98EAEB075F267FE886135C
D0DC32DFEDE301EF9FF989C86F97911BBF5B906E95D61B5348789BE20BB629F0
876B03D446EBA8C68A1C76B8A0EDE1A3383B5BF598FF605ED4761F86D4546EB2
FCE9A3CC455AA3BF9AC2D35638A2E81600EA4C95F3F1DEB3A0F432DDB9B00355
5AAD1BC2AACAF34C727330FD4F460F8E24F928A4F19BC54EE197A6D96505DBB3
04B08E960DB9D33D6AD3777D15E08308220151C98268B72066E69622F5FE701E
68DA4F39836A37FCA0604E225B4B53009ED1980C4CB0D911B481BC86FEADDE55
07E1D03D9328B2F8C878A8C1D239AD11EBF80D988B018FD7A1BEBE4CAC809746
1684D14FE0ADF32F5E0F9CA5CEB8950D60E0108AA71FC346A14852C693F64A38
BEB5B24777F81CB8BB33703D4C52F2D5209525947CFBD1D90A82EEFFF8FDC074
490FFB3EF443165E8853C55485E1DF9B7423E732584E8F50FD61EFD84E2890B6
222AE4AF9E2AA3A52709BA37237B9D1D10BE9FB1CF4AEF4F86E52CADD6114791
A4C6D52F763A923535CC35763C2B61D2B1E6D048D564C8D315AEB1EC2805E1C5
6025CD6BF8A6A22855AF937CA5F3ADE54C2F3665F149788BE8F7D30D168CD79A
A7CAF3D7727CE95AB51E299D8D269904F072B85E8D95DD1DDB021C299FD644AD
1CFE6EB8A940A342B69A87062DE8E561E50D63580B9DCE1ADC3A94ABD8C5C4B8
CA4323981338327D633A38E57BAAA57A721CD5260E54AC351397C72508A070B7
7B336E8249BE13904D8F6C7B2BC39C21D0DAC017324C261B59B85A764A7797DF
2E3C076475AC946C9E0ED107EEBE2A7267DAFA80728411956761169D96518C4B
E4801F49E97A57EEAAC0FBDCEC1FFE3E179E1F9C4B07C9A9ADC3F860632FDC2B
01235E2F3EF72A59F1FF0441EF2F23E14563985F0A52B32BD3D4DC6FD3667910
6008AA8FAB2F587C4B26252957EAA9071AFD7E40645BD34CBE7F2C345012FCE3
DB7EF70FE4AB62AEE36712F85072C69C8D84107B3BE8A5214D31AE37B75DE2D0
CFB8AA39A32ACA53345A9279C832BD43555041C9F9159AE8DDBDA8B72B33DD37
3248E30F6EDA6B2EC2E8E6B52C90F40A651EB58CD9A51EC815F3B4BD4BECAACB
AC55AE86A97EC6F6BB356476E639F272B80F589980D2293B26FF71482CF10067
5634D4F94DB4D82AC08870B85EC01122D18B276BA8E8B4B8D4460964BDCCE277
4A10345548608A0360F9E92CE5A90DD050DE539213F78438F7C5A6B6186C2372
2DFBEE44919FE6E8FA877A8A828775F72D8796B3461BF5BEDF78334906C1EFF9
F30C21D88DF40F5A972DE89ED911D3F64F58CFB1CB9BB3D33A8CD74C506506ED
E0ADE7510EBC3886D0F75EDEB96045B16131155B0BD330B89A5085D62FF9877B
6EEE93808B3A1731A3132949665568DF45E747C966E52FCA8AAEB267F221C6CF
77260EF06A36554B362BBE9F6864EC7978F14D1AEFB4EA6930498983A7C93144
3862F1AA886B0625EA39A85C03D7D0BD146203B9316153F99C64AC44A525B94D
D367872E8ED121C9F6D17EDD30D917346C201C334E81128DA210F54900CED774
1E535F15C1AE39464539C71F622655D8D3B063CC1D242A501B1BBFA603E6F124
3DA02EDEBCCA49A4BCEDA32E8C1474730FD83A69378FB5974FF7B24720FD01C5
D64FDD900BD8C39AC821B1B553C41877F96633EB1DE8BCBFE2D67F9DA4FF1392
F76983284256E76545589149E1D61A1EF51C33544ED0385218DF0AB5250B8DC6
77057C85B337C9ACF326028B67DA69B10DABAE948FC2E7933316B55FAFAB1D57
800457D49EB04B0C4F45030EEABACE29995D5C68F3E7C7CCA209E3EE4FD459E6
F729E7E3BC021E1140AB19923A496E1D5AE0F672BEC53E2FB0A7BC894B5D381C
F175BF4A02A4E4BC0B86725417CEF963256D20AEC80007ED25003A5A7C0D8E2A
0870049D7AD9E5748DCE850B806B1C7992AD1878F274A2ABC159B62205045BC0
7CB787C65E68672DBD3DDC3E04E2346352ABBC0B9AF153F5875F8F4AF373302D
06D056DD4D243D4B23575DA9A1A1446F1E9821878BB5D9C1206128E3277C19FC
980A807C8A43022B9DC8F2534E57EDEA764DEE6DE41EB59CDF30087D62B042DC
479AAD1947C8187FDDC20019E76A7776F3E22374D750219DE16ACA00CA1DAD55
8C1E773C6254A09349DF9D70DB7987C808BF0C30DC35FF17DCD7B8E9C4685E4D
9172E11415676A900ED0A44CEF60ADA5A18E98E979021AD4F36E015D9023145C
4817CBC33E62ECE9B0EBE6B76E576780C1621225A259A7CD8F1F3E3A25A9CBA3
A0F8E5789F7B233EF668556FCC77757E2DB63D7F52001F9FE6342F5FDEE8F138
9C3B0C915B4735481E2E60F662CBD3B859E8F144AACDA57D2501D7F342FB70DD
8196DE1FE3218835C4F50F6C8774E0E6C83BDE72FF385D523E5A083C3C23C33E
5DE59E8B8118329ADFA510A2F1841B063320504287EC58C2D85930BE230E0770
73A5D02C1058CA7EC8E66A557359E8A9F16B89AA0C3AF728A6E1C161EB20D1D6
F38430E6CFA55A18C0387DA9BA9ACAC69EE7B5544A755053175638ADDE775257
A3A195F358B50362E940030879C263F53833C5768376F415339A2A90E2DED1B2
4FFD726EAAE7DFD30A7D0644DA444266426ED9FA29140DE0A9FCDABD706BBE5A
33C6003F232928E0D27CC8629586EAA470CE3ADE6D0B9202E8376E7953E36945
4F04F9928D160218A9711E2BDAB17C31C4CE7A17C95C439EE695D6ABF22560A5
6BA1D8874F38BA2148B768F0E2D30347BF6D8E4333B9C9CFB1946D4B10F94D80
968032536580C04714BFFE5DD501DA55A002424E7842EE90C939A9173875A6D3
8555035AEC3BE79DA8BD45AF96FB8DE6FA575174D0F6B73A66A4D997BA5C7B78
DEA50B9C7D8AB11816B17AFBFE1DA14660090D574E7E9D13EF09E70A0A1A82ED
C3B251621F71723D8E8FA66C847D03ADBB9E1FE8ACE827EB02838810BE2AAD3C
07E45A7240AF9EFD1C3A9AF10B5A102BA8A11EE7DB35499814AC154AB3F532F1
16A69CE12762E86432CCB7C6882C8D3CBA8646E00976B911A5E528F1FEB29551
BD89557FB4E93ABE920F92498A96B28CADA964221F5BDFDC230FDEB1AEB1AB66
8F3A6F176FCD69192ABE77947068E41075785846ACF378E3BF2E5B73B5FEDA0F
520257508F4ECE7FAA8E0396ECE093F28EA29E949C9637F965219C6624ECAA60
2125D91904894944BF936734B1F575D552A1D270340B2DA6E3FA3B012398F3CE
625582BC712F2F4092522739D920F7E123F4C8F14CC69C8279B1B71728E12C22
588E5E558BB4CDD3A5B56704E1675EC90CFDC88CAB7C3C8011BAA755B29ADB99
2C57D0735F6158AA307582DEEDE2E5476B68B436B94FF62A90114E68ACC86F56
DE0C04E64822F0DEAD7B3B6259B7BE4E636934DDF13028C10F1F16D4416D20AF
9EBE0034536588825828383B05B6120717744B58D2A96BA16CAEBC62BC1421DD
7E62FBDEE63C22CE00D734B00AA9C31D0C429ADA2D26C28668CF19B51E071BE6
F0B820D54433588CADED93BD27AC1D03953F8E722186EEC417AA6A4D23A3CDB3
5E8E468A1B62C8929FFC1FEA0F32DD22DF01E879C476EAF566B2EE653CDA10A8
F0015B108CAB1676C03EB1B58E4D41A95E1BEAEEE90F03C877658B6071E12DA5
6800A1FA35EB6EF89BC5CF74403C5DCEF99FC132BDB4AD30FAD9BC7939833E86
5A50893055DBD622A355352AC2C05DC692FDE5D0669B6B435161B697A7696722
D1D5639F45F891DCD5EF68BF83F866BFF88665D4D362B3A95E9F4C9372189AC1
96CD2A105371822F4AE433DD05B025D05F603410FDA8B9BB8900C9B291F35CC9
0861F3ECFEFC53F1D8A3D35CCD5D7DFBE2A2965098DFEEF73B4081A79D94AE1D
27F6F365B4F6C108FD985199CC1E723F77A273D993297126CF61173C927FB731
987373524C6C9D55EA2F15EB0B9B05A6DE969ED9E668B9B8CD11630983A5DDF5
267C65C42E4A4AA6F21C2007FD650FB2D648987310CB2BE9438B984F89C185C6
B50A9AF48D16743B62FA49FDC3FC07960695A91CE0C560AA562C3671F3EF3CAA
87921928426ED342745BF0159A2BF7C29419927FC4339AEEDF0029F90170C853
A048174364222FF1551B3AF40AF4B7C1255669198B4706A9269CCDC96DC4D8E6
9A431EC595D3BA0E786476FC46C023D47AA35F2C610D17D4A75952D839982C75
7FE3C5EA03DAC57F5954F44E96AA825FAB803A8FAFADE48986A52DD066146F78
A374E87A4FD2D4B9E30A8766169DD6384A8847165B54B22DB4B508E0CA366397
5A389F9DAE4690C97EAA728A4A471A393D9B4DC082B4737FB505701D45A2E801
AB13267DC1CCF398BE747E70849E45802252F3C8DC6E613126DE8E70492596A8
63820A52C4B60D6122E3675A55B566204B13EA5C3296353E91B8D6D27F30EB39
56BA6C85C0AB1AFCF72FAF2C1CF74CA0A88538DB6A5AB18267C1CE4ABC9B4E6D
35FA0D54B1A59ADE06FC635D6C0762AA36483404759D48BA1C74EFE01F62BE81
D608D0949F555636F5EB3D4A64746CE236732A6A884A48C89F988481789DE67A
A1B8D9DBDFE8E3A3D6642590B050E8BBECF9D678D523A6B80CA05BD89FA62120
896081454B487FC6CC81B8E827D14B6D6C1990C24F23610AD4D6377744BCA112
64ADAF5AE1B00B9D0410B7898CD62707039D5696E26AD3732FD95276E2DFDF68
8E8AC0F29C3F1F24930F29AAF7F113B9B586BACD32EF4C969570354E5202922F
78EC8EE071F3BF8490C708B0C3DA8D3EC41E2A8F4C10A0040146FF66130A482A
E595A9060B183995E957ED3F936519511BA2FBD12E5E22FC3869E509A27CF3AE
8881EAC0AC64E72B2A6619C4152C584FF2FE063D281F4B561947BF4E1D1C86D3
6B892C8D1C50D241CBDB764E888C41181BBF2D6F3D04186D01FBD8F6B189892F
D0854FCE1D90947AA2B61BE4051BA79CEE2937762E827C06796D5906C2368C70
0AC13CB6CD183D5D10EF6942D1E6983A520CE086E8646D662D9FBD96527076D5
1884D59C848C07426184EFC6D6EB2291D3BBC10D6E6EA9D29BFD6BE53F4E330D
CEB75D553DD714C2D855EC209F1403C349E09A08CCEFF3C993F645ADD597A557
92019FE72EBC4D66BCF18F0D046CDB04CC87815D5C991B21F39B5085ABF9BBB2
5F45621A415D7AE6B6085930360E85B76F1A8801652E6730EA1D27EDB079FE43
07F80FED0C0EFC3F9EA18DFD36D19AF6A4740EACDEA3ED12B533847F503360B0
77B5D0E72B5CF6DEBE74DBF5590C5165656FEBC33FE179B745811AF3C38BB610
181B5B2E2294BF077F1B9EFD95F5B53B49329EAA56F0EF2CE49384B65C9E239D
E1AEF9AD9CB1E424DCAC0FCEC6ED005594D9184527D1CBC4C14849B373EC493F
87D9B466C7E08A5895591AE56F0EDAC664C67E280123C2EB1D61F704F8CA7EE0
19159F2D8E6A5782295A9710FB33CF9FE3791A788C804A08C5708EC8E345EB98
178081077BBA3F72D5294EF5EA673C675721428F767CB883264A238E91693E7F
80CADDACF61BB2A4D8DED571DF7946EA8F2D286CDA83AD3224064B312F9D60A8
3C933482B763EC2156180167115F3E61DB8998C4543463D51C70EC1B9BDE4481
CD5D1FD3715921F8450A744590143EEA2031E2C0E304313302CB02A1ED56894E
963B5C5134E784AF57726F5FD7C1A4F2DDA8F44B4EEEF3CF0083C0AA4CDAC3C8
5FC598502E902E0D13FC9D2DF9C1906C9058C941E06357AE6E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFRM2074
%!FontType1-1.0: SFRM2074 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecrm2074, tcrm2074, larm2074, lbrm2074, lcrm2074, rxrm2074.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Roman) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Medium) def
end readonly def
/FontName /SFRM2074 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-170 -318 1322 952}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA27F17EF728D907CD5850828C1C55C5AD4037669
198CEE3AC1734B07F3433998208DD3A27CE29A6720CEE5EF66E55493DBE448ED
4F99940D9162F2E9FFEC633D5497757C2125CE0A30E7CBDC12033414C4EC1A70
B47FAC9EED41587D88B6A027A3E1E8C9B08309E7ECCAD00C560447BEFDB76F5E
7FB24430C5DB1832A3F063230C193C642D3150C44564B544B77B86FAEDB809B4
E2BBEB234B2C495F5532CB1E888FF631030541DA9012A2365330BEF9B4BFF21A
F8D983748419860DE37858A729EABDF1C517F2CE123529BC3A7A39957A3E8585
E40B5E3102A03D8CC9139157B3C8C0A40C8CFECA9DA7BC8323F7A029EFABC472
6D8540FADC75A1E92854DD0D67C0E775AF45F9CBE54E37E5D4736BD3D86067AB
D271667F64FCC73AE886F161E980733A74048ACCB5E35F6C71DFE41E625BA9C8
6BB79D74B02B06A31B67D93D7EBE78B38E3F7399BD0AACC49517D670CABF25AC
FC2610D973E6566CDF5170D42C834B26AB883D301F001C5FBF2026865D2A4F8E
2631831EE06E782623FCC0EF350D463C3CC4F17115E5078CEE62260330FF9ED7
076F3CDE0FE4DD8490F95DEE035D5332EDA53218CDB17AA0809463E556B6D824
D1651A993262616D4220761FA13A93409D79F84AD9CC63442261D4E39F08AFC2
A004F2CC9B8E6D3744EB642EBDCF1E0317F75D3A1DF0961F8091A88B2F519065
D5BEA4A2FC23A453B0EC7534FF14CFD7AE5049899238CA292594DF2B7694700C
5123BAC8B59F9895ECDE8A026E8515755D15BBB3768A6AC0A17AFEF6C4319DFC
F7BE6778689ADC65E63E005BF63DB4D1D1E9F15C1E1075C4B0F668D0E0A1DB2E
2F8C5354BE4706169254DC034E6F4E60723036D6E6F5A9D1E2F89F771725AD77
77A4FFCA82C515592F7FABFC887FFA595933AD7BAC47AD7D73B163559C566CD9
B376963FA5EBCBC863598D9B1EA68E9439216F085AB9484989D44D08660A050F
6357FF3041E5D2321D9C856743BBF8ADC0EB930637076A214FF172B459A406E1
D85CDFEE2D8EC10EC4D7C578DCFF052655B64DD2ABA272A94E1A8121226DF5AE
8CAF1E39427B7572E807F7870473AD9CF4AF827CC62A7615667233208E740CB8
961D86FFA6F1748B19B8305FA4A94E563C5DC706F504B1BCEFB27F02959A938F
231F53183AC0B6D43602836EB200F60801805A8C4D880971F693E153649DBB61
17A1B74FDD47BD4F4E78C7B83A01532AD1CADBD5B53476140AE11D063BF8FF36
FD0D0C3DAF66D26B9A0A835D7824BBFA5D23040315E45F1353E73042683EF045
6C3A0D74E8EFF35D7DB3866B030AEEDD50B84FFA131076BA25EABB198CFB7607
B6B044160CBE8D4CFF0C1B4C3CD6A2800A1946188FBDC32A12ACBD412659D3D4
7528D9E831C893607DFA4A3C3FC79640E4231F44580FD4C979795D07D0BB8C12
2B42972821354ED4AF823AD43CEB19D4422F68CAC184E7BB7630924365C34A4F
E5EF475FAE8610F898B3E287BC63797C966D5A4179703CA2EA9BA98BBA9C1637
E9A26AB810A0895DF758620591DC99359DF0A561D627CF29E7A2B20580BC8778
54D66B4B0230C67883D2969A5ACC2905C9DA0DE4997C5A7CF67F6BE87A73A7D4
F9D7BF781CCD2694F09C2A227CB667D8045708393453A4B134CAA5C4C1F2F526
8E697E7AEB9C77529C2AA2DB0CAFCD7C199D2E7DBC7D8A8567D40D843A5E0713
DA04D41802D11CD481BEC8AA7E81E8A25A16DCFD325D6FAAC3C40B90C0630A95
2CF06D0FFC6138CFF4CAEFA0DDE45DAFD813BC5D248569054F4019E98240762D
F91244F2F4F8A058BB8FF5450B7CEECDB18848B35A678B1DE0EF67B73C78DE99
213833C48B868B197246CF2D216222F8523932E1FACA71BD775E34A07F563082
C5C00CF82023B94C5E0E58FBA79442196EA1CD9438A16A02EDEC857CDD30884D
DC2ED5F6E090F48C5B1B207ED3404015B7A2A7EEA73ED0D6C2F08BFE9FDEB8AD
06FE15BF6D0D000FB33D6C11B23AA960E2E6E76142DFFF1DB2A72EB8F184CFF3
61D61CB52B5A523877A0D39ED3A314294C0654F4D037DF90A94E0F4BCC7AE2F0
68302B479C23EF642103763872D15A03C4FD68DCD752E7FFF9F2514B5189BAED
CD9E573A2B023352069A442B62484E09E45F061DE62BA0614BA19EE8409B352F
86565FCD2D8A89ADEB14C9F488DE6C57A348CA0BDA0FBC55BD74FC7E4D73C5A8
39F9BBDCA90CBC58D06321E63B522C3EF1EE78DB431D3827E09447E2CA50010C
BDBE91DB3E354B9084699DA349C4211507FF8802E06EC464D6339158AB83B1AD
11EE5C79A76F4E7541E0A68F61F56B91025F353124DF6950ED68DEF618B911E1
AD17E5B6ED67FD2A9C8704661DE752E74561656CD37DE2929752093805E38E2C
896BB88B0A81D8C21ECA3D5D8AE3A3ECCC59ED40A974389F859A3463B38C0217
0EEA1D0323E91CC697A168E4BB9C8EAFB9020CC042D59829EA9E146E742FCC8B
A675AE7AAC070378661B1E9E62B48838A442E796E116647C26E98422C4F9FAD9
CB93C8A1FDDC22D9BDABC027F4C52EBF08F6ED842CA1055D11B42D125CDC46DB
778158B67FDFECD3A1EA10C4C44D69FB88D7A56D82E826D766EB603E56DB120C
5A841CC9BBD71BE01222D74FD830D63A4208E827A9CDE8E8E075C94163254D53
26245ACE938F60730632D83CEA333ABF6AF0B8A118333EF7584DBC29C1F87A69
E380AA81F512F2088E986C6C5EC1AFC398052AFA608D64AEFF9946B3979D9DD9
7C0285854272EF5069D06ED33DA974F6AD35B345B5B85C11D70C1FC69D8F39B2
A799CBCB5EBCAC8AD54D7CA434988C3E857FC1770E068D8FB284242E9A2EF23D
5B9836E288C9AD12FD762C94821FAFBB39DE4CC95EE01DCF0D83A9F3FAE6D116
146E8209F05DDC885A1FC5FE18BBF95DE794573438E7FF32781DEAD1CC823871
776F8846F561843A78AF3AB81148597A0D1D24A7CB7C1F6E6075E75A6ECB1C1A
C5FAAB5A03150A34E227E052E0F2966C76AB5DECEEF5006AD13FA6EA2D5D2F29
40ED546E4B30E4561B10DFF20AA1870924A2A23EA9D11E741963EBF47302944B
8E68986A13DF1DBF5848EAD023DCCB9EA474CD30D94DF8617593AF2E03E83C63
0D01C326DB52B4DDF91BD0FE26C2C425E56CC6D3BF90951D3352170FB896A21F
6CC7A175FEABDA87ABF92E3CB7AB82AE31CFD5E8082CD99B7906C383C95269BD
FC8CC341D405A20F46FD59D932EBF84C8566114B0A75D4877A111DC7E335E370
4AD95E94271C4496607F31D77D79FF81C19973ACB3BABDA1DDA80E3BB530EF71
F4FA68D626A9929BF6B8A281AD061BE297EDCAC5A8B6E645481F40D0047EB390
BFC14970BE8FB09A10D1D2048FE03C8A70B485774E66DBD8F1271174F933BF4F
7223BF5E815184A99FF881557200C80A7A473365842E4D36409033A99D2724FF
4E23AD806A229467D5A8493B3D41B290CA0CFF7065C1D54FDF0CC21E1CF41114
CC7163FE274E001E79E93ACB2D392D67E486248EF55B22F4433EC880CEA71A4B
A78303623728A99E8BD8C9A1E0DF4CA1015352C9CF80163A1194C55D9A0F5813
E3717C31EE4C4D00EB67B4F1871B50ED6BEA46043DD8A1EFB170E5D2F4739971
EDA2684391831CC4E379924C05847850D69344DA6D74F27F5AC1B1AE7BAF0B9E
8644F315CF4E3BCBAF6CC5D182B7DCCD2E56FCD73D83E5230BF283B612AD7233
5CC6EE4B1348F5309529F24EB9BFDE0BEA49921E723133A2FB4A2356DCDD4BCB
5D881A51BFC208D8C5174D07B9843C0939DB2E4534C566F1C9E414356399B49B
EC1FB7D5AC5B90FC438503492AC7CAE0A87B5B399F8650D64EAF2E08416ADBAE
868F8AE32509900B86C49073A1F6B1B9CA71D375C5AA7B26EAE83DF4CD5E60CC
A650EA7671686520E7A9E2E1F20A66019777719D6D14388FDF3F0FCB211643BA
CD24713CA18F365D95A4D66D5B5A0DA3CC67E3F7DEBB7E4AA80764CCD5E7D86A
A3D18EFD237CDA5188ED71A1E50B4027DB3490E9349A377962258C36ED863904
EBCD9A9B0F7FF745E42FF725509450AF6A50076FDA60E454186605D4916FDD55
C5D7526784BB499245514FB4863A8D0F2F356DCA3E1A1D88D99EA8B47F040C4D
F6F8751B19B07B1AB806F715882AF392F13D70495C57C19BB2E238C84CE373C0
29B7EAA24A7E11F8EFE101CC55501637EF6CD0E84D4F0CB6A32BAFFFA8F7E50C
D99F31482B31021616D0DB89C51001090A4A7DDC5D6E8B0F436CFEDAEEC0A70B
2B6B81870EB729E622CFC807533D65CEA21B8FE2750785A317A38953CC537F70
30D8A0AEA211A4D587D81902B12D1B449D3D8AD0FB57C47541BD697CEA852ADA
1044A34E643E6077A732333374F482E8231DC896D355576B9DA105B3C0AADC0D
DFEED200B1E5505E7643C2BBF7BC8263EB80D87EB1152D6C0DC98FFE880185FC
E7E09A0B9F18F01A8F3E17FA85A15C49BCC14A5BF72CE774785537AE159E5CE4
ADBEFA28C1FF6D04ED4AB2CFDEDEDA35FC71115649B53DA11016690D1F50D082
346C2293028B37443B9084B6207B00532039D8267B6D62FC82334E92407673B4
CB8F64531A430598881E5E00F9762A049FB595BD8FAC323EF5A60C15AF82742C
86F76F3BFF8238687981A92828346D24D5FBE88DA71ABCE2596BD807BBAC1D01
7979602FDE7C31662F4BD9F84AE3E98E99E8106180DFC957913EB7D59C6DD37F
99DA8E4B3F9DAB8FDE154465AFC6F1B57EBEA42996530089AEB45462A516F74E
79A2396E4C040D7FFF67FCCF48B739DF9B3C9210EACBB0636882BFBBF645747B
A3E9F143C7E347570AD63E37C440F7F845B1EBDC5B1136FABC9898C00A75D758
0359F002A4E6E826774F1A0BAFC3E203C5DC5492A3FF08090DC5F5C74C0F2493
7CA039E9A5E9F53F559C88E400E64E104A0894C7C6C045C42EBFBF182F0D752E
72B0782F58695C70CE086528834BEE3A0C7004C7FC4C657600781926DAD7EDDA
D3FCFE4691F7BF7843D7A088DE8F2335EF156BFC7A295CA75750165C4DA08A49
FB435D439126B3065EA1B15EA74FF2A0E641F24768F652B81932B45958248D2C
8E018BFF87438623E9CA665ED2BDD3072F45FA57D34BFB7848B414067024DF21
6652546F6AFE62DBEA5D5949BF12A758C3C38D3816323CE989ECEB384228980F
E7831C74341F4CF244893AB2D04B6F0324CEF9A6A551C2DCEF712626F2C761DE
0EF85D21028574E9026CE5AC516E28CD4C851298DC0200C785D957EFC9CBE67E
173D9CFE1CAB25ACDDD048F9023FDABB6A558FA5EAD5E23ACCE673604D21A824
3702DABB2D6127CE2F4EED77BA4069E4D3ED79CDA191CC5AE0CEC1747AD16E7C
3BA1EC889665BFD5CF095DC10B658B1D2EC81548F6FB2E46EDF9D9BD5C18C2E5
F8ECF61D1CBDC3CF01CC664160D87274C4690FA387D500CE5985B754DADF75E0
7F3021023389E49F9334D7F1339D898038B50C0E55222F6E637763C1085CD88A
A8542E9A95EBE29339E80325846007026FC200178A19721438B41C9ECFECD00E
B33818B6A9696D4C6CE3EBC43D83F2E81488637ED5C6424C6D0960C658D1C3C1
2D2DC3E7C463F1E38A6ED91DD5BF6DE93E5D88DAE112CB8F8B6686EC11645582
BC712F2F4092522739D920F7E07CDF4A26062D93546EB0C7436641D998047879
C02978B271E2F551A9032A061769D0ADC87DF4025329F67D7C58AB25B33CD03B
4C37B7C8922183D3892A8CC337251B70DC4F69D3889676B49CECA4D18401DE1C
FF622F262EB314ABD409CFD87B215EF9299481B6C92C756C52F8D060AB9C758A
CA2BDB1D15B4FC87D6E65E89C7428AB49A6E98ECD8DDA707A331D22BC5865B76
2597372D77AD62AC4B2FF1E27963647A88D2401A80CE203B49F7D530874FC3A9
ADAA2069A157A031B539C14A52EEC779530D117942A15FD76D45E3C8F78C24FB
366354355A1FE7DB409FE729885785A71221B195EA5C2F290D7484857214FC16
FBCB4AA18617D0FFB24E731F7D504F2AB19D4E567E4DE8BDD0F3E0EAC2AB49A9
6A27BDCB21D8A1820F4E426160B92DB6C221B31151B7E6444C2D71EEF218C70C
1AA9A312707EC714E70B634D49F594263826148A87AB593FF1FB13EE7FE3A07D
3D366BBA9FC17A9DFABD5B1657FD6F3A111AF139BCE156D8D2541264E5B2B6C2
5A3BEF892D8B87C6F187B9386267A4A66901948E661FC50E9D12EF8F8111938F
391A1179E6D10D7583466226FA041D853D934D5C58DF33361549A11E81F477D0
C3BED44A2D79E5CFCA0143C93EA4E40C8341DDE632D7AD19AF69D8A15A68E120
BB0793D327C91A22270F81D6FDDBD74B6110A081E0D95DEA7489BD30DA612AA8
F1B82087D14893E36CE80FD8329C57908F020BEDF2FA30838F6E0089FE90019B
DBDAC7482826B8F71EC51A7778D89646AE10AE5316E328F75528C7FEE1990911
0EE28DAFF7F66860D0038F6DAAC43E467A62FCFF5F6D8AF18CC0FDE314BC8E0E
FC25B465D408E7A66A0E90EDCE7A3AF35583BD751A8B206143D0134BF52670BB
3F476C57D5D822C2704F4DEF76AD242C78106179C557F70FE653702ADFF4541B
4326BD61F9B79503D9B8A87346FAB3C659E171B0BF91AA5C167412BED78AA919
5F3DB251C33929BD85C145C3D259FA1FBEA0F6A00C43DDC0DDA91A4DFBB8CA5A
BCA3387C78E203E42B398181D99026877FDFE438990E66EFAF01DE435A560ED3
D1E3BE36C4D7EF91B7D644CAA46CAFBB77243277ED8B54D4DE7D6BEF726E36DF
0B83DBA7B83146B2914CA758C6ABFF55C00E0300C50721A92E2D981B8687F797
13F68988D26668ACFE489886299A09242D5A92FB9CB81A47FDB071F5430021B6
ABC257358A1A0972590B5990EBE5D702C9A03302CAECCC09D411CCFFBA9018C1
0EE2E04809033B1C5547E3AFB42E67CDC0A55742053444F32758E4D815166B89
E3B7FCC7DC536D49069FDD216819E3C86A6D4BC778CF7AFF81B25B8C300C301C
A08BC250CC614389C36C2B5DDDED51ACAE7F5CFB6E2DFF2710CF75DA4C7AC443
73818286552046B02994C613B4A7CC99A891C938B5A37FA3B4EF84AD15845144
5966F24DAE00D18C918E41B8001BE32A9996D974D88D55F4B2A9313AA7666DD8
82A1A05BBE6D0EE4E8CD015FBE9C0FFB197FBF0A163C3C92688F8ECD1BA4E7CB
E98E2E7CD0A51BD638BC0C253DB9731A8E32560259CB241746E913B99D20CE82
52B3283C241524AFA38D290BD895D61E4DE772FC60334B48B4BE659E7EBA466A
29DDAAC2342258F7A50E7FA9B2D2762E153171431EE392629544D9D4AFB70C0D
2C2F5783B4D34EFA3F376C486AA54A7D53A67475140A599506D21518B1264F6F
62668E67D22DFCDB929D94565781BB77FF203C063D7358C9377F8C83F710909D
4545C8448B5FB7CEC4203026504A999026401145ADFAC495C773F5640386D74A
3A0FEC0729494003DFF890444E75D66D1C75D8DA1AEDEC773E033C1393FDF4F8
916FEDF68C44148B894511043321D145A97BCF28AB7AEA43141AF0742FC5D00F
FE3CE7CDF39079646781C450D5D34417EC8868C6554A96EAEC410E2B3334511C
C6275D42C30B02EA2EE452C200DFB3E7D1CA8ABE871260D756447BDB6911FB0D
71651074BC83E9BB476C3A4828882C750B0305A8F1D4601CC47EAFE112527724
192F504304168A60094B8DD6181DD539CB018E6EF62399421E0159FB4ED2F640
D99729E4EEC3DF49860F3A3240AAC3FD9DDFB32B150767AA9D9FB7F35B34A4C9
60053AD6CF7083AA05EEAA7B8EB78D614A1CE333DEF55FFAB17B358D1BC36FB0
C0F8069E82BBC921A97FB3DC8292648A80683DD546ED7362A2C0741C102B67D1
0868CF957A2F7BEF0CF10C0E4C2E794365DACDEA1F9EE36A63E5C85E915E685E
D11480F436D632A308872F9644555634A74681A192E2E22BAD05261C320E5596
1609F5C1BF0C0B362E4CCF5B8C1DFFD305CCDA1C509E6FF0655E808CD6070952
22597126E4FE532300C341084E1B183752E1CB3A828F887AE21B415FDE78634E
85A92905D6DEBFDBE4F0D3D7F69020B67B1A851CF0DE8D22C91C14210A12F526
494E2B8B28FFFAB7622302C8FEF6C24D1574C980A7D1DB2A481D86EDDC56411B
AB23A8BDC55D8B4FCF9DDFBBFE900009F02939A2DC186477C3F3DF3F3FBA8A62
A144611BC1DFE1BBD046324CBBE3BA17ECA53D49E72D73EE083B08BA60984E53
2D2F16B43A333B9F95B6D3CEE5186292AE629479F1D26A5BB2BDDF55EDD6E181
5AF6DD70E402569D7B24F03906CAB780E1FB2ABB0E7EA8320B6A2A0171C2ECC8
665CCA19ED71AC17F988E4DFCB3AEC2A3005F45382DD5C445858B126BAABC36F
78399ADE6A660866EF2EE357B0A3110F8499810607601397BA3DEE32E7E53FDC
4A1E0E7ED7DD7B95BCC77D66ACD096A7008FBC4575007C897099AECC2A0AFE23
A744D0E4618BF5A3954D38F853ECDAEF6FE131E764BAB7271607520A182306D4
5748A889EC0FE41979D22ECA2D214CA763A1944527A7A44084991BA16A978495
1F335480E06B28A9743208F4944A2E1849519D59B362736ED4CB5495C668D043
AC07F5C3B9289851EBAEDC0E26E05D22F5620C51B0C67090BC7E6D80F1E0DB7D
6D18BFAA1329141583BA1F8DFCEE3ACE1C7B994F8AF9B14EE2C2BE7DE1B9924B
1FDBAA64521F677BF2FF1F0B068A62D19E07F0FFFAFEB7F0CE47C12662D21E4D
96AC9A092BC944E1BC87164AABE0CD828FE1926F7FA64FB729F19D128E39776E
91EEEEEEB1BDAC0AEE4C5F9927DF0749CB94F603E32F40307047E5E89CC72FFB
2D260EAE03329216BD8093810C24DAA31DA824F3F2B3DEB329F1191E32E51FAC
6241FAACA49FA6F8EA8C4513EB659114490DB20441102D1BF5F682F54EC6AB9E
1B5FC4EB62A344D680FBE631E4595807A7327F914CEF49FF38ADBB395B948AD6
A15DC35CEF9AD47FCE0D6B3E9DCA7107F0A47FD7285E5D1D3622FDBB879801B9
572F7B12292096B81E739DB9735ACE04081E7C3529E06178A5064E9B84AAEB03
251CCB360AC0B11C061255A3E64D7CD159CD238DEA2778D7E3923EB5825C8380
3B8670BDC31FC899AE472271B4D758BCCBE803E0CD22E3DFA1E3148F25D8DF21
E4B90A74F5F61DD96B2DE2C495E604614DE21ACF675E37C5D3DF1001D65B92A1
0B875F2993F76BBB2A13370FEE79224052CB6DBF98B088EE24A3C2D3A2AE3DF6
92AF089322CD32D9E1F92017AE1CD552BAAF00592A0049F83D2511FC8D6BF7C0
C7B39A0F281DE38890094ACF189EF9A7D26B9791E6094CAB335CB9A922AC96BA
B85CE92F7F3F4D59E2D3D7B932C6D11B238B720CDB902C4966EB2DE5A47309DA
FFCF0322CA1576403191772346AEE28C652600EC9E6D33038D0380527F1FEDA0
BC3B95FDBD9C10CDECCBF30F48DF46040308043852EEC88385B37E85AD6250EE
35B07FBE6090CE14BD1EF860CCFF103114BB63DDBF0EC7562815FA77C75577E7
D7A7961C670C4BD5734CC99D1EEA9C8E983A798E00FAF40935A4BD16ED38F5B9
A5DB50F9E0BF2D43BB3B52C34446406B698A54BE4FAB8094900020D7E490A539
8AD92A3C64DA386B3EF1DE69446BEA634FEFB7FC353163F23F5658D749999C1D
76D2E3C28A0AE2B2A3BB412BDD6D04276C3B200DE4591D78A57CCCACE0AC3492
A0E6A288C4F688E50EDE9BA66DB549E94E85E812474B85F0164BCA5581D4EF7E
F6B710B981E6B13C646FBF2F23DFCDC36059615EA4A2F23A1973E1563539A0E8
1DEBEFFAD6E7ADC2B1165BF8CCA83ACC3740EAF77B7FE1799215EB826F476738
F047768DD65396D417F74FDB85280688AB9C078D7C6FD8F37C00D403E21DFA96
628D3EB573D7D222891A8464724DA85B0D026154521BA13E1C9C0F4891C5C0CD
586E1E9C977CB52F1C9695D61AF8EA8ADA140D12A2F4A86AF91290F1755DA9D7
256D3B512ED62C93CBBA98886447426C9D475E5AF25970D0C721CA947F554C5E
8AF851E79AD112A302C9AA6E3B4FCB507696AFA5695F7BBDEAD60F7587988C16
0D6EDE949AB8987207838357638626B671617018D720923E3360E80D5FCC15A5
8CFBAFA969120E5474C8E4BC5EDE74AE3A761414D3B95C97E82ADE608F45367E
16765364E8880C36C576BA09F3574DAF9EC362285EC731BEEAAB3B383B97F0BF
5D8CE9EC4A34A4AC09367D559EC0356A480CF3170EB56836AEF343871E6BCB96
D878105FC31CE935BA9534DB2FE7C51674687E60DB2AC65FE4007237C43EF762
A62325BE65F204CA5156F345CC4C8512987ADDD0FBC17FB79F267D16E13F2366
37527F4569FAEB807001B494289E678F5D621C1192212D91B96D33F83CE22FF0
D8D1A8892A9EF6B64472617A14891D868AB5F13A449A386CED4716C63F63AEC5
9D02E99F3FD03BD65F35C01A4B49F6930BA56E2D2618EEEC8973FF11F996ABC0
CC9839FF9034DD503F7BAD99A0A9BBAD401AD9347ACB8D0F5D9E34A304BFC054
F5E7998CBE6752AF781317E30EAF7B673502FE859F5A5AC8F45542A596038CCD
C9A437CC0625C731F423471DB88809D47373448104386CA685B83B8C958A1BBF
3BECA6D2533E606A5C9A496EF5E29CB0DA187BD3EC1262E3CBA460F5490C87D4
1E9A237D3421F4939691F94E3128B9DF073E682BE87710793EF0BB3CFE22AF04
24A01EE31F57FD64010925B705AE3EFE9F1C8A962027E074E8DD40860ACA5A2A
6E15FA7C0A973AC405B2496C9148AE62F8A62A802EC1EBDA7959F95E72221993
37DB2845068C64CA74F712DCDBCA63E21538E9F84BEDEC41BF2C004C8BC6027C
3700C294BBD96B251519C67B5542934CFC237F9E3C3B6F1DAFAE9AC3F38ECE89
D2C5FD8EB26A2EC5095BF5458EBD2217762C84011BD91444F2F604929AE72C97
958A1E8DC7EB7A280353F77B77CB0C2403518DB29EB775D3AACC694B5AFABA0E
D960194407F7802E1CE5E8BD8F6977371227F591A564868F99FBFCE2D92FC9C0
A9645269F43BBAB7E49B2D7628B91421218BBCECF2E09C3A0AD53C03736F02FF
D75489A410A4F213FEF376FDD96FCAEDD793D268EC8BDDAC3F8F9A464DF4C5DC
8F9E3F601A101201DC2DDA635B49C738003F35C016A86121A3FAF0D0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFBX2488
%!FontType1-1.0: SFBX2488 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ecbx2488, tcbx2488, labx2488, lbbx2488, lcbx2488, rxbx2488.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Bold Extended) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch false def
/Weight (Bold) def
end readonly def
/FontName /SFBX2488 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-205 -316 1564 922}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA30E93C19889DE21E60D1FDB2BFE19ABFEF06059
8A659CCB607015182EC681AF73ADDE4533A86C8A88DDFD99E33AB4637931057E
AC7D9DF42B614C752A4175AB95C7E0AB2A036E2E0B49EA8205ECFC2290E6E927
E0CDC62A1742FC8E59EA1532BF2721235ECE5FBE40A9DE5411F785DD21009E4F
1E0974563ADC9CF62D37819E39ED65120FB9C870C1823C3F96198B4A88435968
73AD99EF27B2E0BD2FEAC130296DEC42786C23651F4199AF1251DF159B7DCBE2
4E2A7B6A7765F10DB0707FC84D49B021D432A4B6DDF145E8C9604BCD081997D8
5FE2A113308C11753DDB0301F572C3790B7FDBE0DA142487D27CBBB1228B7FF4
5990EFE9A1AD38B9FCBAACC2C3FE78B05D3C597476DD1BD6BE76B78BD875A91D
E61C79D2049588978FFEE57606CE37B4CC639447FBDA179E5D657AE76C1350A9
3E4EFC7D003366F550F2399536AD7722B1C17AC3C973B097153F3F1FF6DF7CF9
8AF85C0631FEBB48E1C783A623F53F382BD88C41ED9A1F44FA77F70816BD99FD
28A71AF42CFB86401E2D85B555E493A4D4923D3E6DBA45893785426343E1E646
925DCCD302343D6ADEE9FDB3D9C91835C7F94F8904D69AA567B8E7538C486958
DE83E2EA48EB8BE7F57664E0011ABC707B5A54E833D8DB9266AD753ACF844536
CF63146D84D930F5D8F7A409CF367D69590ABA77601F2E8C22C6A79A2DB1FEB2
8568C5637E1E91BDF2EF0FEA3FE2F37A709564274E37B455E86D8B0C4597CB41
884C0AF02F597C8D4B0C88F326DBE0EECCFE9F09F993CB7462632EB6A8AEC59A
3F41E294D7347DA871E2B5399574ED5F87C668A7D5F20D67339765E539AFBE1D
488E5BEABB9327D8B0187CC87BF8DB9AE77AA6458C2FB8A3CA9CF5CE758C036C
5ED6740D79C03800693DF0FD0C4873C7773771BDD7D8134E7A8F2A67A66FC827
06705826819B52AAAD0B3D9586319FECF8BC689973815A3AA97B5692E964AAFE
F97D79AC910C6EC8950E99433037931943FED17A1E3AB5F5AB0FF96297D52AA1
5DB4381C7EB591FC6D332619A2CAC913B1337BE62034552666D6A7FD4F91EB43
E2AA79E0E516A9016738E38F34C9BF4A27C680A3E8112B67C5D283A316228629
C941EDACC38EFAE4126DC52CC757EEC498FB0DE0D1A395E7BA2F0925C667F3DE
B249E79E79C5755890D5A3D10E4716AF17BB14422C329AE0BA42C9EEF888D3C6
DB49B71ED83A216241DA1211F42E4327DA0FBA34901D53F6E6B5B55E65BD79BD
C69C348FC2524EED6E4A6C35CCB6AFFEFDCE8C18E42E05C376C8D56281F6F7F3
B4657562ECFA247153812D465D0DFEF3B82108456EAE0FF8E22A15B60790BC0E
D7D1C565BD5A2DFAB27BFFAF5770DCC8A33C8645359114E9D71C32B13902C43F
52ADECA5CE3DE6B2E2BA1BA849DAE119E0C4A26369448FAC91D930CBFDBDE00D
B899E344D699C2FD288FDAB3E6A84840206504E661BE6D41EC37F32F16F4E2CA
734380757049AA7B8524CDC15E7A6185B329C8F686D75A9D8F3D48F1C25CC713
1F5E3D67F1E40330D662435CF302E03489954A2BBFCAE08D8229B2D93C5A400C
2CDB4241177353670633FE7A3E0156A5DD95C2C1DE2684115E92B4019222FE50
8BA4BAFE39A5A2B5ECB604725409441D769AF83045591EDF98D15D746AD9D57D
8BB11D01FACE7CBA94041CEAFEBDE6D1D60558389731756044BD4149B388CEC2
1C76608177CD51634BA21A6C4726516B03B6867286EED3003DFF85B65AA64D0A
0F1FF41447CFEDDFEB24C2A5FB67502C05B884A151C05113E4DE238C2E292602
DBFF74A8EDC509992BB69A6A8B12EC64C77C15E7EBBFD886BCF391AEA28E1CA5
C44272B7BA365964A1271E8F4BC3E0A6FFD4378703652A6AA45487EDC424FCDB
6CBA9E00A76705E81705E612F96A32A8F9350EB34E79BE368D7EE03517240270
FC5B54417DB4B3BE25BD81E0C4792B026C25EDB6B4F9F0BEB9F757FD2E3A3BCF
AF16270609F10267CD6E227C6C0B6D71BF6B9721DDE2FA03948E8D6D27820FEE
FBE23328E6C0D35AE05A523311E5B6EE262F03198E0B8F82D796E0870FA38042
BF9AD232D663BE4CEC99589CB70941A1BC17C4151BBA9910455BEFEEF3C9F795
D5695958AD9EBF63D76FC6F84AE523A10B01EBA34E1CE1CEF3D5F6B40F57F3C8
5743260BDD241E10AD2617005A2CEE9627DD4DCA3BB78B7DC14DE8A6EDBF727B
DCC88440674CA5960FB48FFDD3A7D8C74987A7F140E0A0A26F95B798E25FABBD
89A2C17EB7A3AE81F799FEB3130321B658D01D4F691D128061C674E87FB07BE7
B67BC9C461BB0E2F6D9483EA956455F62EE57D13B6485B96819F17175679FD90
54DF1C605092F60F1C373B05B911B89D67CFDCBE86161B4BD1FD82E5FF4FC5F1
99827EC49370893222868A242034EB1D5B55C9225BC5ECBFE098DA8008401C6C
03A9DBD97DC4971A485BB922F9CB20F6D3D1C9F40D9E991753E4850AD8308B4B
5BF03944AA5506DE6A20A1EFF00F316B9337EC2889DBFA423356B0D93BE40A72
92789867D1C64F9C1F18FCB04FC879A6461BF85A440B9864E74CAC82C6F9B862
736D867D927772803D9C50A1ED8249B91D2C8DDE8808DC922FB772A36CB09FCB
96470F81292E4437C8ADAFFCF365B4485E96A9C9C4E50BC74E4E542DB1915577
6D311C47FF72D385A5F23302DABB2D6127CE2F4EED77BA4069ED1BCD83B56391
99A68B3D7575BD954666765F81B282635610ADE5DB5F0A6A1A916167307D4016
20C503DEA5D79632DA32FE2A6EBCC9D94E0787D5F083F990F2162DFD355D4C34
FCE76F7960EA4FE44E368B0822DFFCD57DB107E0D5E728CA78145EAA2B396686
DD5FC5386098A7CC2A6AE8A7778C1D27AC5EC62364DA6E0C5ECC9B3B85C0C672
D65ADA70104826CC10B15F69D1F139689335EAB32E5BFA7BFD90209DEA860D77
F7ADBDBF3D8D348873FD52F8C48F9601372F5D0E95D7FDF91A111734FD20D280
8840C00A026BD1B23D75690578661B1E9E62B48838A442E796E1104D031A837F
F15A6CD3401A04093C37D119B7777F3F729F352BE940B4B329FB463D8E696CE7
BCD92563CBCA6C2C6B50905C922ACCC30FEC7B1820C42A1078409AD56FE7119D
B5E7737DF4D0CAF7AA3D1C010A40A2D67FA2AE0B2C9F9D2011B5B83876B8DC19
F1B02F9F23433255B6F8AF17DBBF27066BF3214E1B06294C66DCC4D12B83677F
886644AF9E79DE4347ABB15EC3C23600BC5A557FFBB7F3E75689AECBA26D6AA3
4CF8BB86F4B93CDCB0023E98BCA1954246490A01F560120437FDDF454E7C7956
5507AB1C2EF74DFA2A3CDD84DA84200884D5F63C4253C69BC1212CCE4DECA894
C6AC618011E948916F6A9356A285C62D2D3E0E5E776B6A4EE93F10A25B6CC281
9FF6F26221A016066AFD35FA973198BA54FCD94646F6BFD96E5F3353893B819C
F769EC2C322580AFFD41A9EE233A726B2315FA4BAC8A9ACEF50FAE0EB699C330
6C52D5C7E67FC8E6E3573DB6FB5CFDE38FE2E9BF8207894A24EEDC4F35968EC6
B6036E9D65A26EEB2A08F0000765FEC6495933C20BA435EF6A458C976DA92D7C
19D24B905549CECBDF7BDFC6FA4F7B74BEE20210A0FE7B0C2F5FA4150713F6FF
5A943CEC7C4B8805F37335669160CADB900DC43E618C06E4E83D61F68D73A373
4B8EC9D803D0D9676062563712167DA00C6CECC8759003780009677DC944FE3E
3C35D16612B3EACE32EFBAB707C50FF6708F4AB5B05C531CBCF1D1DC101A75E7
B55F34AAB89FE4BB8470C253483DE7EB353611BED8E37D7BE8E857688514794C
5F9EDC04D387A9BF8738B6AB670B3EB9A3E85B312B331EA44FA926093CEAE64E
4D8E58EC3D281ACDB7645ECC5F4CE6A04140CA516D7793BD1F976840A4D7AF01
6449FD58506FFBC9507DDD77014C2920F71012BFEED7585F55B995DCC55499B6
46AD565CF7FE85966D6F8C3EED0AC734005F7CA45C483BDE5670997B72CBA3AC
1C1F7625B600BAA5D77705218DDD134AAD7C32A332D3BEC24D3A8B2ED7401F24
29C9661A9AB602EEB99A28941BAFE16CAEEC0DE8C53851903C4122E9FEB527C8
4AC1DE8DF646DCBDCD3033763D93EF23CAC1C44ACA65EFDAE7A15DA273DCCD84
2275C8FBB6003E4166DC27459483ED6A04D1DAEE7D239604B5D1DCDBD3BA0304
8A200E359C0C635B437AEC88D81FF347EBA6C417DF5F8C2BC3A5CAAD652F44D4
32004DA354352C5F6503160BDCF924E38905EC11852227A06BDC84ABC8F799B6
38CF6C497D0D1E75DA0DD648A764B9DDC33F19C7EFCB31A980B6A05B63D75B86
33225FC05F132544B831255B96FBB30E83372BE711DA7B17E5A874BF14E532D8
88A7904C72FC1ABC392D62B3240677F64889D700B15F5E18C430D828A7C16A81
002AE7A15CB4353D94C752CC52FEFC1238F36B24B5F5BCB5DCBBD3211FF07D69
E21FB4794954043098CB4DE8AC3CC9FCB3772DFF8130652B71CA5ADD2266A3E3
3FF41FFA11EFC866594DC34C88198806820C640EACA609E4C5EE59F5934BE6E2
D0D45246935E2DFDC56C87343972D071B660741B4094ED90D38FC4C93BD51468
208072BD861CA3EA8185BCF9FA4892D3050E94603C1C42DE0C535B229630AB9A
215C8FC1470D926D6E7D4C105DB759E6AB82D300511B05C15FC42AC1EEB4EB41
3944D0775BAEF808D2FEA2BEF33383AEDBEE076C3D5C68F7783E4092B409383C
CFCB416BF435E7274DFCC80D58B99A15CD40590B9B68B378E88E66FE3EA0DD53
827939541BCFDDB01997CD5DF4AF124740AE853231A58BEE28AE0207200A0CA8
5F553B69EA1DAB2827A6B65957CD2CEE8EB4510782749971A800C03E0409D8C5
6211C6D2880423B437527AFD3B8AD3FE05A8DFD048A6FB52403D4C642F210E02
A3AE9284B599C63F2C36EB602C9656760F2DA467C6325B8C959BE75432396878
00B071E8288F1AF5732A5FC9579E3D1E967CF4711285D38B3AEFB1083D837140
AF8FB5606B66927E37AC81F9D77E461C6511F9FF2CD09DBFE40ADB929E04919C
95D57BCF0A2667F5D3D0DC69628214BAD6EC0B5AACBF5E14D7202282F119071E
6C4F7C4C0001735EC02EBAE844A143C63491A0BA2F10874A306A94C0AF48A292
01593045978BDF715A0647DB52992DE617DE4BC0004259E1D4BD53E263A88783
78F1C62A848011C8C079A3EB39A63B93F359409B9D2BFBEBF88AAFA6E681A7A7
987EC1FFAEBA3D18DA336C39F09225CCD8B85C5DB458FEEE8BEE21A7784A6B13
422B5EF70FB8DAD131F0F6038F07FC10D735BA9AA1317F148C15F4AF867E4292
F7ABC48A9F9FFED6FB35F504F1EA911595464747883CBB183FEF6DE22619D0D5
E959FA0B553B3535E17C8887DEE96EB9B4FD20E4F550C55621D03FAEE368A160
6E7C5BFE5FA418CDB5998A9FF519339A07AD9F1B487D67B89C20DD38D71B7AD8
4A001FFA908C9158FB4DB6DA9143D4422F29DBF36979804DDF61F36C5BD8BA61
B92E35F1F782778CB029CABD1D3E0053747046ED2FD3B8D257373A3F45BD25A5
D100A123A95ADE38E1160368778A557ED09C2D369B74532E6ACF671DE0A0DD0F
D3856029CF661A65599B46B798F75ACBFDEE0097F82C032F7B71782EC9664CC9
2595CF6457CF08F33D1780D6366F4B8D1FD520C8FEAE3B21B790709FE9A19ADF
6BFA5526F6D8AD95971585ADE72D806EA35079B648CB4193904F609C2FFFA828
A43AE0EB5B07B48DE067F29A643656837FD042FF53D2453BED9574E1A120A09B
3E8973D747BBB7C389C9D5F0083D522B9B84A6479C6819C90D6918118720DECD
373E9632DDC32A116396E2A7FE57C02F92CB971160685193845F6AD316123620
8ACA6C88585D746C0BD2F8664253B09D56764E690C790C0FB5FA652C6CB6D67E
A840AE96BAF641E2469EB036A248DFFBC68DFB6CC9550F530ECEF0FE9E9A05CB
50300FC4F2D6A7C53C15C4145C4F68D392DF1D68478EA93DD150735524FBB355
183066983F1FBC52B6634E8EA3C0579D9536A29293C513AEEA52D3993D6DA86B
8DD207C10202637F5F390506DFA91E59D21FC5F4D5016AAF1EC28B781D42934D
97EB6FD416180CCA3182A1AC285BA404191251E6650A6823BF8235C7146C46A5
DD890534331EF694E7568C1EC621A6DD5371DE9A17C93C1493975ECB1F4D1BB0
92A16569B0835C0A3FB1CAD0893106502256B8FBA503E9492741F45BC90AA548
8F44F571531B0E96542F6F89E913D021172A8E3293F92739ACA880762566AC99
50B866E8CC5EE30FEF149E35637257BFB4D97BD9929CC4D58B29EF3FA42BFDDE
098D69AC022876725CA929E9427C185ABE396DAAB6357A1A7B66CF6FF78A4B21
FD7F5958DD7851D6336EB49D654B456E636D325E79F6F5BCDDF55F0712FEFDB9
65955A3AC5F7C0753E39AE54AD926DE16BE14837C8E010C89024D95EC449154C
53C4403A91FA09AD6FBEA9505AE5B78C031C9119C83F809B9A721F8351D54CA8
491AFD467B4557357A5191BE5CA1D916A19EC19623C0FA613B236459B55B0365
B6CEFF8E0F11508584BAA0510BE406066F0245D786FE17DD515FE0CB61A4A575
AEB7D5BFB60E7697D41ED3A847160EB87FE3614C536E9D79D26E799F1D26CDA5
6B940E651D090AE0FE1E618E4BFB44561128E0AB55B741637462A2B111D2ED33
DFB65E79B96931F045DA2DEE53F301BA889B2ABD919C5BE1C04B91266178B2AD
C607D752495F20DFBE60B8899D997CCDE74826BB97485FEE2F178EB199DDA2E7
5496C16E498B6FF324C0FA310C9B3D60F656B561B93730132CB709EA0A1054B2
A560A5BD31249CA1D662D1A896926C7C49C6438A48267435901C7E8272CB34B8
D8734E6574C83CE619CEBAA0367ADBB8FBD0049909230ACD622DDA627133EC6C
C0A8516E4DC86EAF6586D371B1AE3D44CAC4008F498CDE2290BCC435C4D792FA
E793421A5A45C29872C8CDF6F0FC69B0F51A459C739E6B6A7E15FD01219849B6
497FA6DF9C8EE095B8695FD0435E3D66D8ED27FA13C6A2715BBD86FE60139743
6DF6CD99E6C494D954449218636C01A0DA635F17CB0308E490F1640E1E4BDF9F
7250D90FBD295196A8FF74FFD2356EBF7641727AFF8DF1AFCF1D98BD5A141D4C
466C114743B853D7F77AF0F59F7AD455093C45B93895FB27C9B1720357FC30AE
252CD70E47A5AEACC54237FDD07089A316348091BAFDA514BC0986AB3B9D72AA
88C6F74BAA162A67A8127BCDC22EA3797DB5A1BD9DB81BC806F4206253C2DCC8
A40E93C1814D8ABB906E8B3217B1B6F7AE010686AF267A3C899BB19AA4AAFB14
01E6CCB19D9090F253F180F55C89355A821C70D9B318C2B02094A90E24E4C47A
EE28242D033D8CF53621656272B2D64975DC69CF280EF29095C409B980D358DB
A51227EA00A1BBC475BA8BC06943D37B24BE29C2C1679F3D3C0EEA04FD6D4CB8
0758EDB8556D0048827140AF8FB5606B66927E37AC81F9D4E27C42F2C78F42D3
E40247E7619B8C69F7BA47B270C4073D8747F3BED6E631D300A32DA3CB7A2718
9824DF510F5722B50C788D7F4E102F3409AF0E16C54BE328F1F84E51E491C64E
0AF729DB9A387C4D23A7A4F543E83FEBB7A566B441D4D0EFEC7D6505E4768B4F
CAE923D009D2B8B4F5A62024FE72EB87CCF204946097D6971616F961E9C9893E
8D7753E0B1BA466C3B8E7D98A8EB4181F21941BA88611DA6204768664BF14767
F037339B53DCC6B1F182556DE91614CCC4AB634C8B36092F79420A3BDA2A1021
4F0A6CBFB1ED239F92DE2647ED61904A7ED4D48EB9D5CB36C34709E5223CEEA0
A86C9C89D9BAD27D764ACD56B6D724F4A403284E859625569EDA1A174ECD0112
ECDCBEC86456F4E3E2DD05B0A64742140716E3D1A202580A24E0E39C67AFC5ED
94692DF12A7CC63B5B7757E0A16BAE50167B1DC5AA95B6DAF079B8696338DED7
88554CA7351753B9E8A4E7898EA970CC7288E1032DF92C9DDE43B62C043D3183
D52109069BDEF56A2536722E95FF1C3999433888A3FFD76EF7C273DB1BE1C470
5E416FB37F78DF6E349BE5593DC6B1BC11033930DD6DD104E18B803AB78AFC74
6DA967FF97F3F7A2A4BE18D5761EADA629C2931415003A9021F3DA02B1A57073
53F509BBF168DCA42CEE0631ABB01C8ED262075F6D35F90CFA34AA413033CE7E
801178FB479077ED48C29F014A51A5F3C55327ECCF5BA5355C776E2E75BB1F82
B42FC8A95F789A603A1ACC69E996737C23FC740605CCC9187171289055E53B24
FEED2888C0FCDCEFFE3151643A2EF56BB692F6094A8A71F70C8DA8C76B769CFD
71F3B73213FB0E63790DCCB77E809E2FE040F07021D7F914209AE12DC5B1D35B
0BC65A886B44D0B6836AAAC07CFAE1F79A4080ABDC6FB84FDC636EE6CEAE5B5A
D0F3BE11A407B503EC5CF8ECA2B28105862123EEFC996C4740E4A9DEE1596B6E
5C78B0699250AD3E136F1FDEAA34823394454DF98A13F16FDE736A8004F9EFA7
49669C3BB3BA9385F5977EF91EFA95258B6F35D0B70585F95A552C4318EF0BFB
01B0A773652ED3AA65CA9A528A932AF59C7299AF28999667F5B865621CC5FFB1
FDF088978B90D9940C46EF20FFEBB58FDCF13104AD66885015B6D67AE8B86308
2FDC66486CB43C152610B0C7204F5999679E6B4B810591C8457AC02B4DAD3AD1
2EA9CFC3BFA8702148576276BCEF0DB00846FA13F2E7AF696EF5B8B146317980
4D774C5B97D0130E60971302F53C986B94EDCF4C5878A7B31AA85083B6553F66
4AA7FB021A950FC75C3F0FBEA6C4011F18662539BD1275C7003CEA2AAD91F505
113F17918DCD399C09D0247C1E88859CB02BE8128D8630107499F345E2AAFEA5
8275BC5DCAD93FD818D2D5B9071ACAB3D2F843343F1EA73AE2A08CFF2F4F59F7
5D70571710D8FC3486F54B9E4460809E7A40E279C107369CFB807306BB5E7513
D0156A9C9350C0F66BB492E08D4FEB6F83D2CEC824322A5D9AD29CDB1E64E737
AF47A894E9E942EC5D6B38770C8DA5DA6C2C6D8FDE6FE36B199AA273FE563730
6EAEE39CA3E37FCD954FB6B261C41F445F7742CAB2E88D2158586DDE97A987F7
15808DC253D1562654987C3BD50D619956564DF7746AC013D8B98245CB7924C8
89595242BFCDD1896E3E2CDCAFF64EEF97C9FF727F08F2BFC328DB02CC280D3C
AA87D634BC255F89CAF1DABBA08E6298F006A4F2913A200B22FBAC78768C4EC3
29C561C03D189245ACF30EB64479F2673C9AEFC509BDA8400A5A1F19EC6C599E
253D9868B5F75F00A3AF76306F1EEFB66EB0F194B11C9F8EAAEB1C01FA9C2B9E
0A6B480EBB29CFF35076683AA718EE09AF09D203E5441D2D5CC52E0A96ADD64F
49F46B2D4BD4ED6411ABD75C981CCCABA1EBF44D78755D586BC1BFF58D72226A
9ABE08037B56450F07FE30B28F6DCF8C1900D6497B38B585520C687ED3DD0DFA
5548C0891B14D99644BA13F85B329936F10E6B07A6F8DB91EA57ACE77BF5B24A
44F45F43A20BDB91831CD7DBC455FD33FB4E7F6110695C665F456F9F600BA076
684B2CAF8F33877635AD15264B0F96B2D0E493473D4F22D36BE45455AC0A0B62
46065D3E0B217CBFC1EE153B96BD3F77002F2694C151DE9D68E5FA8B3C8F4CB7
633686130167772FCABCA42B6F41EAFFB351C627F02BD6A72DD939D4C162357C
5D5FC6A13F2754E7DD3BB8C7FD5EBC64404E8C69C4D29579B6B21F8791701050
A1DB9A1BB941231E9AC42E0A23C064543291A490B1CBB2F7C891FD5FDBFFB499
4ECF216FF82C96857610208F39FD775A2397E6D2ECFDB7212FAD24715881787E
D6F633DD7BC5B61358A1EDCF0CDF39CA406FDF46DBBA605CD8195A16765A2EDB
99C4EA62A0B19CE443E4372321B6F692850AC62C48E1367FA202F6CE5D54ABA5
531343BC4AB9E331D0A01D58D35788FA6F01BF27B5A8590223348E5A9F2E1DCD
5B03C5D1BFA746AE8F304FB73A0292AD1A4AAE908B49EF25EF48E7E56CA7A0B9
4452DE5094942EFBFB0995DF003B757A1D5046199F3D5A6770348B73332A47C5
38847BFD3B95EA262945710FE2D708B726A7FDA2284643AC878A542DEBA73263
0023D22A4D4A643821692E2C7FE44C832B9BF24D8CB87D678E5195A01CC142FC
81D1F4CA3362A1B0D86C00A49816C19375BA41440C7EB666C8CB334D0824C5E8
3AD1B8F73F38321D43197297F1792E47F312DCADE1D98BBA56CF9BBD35E7FBBD
5A32BA13F01AD5ABE43232D46C7142AA126E34882206C9671003FDEB27E9876B
16F44C81D5C2470207BC6B0BB9D2BC965832803E347A3E9F093BC0C0888E046E
85CACE4898BC9404D7B6FAABBD811B96E542C3FC6E8D2172916AF4B382E5B7C4
A24522EE41ADBB96EB357CCE1C5794FAC96F6037D5841BA442BBEF0F94299F5C
9953A8D5C02D475B59AC3E77CB55E9F2B7B36A2CDB5593442E597DEF3773A4EE
F31122582DA62FAFBA32DE771F12D0E27729E4417BCE42B826FD369235C3DBA0
C32A429BDC8AA2528A30CE814C83807C646EF68E3E6E506DE58BA4EB4D1F2A6D
3B427F4487A41D2EC264508546BBCA7634C5C6EE1D6F36DBC0CC230403B4FC36
1D6F27A1E8CAF52701F7AB6C76DC0AA4B57B0B458A60BF921AF287B3755EB614
AC773703C10D2D7DA432A21EAB7C6A1017A36DAF78D2644F55334C50A1EB9370
44B66A2AADB12A22D8FD17DC0BE61AF14964F072447E929EEE0B6B8B9A6608B0
EDAA470FE82008B3EFDEA17EC7C2BAA02E25E15A52995AA62A79DC59BCA3AE55
6AC65ED8BAE17D2632B53F475504F09E2D66B42D52E9C3FE4333B7AF65CD8F96
D26E0E2A6AC10B4CE5D1C4026527F006DFEB90155DD58ABA4E39E1E369201369
B9AFC18ECAAE343741508DECEF2D75B83BFE0488E1F5F74B2A53F64958543FD8
2C7AB4437A3459527E85B459D174E497E3CC565907F2C602BD0F7CA63B4D030F
AAE6CDA44801BC8F611C25276050BFC1834DE084ACFCF03721334B1E70AE960B
372A0537E6BC6FF03FE366B640CBB7034D44CB0E492C69776057424619EF96CC
C6263EA571E4228DFA9B109CE61EB72B40C141386ADADA5241507EA996CA0CED
7378B6D71BA8545243526FA33CAD08ED462014FACC23BF301D1F234B18B43CF9
8AF85478B18C735F19937641A7C293DA9CD5B77D0A481585B5F7E9D8CA683766
23EDB8A7CDA60AC9B374F59DBB6DD51143A004A9F80DC13DDC277B068ACDDECB
23AEB03E4F102D896723E84E145935B008348808C59386DE6BF35937785D98C4
2E46DE5997F4773EFC2776172BBF30BB69B554EACCF5DF70E8BBB6A3F5BF6782
CFB04B54E54C2DF213B204B57C3F3FDCC85C053A4DE003672061D5CF0E24BF83
400BFCCBFF96CBC2042EAFBAE33155528B56C9B9E648A145ACE1412650DD9D4F
847E1FA74B5CCB8807EB7862CA52C62FF4AACF3163A4A1385C6B367EA611C8C2
BAFB0302CB498C79D4CAE7DC7FBA27735C6DB9DF492A8D442138AF59DAADD461
3CBA9492A1353A91AF2DC330F30101B2463B6AF04A75C7A8B6391CE1C902280C
15EF6F3AD01506DDCE1B08C6E938744C6FB0A2DE3908BD266B5FFBD75F532893
D47CB05F11E96F623CA3723B9040BCC7A0CCE6721BA548120AB812C6245DB89C
10ADCB3B79A07E4160678937A4C09BE1CBCCABE548DA3CB724F4846576F89C59
9D26EA1C64608EEDBD9400328FD267BF368036C464E37B977E7ABDB900A6597B
C1526ACD364F19C3CA91B7721EB4E08D246B80DC5EF4BAA09E5EC53EA6E0776E
E32C018DAB4FDE1E93650F93451C1DC0FC8054D04B39DCDA01ABD335080EC7B6
3967043AA42E57B49153D86F87473393D821AEED292C8BD174F5C674343527A0
3AFF0C46B55642563362A898A2E10AEC7FF120302B582DBC20D31F789B9F94CC
6F945ABE0BC706E7A90C2549D2829B933CBD0B7FBA6C0AC5728E04DFD15266BC
42FE0FAAC0F7D58A02A39EDBF1534FE1AC9EAE123EAC49F3EA67B1543B78CD8D
01D3B056367398E77F8CA5F09AC21FC388E1AFA6E6BD665222764A9F5431E7AC
5009553F673B8EE3156228015AA321E0CC95A670A52DE9DFDA054EC15285526D
05849E552B8505C9179AA7C037
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (Ex-dichotomie.dvi)
@start /Fa 157[58 50 42[52 52 52 52 52 52 7[40 41[{
 T1Encoding ReEncodeFont }9 90.9091 /SFBX1095 rf /Fb
162[25 1[25 29[71 3[45 45 45 1[45 45 45 45 45 49[{}11
90.9091 /CMR10 rf /Fc 171[53 24[25 59[{}2 90.9091 /CMMI10
rf /Fd 21[40 40 8[45 22[61 79[48 2[48 50 35 36 35 48
50 45 50 75 25 2[25 50 45 28 40 50 40 50 45 12[65 50
67 1[61 70 1[83 6[59 2[65 3[43 4[25 8[45 45 1[25 6[25
10[50 53 27[{ T1Encoding ReEncodeFont }41 90.9091 /SFRM1095
rf /Fe 135[69 5[53 8[37 3[60 1[58 29[86 18[66 66 49[{
 T1Encoding ReEncodeFont }8 119.552 /SFBX1440 rf /Ff
139[62 1[62 1[89 80 1[133 3[44 89 2[71 89 71 1[80 14[117
82[{ T1Encoding ReEncodeFont }12 172.188 /SFRM2074 rf
/Fg 135[114 5[87 8[60 3[98 1[96 29[142 10[60 58[{
 T1Encoding ReEncodeFont }7 206.559 /SFBX2488 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title ()/Subject ()/Creator
(LaTeX with hyperref)/Author ()/Keywords () /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a -372 -561
a
SDict begin H.S end
 -372 -561 a -372 -561 a
SDict begin H.R end
 -372 -561 a -372 -561 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 -372
-561 a 0 TeXcolorgray Black 0 TeXcolorgray -364 -246
a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -364
-246 a -364 -246 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -364 -246 a -364 -246 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 -364 -246
a -364 -246 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 -364 -246 a -364 -246 a
SDict begin H.S end
 -364 -246 a -364
-246 a
SDict begin 13.6 H.A end
 -364 -246 a -364 -246 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 -364 -246 a -303 -103
a Fg(Exercice)71 b(:)181 b Ff(Rec)l(herc)l(he)50 b(par)i(dic)l(hotomie)
p -364 10 4489 5 v -364 399 a
SDict begin H.S end
 -364 399 a -364 399 a
SDict begin 14 H.A end
 -364
399 a -364 399 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 -364 399 a Fe(Exercice)45 b(1)-223 571
y Fd(Soit)31 b(T)g(un)f(tableau)i(tri\351)e(tel)h(que)f(:)g
Fc(T)38 b Fb(=)25 b([8)p Fc(;)15 b Fb(8)p Fc(;)g Fb(17)p
Fc(;)g Fb(21)p Fc(;)g Fb(23)p Fc(;)g Fb(2)q(7)p Fc(;)h
Fb(28)q Fc(;)f Fb(45)q Fc(;)g Fb(5)q(7)p Fc(;)h Fb(71)q
Fc(;)f Fb(77)q Fc(;)g Fb(8)q(4)p Fc(;)h Fb(88)p Fc(;)g
Fb(95)q Fc(;)f Fb(9)q(7])p Fd(.)-364 609 y
SDict begin H.S end
 -364 609 a
-364 609 a
SDict begin 13.6 H.A end
 -364 609 a -364 609 a
SDict begin [/View [/XYZ H.V]/Dest (Item.1) cvn /DEST pdfmark end
 -364 609 a 0 TeXcolorgray
-274 715 a Fa(1\))p 0 TeXcolorgray 45 w Fd(On)31 b(v)m(eut)g(v)m
(\351ri\034er)g(la)g(pr\351sence)g(du)g(nom)m(bre)g Fb(23)h
Fd(dans)e(le)g(tableau.)-364 754 y
SDict begin H.S end
 -364 754 a -364 754
a
SDict begin 13.6 H.A end
 -364 754 a -364 754 a
SDict begin [/View [/XYZ H.V]/Dest (Item.2) cvn /DEST pdfmark end
 -364 754 a 0 TeXcolorgray -73
859 a Fa(a\))p 0 TeXcolorgray 46 w Fd(Retracer)h(toutes)g(les)f
(\351tap)s(es)g(de)h(l'algorithme)h(de)f(rec)m(herc)m(he)h(par)f(dic)m
(hotomie.)-364 898 y
SDict begin H.S end
 -364 898 a -364 898 a
SDict begin 13.6 H.A end
 -364 898 a
-364 898 a
SDict begin [/View [/XYZ H.V]/Dest (Item.3) cvn /DEST pdfmark end
 -364 898 a 0 TeXcolorgray -80 1004 a Fa(b\))p
0 TeXcolorgray 45 w Fd(Com)m(bien)i(d'it\351rations)e(on)m(t)g
(\351t\351)g(n\351cessaires)15 b(?)-364 1042 y
SDict begin H.S end
 -364 1042
a -364 1042 a
SDict begin 13.6 H.A end
 -364 1042 a -364 1042 a
SDict begin [/View [/XYZ H.V]/Dest (Item.4) cvn /DEST pdfmark end
 -364 1042 a 0 TeXcolorgray
-274 1148 a Fa(2\))p 0 TeXcolorgray 45 w Fd(F)-8 b(aire)32
b(de)e(m\352me)h(a)m(v)m(ec)h(le)e(nom)m(bre)i Fb(75)p
Fd(.)-364 1424 y
SDict begin H.S end
 -364 1424 a -364 1424 a
SDict begin 14 H.A end
 -364 1424 a
-364 1424 a
SDict begin [/View [/XYZ H.V]/Dest (section*.2) cvn /DEST pdfmark end
 -364 1424 a Fe(Exercice)45 b(2)-364 1467
y
SDict begin H.S end
 -364 1467 a -364 1467 a
SDict begin 13.6 H.A end
 -364 1467 a -364 1467 a
SDict begin [/View [/XYZ H.V]/Dest (Item.5) cvn /DEST pdfmark end
 -364
1467 a 0 TeXcolorgray -274 1596 a Fa(1\))p 0 TeXcolorgray
45 w Fd(Cr\351er)32 b(un)e(tableau)i Fc(T)42 b Fd(de)31
b(v)-5 b(aleurs)30 b(c)m(hoisies)h(al\351atoiremen)m(t)i(en)m(tre)f(1)e
(et)h(1000.)-364 1634 y
SDict begin H.S end
 -364 1634 a -364 1634 a
SDict begin 13.6 H.A end
 -364
1634 a -364 1634 a
SDict begin [/View [/XYZ H.V]/Dest (Item.6) cvn /DEST pdfmark end
 -364 1634 a 0 TeXcolorgray -274 1740
a Fa(2\))p 0 TeXcolorgray 45 w Fd(T)-8 b(rier)32 b(ce)e(tableau)i(a)m
(v)m(ec)f(une)g(des)f(fonctions)h(de)g(tri)f(de)h(p)m(ython.)-364
1779 y
SDict begin H.S end
 -364 1779 a -364 1779 a
SDict begin 13.6 H.A end
 -364 1779 a -364 1779
a
SDict begin [/View [/XYZ H.V]/Dest (Item.7) cvn /DEST pdfmark end
 -364 1779 a 0 TeXcolorgray -274 1884 a Fa(3\))p 0 TeXcolorgray
45 w Fd(\311crire)h(l'algorithme)g(de)f(rec)m(herc)m(he)h(par)f(dic)m
(hotomie)i(en)d(langage)i(p)m(ython.)-364 1923 y
SDict begin H.S end
 -364
1923 a -364 1923 a
SDict begin 13.6 H.A end
 -364 1923 a -364 1923 a
SDict begin [/View [/XYZ H.V]/Dest (Item.8) cvn /DEST pdfmark end
 -364 1923
a 0 TeXcolorgray -274 2029 a Fa(4\))p 0 TeXcolorgray
45 w Fd(T)-8 b(ester)38 b(v)m(otre)g(programme)g(a)m(v)m(ec)g(la)f(rec)
m(herc)m(he)i(de)e(di\033\351ren)m(tes)h(v)-5 b(aleurs)36
b(du)h(tableau)h(et)f(des)g(v)-5 b(aleurs)37 b(qui)f(ne)h(son)m(t)g
(pas)-137 2142 y(dans)31 b(le)f(tableau.)-364 2157 y
SDict begin H.S end

-364 2157 a -364 2157 a
SDict begin 13.6 H.A end
 -364 2157 a -364 2157 a
SDict begin [/View [/XYZ H.V]/Dest (Item.9) cvn /DEST pdfmark end
 -364
2157 a 0 TeXcolorgray -274 2286 a Fa(5\))p 0 TeXcolorgray
45 w Fd(Mo)s(di\034er)h(v)m(otre)g(fonction)g(p)s(our)g(ren)m(v)m(o)m
(y)m(er)h(le)f(nom)m(bre)h(d'it\351rations)f(n\351cessaires)g(\340)f
(la)h(rec)m(herc)m(he)h(d'une)f(v)-5 b(aleur.)-364 2324
y
SDict begin H.S end
 -364 2324 a -364 2324 a
SDict begin 13.6 H.A end
 -364 2324 a -364 2324 a
SDict begin [/View [/XYZ H.V]/Dest (Item.10) cvn /DEST pdfmark end
 -364
2324 a 0 TeXcolorgray -274 2430 a Fa(6\))p 0 TeXcolorgray
45 w Fd(Prop)s(oser)31 b(une)g(v)m(ersion)g(r\351cursiv)m(e)g(de)g
(l'algorithme)h(de)f(rec)m(herc)m(he)h(par)f(dic)m(hotomie.)p
0 TeXcolorgray 1858 6310 a(1)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
